package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question131 {
	class Solution {
		List<List<String>> ans = new ArrayList<>();

		public List<List<String>> partition(String s) {
			dfs(s, 0, new ArrayList<>());
			return ans;
		}

		private void dfs(String s, int i, List<String> cur) {
			if (i >= s.length()) {
				ans.add(new ArrayList<>(cur));
			}
			for (int j = i + 1; j <= s.length(); j++) {
				if (isPali(s.substring(i, j))) {
					cur.add(s.substring(i, j));
					dfs(s, j, cur);
					cur.remove(cur.size() - 1);
				}
			}
			return;
		}

		private boolean isPali(String s) {
			if (s == null || s.length() == 0) {
				return false;
			}
			int l = 0, r = s.length() - 1;
			while (l <= r) {
				if (s.charAt(l++) != s.charAt(r--)) {
					return false;
				}
			}
			return true;
		}
	}
}


#include <string>
#include <vector>
using namespace std;

class Solution {
public:
	vector<vector<string>> partition(string s) {
		vector<vector<string>> ans;
		vector<string> cur;
		dfs(s, 0, cur, ans);
		return ans;
	}
private:
	void dfs(string& s, int i, vector<string>& cur, vector<vector<string>>& ans) {
		if (i >= s.size()) {
			vector<string> cand(cur);
			ans.push_back(cand);
		}
		for (int j = 1; i + j <= s.size(); j++) {
			if (isPali(s.substr(i, j))) {
				cur.push_back(s.substr(i, j));
				dfs(s, i + j, cur, ans);
				cur.pop_back();
			}
		}
	}
	bool isPali(string s) {
		int l = 0, r = s.size() - 1;
		while (l < r) {
			if (s[l++] != s[r--]) return false;
		}
		return true;
	}
};
