package com.leetcode.problems;

import java.util.Arrays;
import java.util.Comparator;

public class Question1288 {
	class Solution {
		public int removeCoveredIntervals(int[][] intervals) {
			Comparator<int[]> comparator = new Comparator<>() {
				@Override
				public int compare(int[] o1, int[] o2) {
					if (o1[0] == o2[0]) {
						return o2[1] - o1[1];
					}
					return o1[0] - o2[0];
				}
			};
			Arrays.sort(intervals, comparator);
			return removeCovered(intervals);
		}

		private final int removeCovered(int[][] intervals) {
			int ans = 1, index = 0;
			for (int i = 1; i < intervals.length; i++) {
				int[] target = intervals[i], reference = intervals[index];
				if (target[0] >= reference[0] && target[1] <= reference[1]) {
					continue;
				}
				ans++;
				index = i;
			}
			return ans;
		}
	}
}

class Solution:
    def removeCoveredIntervals(self, intervals: List[List[int]]) -> int:
        intervals.sort(key=lambda x:(x[0], -x[1]))
        ans = 0
        l = -1
        r = -1
        for i in intervals:
            if i[1] > r:
                ans += 1
                l = i[0]
                r = i[1]
        return ans
