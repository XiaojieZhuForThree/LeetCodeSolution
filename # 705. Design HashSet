package problems;

public class Question705 {
	class MyHashSet {
		boolean[] arr;

		/** Initialize your data structure here. */
		public MyHashSet() {
			arr = new boolean[1000001];
		}

		public void add(int key) {
			arr[key] = true;
		}

		public void remove(int key) {
			arr[key] = false;
		}

		/** Returns true if this set contains the specified element */
		public boolean contains(int key) {
			return arr[key];
		}
	}

	/**
	 * Your MyHashSet object will be instantiated and called as such: MyHashSet obj
	 * = new MyHashSet(); obj.add(key); obj.remove(key); boolean param_3 =
	 * obj.contains(key);
	 */
}

# -*- coding: utf-8 -*-
"""
Created on Thu Apr 21 08:15:11 2022

@author: xiaoj
"""

class MyHashSet:

    def __init__(self):
        self.arr = [0 for i in range(1000001)]

    def add(self, key: int) -> None:
        self.arr[key] = 1

    def remove(self, key: int) -> None:
        self.arr[key] = 0

    def contains(self, key: int) -> bool:
        return self.arr[key]


# Your MyHashSet object will be instantiated and called as such:
# obj = MyHashSet()
# obj.add(key)
# obj.remove(key)
# param_3 = obj.contains(key)


#include <vector>
using namespace std;

class MyHashSet {
	vector<int> s;
public:
	MyHashSet() {
		for (int i = 0; i <= 1000000; i++) {
			s.push_back(-1);
		}
	}

	void add(int key) {
		s[key] = 0;
	}

	void remove(int key) {
		s[key] = -1;
	}

	bool contains(int key) {
		return s[key] != -1;
	}
};

/**
 * Your MyHashSet object will be instantiated and called as such:
 * MyHashSet* obj = new MyHashSet();
 * obj->add(key);
 * obj->remove(key);
 * bool param_3 = obj->contains(key);
 */
