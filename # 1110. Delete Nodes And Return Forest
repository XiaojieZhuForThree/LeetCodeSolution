package problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question1110 {
	/**
	 * Definition for a binary tree node. public class TreeNode { int val; TreeNode
	 * left; TreeNode right; TreeNode() {} TreeNode(int val) { this.val = val; }
	 * TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left
	 * = left; this.right = right; } }
	 */
	/**
	 * Definition for a binary tree node. public class TreeNode { int val; TreeNode
	 * left; TreeNode right; TreeNode() {} TreeNode(int val) { this.val = val; }
	 * TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left
	 * = left; this.right = right; } }
	 */
	class Solution {
		public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
			List<TreeNode> ans = new ArrayList<>();
			Set<Integer> del = new HashSet<>();
			for (int i : to_delete) {
				del.add(i);
			}
			dfs(root, ans, del);
			if (!del.contains(root.val)) {
				ans.add(root);
			}
			return ans;
		}

		private void dfs(TreeNode root, List<TreeNode> ans, Set<Integer> del) {
			if (root == null) {
				return;
			}
			dfs(root.left, ans, del);
			dfs(root.right, ans, del);
			if (del.contains(root.val)) {
				if (root.left != null && !del.contains(root.left.val)) {
					ans.add(root.left);
				}
				if (root.right != null && !del.contains(root.right.val)) {
					ans.add(root.right);
				}
				return;
			}
			if (!del.contains(root.val)) {
				if (root.left != null && del.contains(root.left.val)) {
					root.left = null;
				}
				if (root.right != null && del.contains(root.right.val)) {
					root.right = null;
				}
				return;
			}
		}
	}
}
