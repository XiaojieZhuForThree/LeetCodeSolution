package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import com.leetcode.model.TreeNode;

public class Question1110 {
	class Solution {
		public List<TreeNode> delNodes(TreeNode root, int[] to_delete) {
			if (root == null)
				return List.of();
			Set<Integer> set = new HashSet<>();
			for (int i : to_delete)
				set.add(i);
			List<TreeNode> list = new ArrayList<>();
			dfs(root, set, list);
			if (!set.contains(root.val))
				list.add(root);
			return list;
		}

		private void dfs(TreeNode node, Set<Integer> set, List<TreeNode> list) {
			if (node == null)
				return;
			dfs(node.left, set, list);
			dfs(node.right, set, list);
			if (node.left != null && set.contains(node.left.val))
				node.left = null;
			if (node.right != null && set.contains(node.right.val))
				node.right = null;
			if (set.contains(node.val)) {
				if (node.left != null)
					list.add(node.left);
				if (node.right != null)
					list.add(node.right);
			}
			return;
		}
	}
}
