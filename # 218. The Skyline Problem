package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;
import java.util.TreeMap;

public class Question218 {
	class Solution {
		public List<List<Integer>> getSkyline(int[][] buildings) {
			TreeMap<Integer, Integer> map = new TreeMap<>(); // edge location -> height

			for (int[] b : buildings) {

				int l = b[0];
				int r = b[1];
				int h = b[2];

				Integer rightFloor = map.floorKey(r);
				if (rightFloor == null || map.get(rightFloor) < h) {
					map.put(r, rightFloor == null ? 0 : map.get(rightFloor));
				}

				Integer leftFloor = map.floorKey(l);
				if (leftFloor == null || map.get(leftFloor) < h) {
					map.put(l, h);
				}

				List<Integer> delete = new ArrayList<>();
				for (Integer loc : map.subMap(l + 1, r).keySet()) {
					if (map.get(loc) < h) {
						if (map.lowerEntry(loc) != null && map.lowerEntry(loc).getValue() > h) {
							// drop from a higher place to lower place at loc, leading to an intersection
							// with current building
							map.put(loc, h);
						} else {
							delete.add(loc);
						}
					}
				}
				map.keySet().removeAll(delete);
			}

			List<List<Integer>> ans = new ArrayList<>();
			for (Integer loc : map.keySet()) {
				int h = map.get(loc);
				if (!ans.isEmpty() && ans.get(ans.size() - 1).get(1) == h) {
					continue;
				}
				ans.add(List.of(loc, h));
			}

			return ans;
		}
	}
}


#include <vector>
#include <queue>
#include <map>
using namespace std;
class Solution {
public:
    vector<vector<int>> getSkyline(vector<vector<int>>& buildings) {
        priority_queue<vector<int>>pq;
        map<int, vector<pair<int, int>>>m;
        vector<vector<int>>ans;
        int count = 0, width = 0;
        for (auto i : buildings) {
            m[i[0]].push_back({ i[2],i[1] });
            m[i[1]].push_back({ 0,0 });
        }
        for (auto i : m) {
            auto vec = i.second;
            for (auto j : vec) {
                if (j.first != 0) {
                    pq.push({ j.first, j.second });
                }
            }
            if (i.first == width) {
                count = 0;
            }
            while (!pq.empty() && pq.top()[1] <= i.first) {
                pq.pop();
            }
            if (!pq.empty() && pq.top()[0] > count) {
                count = pq.top()[0];
                width = pq.top()[1];
                ans.push_back({ i.first,count });
            }
            else if (count == 0) {
                ans.push_back({ i.first, 0 });
            }
        }

        vector<vector<int>> vec;
        int prev = -1;
        for (auto i : ans) {
            if (i[1] != prev) {
                vec.push_back(i);
                prev = i[1];
            }
        }
        return vec;
    }
};
