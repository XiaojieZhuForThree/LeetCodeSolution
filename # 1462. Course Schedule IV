package problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question1462 {
	class Solution1 {
		public List<Boolean> checkIfPrerequisite(int n, int[][] P, int[][] Q) {
			Map<Integer, Set<Integer>> pars = new HashMap<>();
			Map<Integer, Set<Integer>> kids = new HashMap<>();
			for (int i = 0; i < n; i++) {
				pars.put(i, new HashSet<>());
				kids.put(i, new HashSet<>());
			}
			for (int[] i : P) {
				pars.get(i[1]).add(i[0]);
				for (int j : pars.get(i[0])) {
					pars.get(i[1]).add(j);
				}
				kids.get(i[0]).add(i[1]);
				for (int m : kids.get(i[1])) {
					kids.get(i[0]).add(m);
				}
			}
			List<Boolean> ans = new ArrayList<>();
			for (int[] q : Q) {
				ans.add(pars.get(q[1]).contains(q[0]) || kids.get(q[0]).contains(q[1]));
			}
			return ans;
		}
	}

	class Solution2 {
		boolean[][] dp, visited;

		public List<Boolean> checkIfPrerequisite(int n, int[][] P, int[][] Q) {
			dp = new boolean[n][n];
			visited = new boolean[n][n];
			List<List<Integer>> graph = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				graph.add(new ArrayList<>());
			}
			for (int[] p : P) {
				graph.get(p[0]).add(p[1]);
			}
			List<Boolean> ans = new ArrayList<>();
			for (int[] q : Q) {
				ans.add(dfs(graph, q[0], q[1]));
			}
			return ans;
		}

		private boolean dfs(List<List<Integer>> graph, int src, int dst) {
			if (visited[src][dst]) {
				return dp[src][dst];
			}

			if (src == dst) {
				return true;
			}
			for (int next : graph.get(src)) {
				if (dfs(graph, next, dst)) {
					visited[src][dst] = true;
					dp[src][dst] = true;
					return true;
				}
			}
			visited[src][dst] = true;
			dp[src][dst] = false;
			return false;
		}
	}
}


#include <vector>
using std::vector;

class Solution {
public:
    vector<bool> checkIfPrerequisite(int numCourses, vector<vector<int>>& prerequisites, vector<vector<int>>& queries) {
        vector<vector<bool>> relation(numCourses, vector<bool>(numCourses, false));
        vector<bool> ans;

        for (const auto& d : prerequisites) {
            relation[d[0]][d[1]] = true;
        }
        for (int i = 0; i < numCourses; i++) {
            for (int src = 0; src < numCourses; src++) {
                for (int target = 0; target < numCourses; target++) {
                    relation[src][target] = relation[src][target] || (relation[src][i] && relation[i][target]);
                }
            }
        }
        for (const auto& d : queries) {
            ans.push_back(relation[d[0]][d[1]]);
        }
        return ans;        
    }
};
