package com.leetcode.problems;

import java.util.List;
import java.util.PriorityQueue;

public class Question632 {
	class Solution {
		public int[] smallestRange(List<List<Integer>> nums) {
			PriorityQueue<int[]> pq = new PriorityQueue<>(
					(a, b) -> nums.get(a[0]).get(a[1]) - nums.get(b[0]).get(b[1]));
			int max = Integer.MIN_VALUE;
			for (int i = 0; i < nums.size(); i++) {
				pq.offer(new int[] { i, 0 });
				max = Math.max(nums.get(i).get(0), max);
			}
			int left = 0, right = Integer.MAX_VALUE;
			while (pq.size() == nums.size()) {
				int[] candidate = pq.poll();
				int curSmallestVal = nums.get(candidate[0]).get(candidate[1]);
				if (max - curSmallestVal < right - left) {
					right = max;
					left = curSmallestVal;
				}
				if (candidate[1] < nums.get(candidate[0]).size() - 1) {
					pq.offer(new int[] { candidate[0], candidate[1] + 1 });
					max = Math.max(max, nums.get(candidate[0]).get(candidate[1] + 1));
				}
			}
			return new int[] { left, right };
		}
	}
}
