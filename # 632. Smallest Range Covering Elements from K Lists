package com.leetcode.problems;

import java.util.List;
import java.util.PriorityQueue;

public class Question632 {
	class Solution {
		public int[] smallestRange(List<List<Integer>> nums) {
			PriorityQueue<int[]> pq = new PriorityQueue<>(
					(a, b) -> nums.get(a[0]).get(a[1]) - nums.get(b[0]).get(b[1]));
			int max = Integer.MIN_VALUE;
			for (int i = 0; i < nums.size(); i++) {
				pq.offer(new int[] { i, 0 });
				max = Math.max(nums.get(i).get(0), max);
			}
			int left = 0, right = Integer.MAX_VALUE;
			while (pq.size() == nums.size()) {
				int[] candidate = pq.poll();
				int curSmallestVal = nums.get(candidate[0]).get(candidate[1]);
				if (max - curSmallestVal < right - left) {
					right = max;
					left = curSmallestVal;
				}
				if (candidate[1] < nums.get(candidate[0]).size() - 1) {
					pq.offer(new int[] { candidate[0], candidate[1] + 1 });
					max = Math.max(max, nums.get(candidate[0]).get(candidate[1] + 1));
				}
			}
			return new int[] { left, right };
		}
	}
}


class Solution {
public:
    vector<int> smallestRange(vector<vector<int>>& nums) {
        int l = nums[0][0];
        auto comp = [&nums] (pair<int, int> a, pair<int, int> b) {
            return nums[a.first][a.second] > nums[b.first][b.second];
        };
        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp)> pq(comp);
        for (int i = 0; i < size(nums); i++) {
            pq.push({i, 0});
            l = std::max(l, nums[i][0]);
        }
        int s = nums[pq.top().first][pq.top().second];
        vector<int> ans = {s, l};
        while (!pq.empty()) {
            auto cur = pq.top();
            pq.pop();
            int i = cur.first, j = cur.second;
            if (helper(ans[0], ans[1], nums[i][j], l)) {
                ans[0] = nums[i][j];
                ans[1] = l;
            }
            if (size(nums[i]) == j + 1) break;
            l = std::max(l, nums[i][j + 1]);
            pq.push({i, j + 1});
        }
        return ans;
    }
private:
    bool helper(int a, int b, int c, int d) {
        if (d - c < b - a) return true;
        else if (d - c == b - a && c < a) return true;
        return false;
    }
};
