class Solution {
    public boolean find132pattern(int[] nums) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int[] dp = new int[nums.length];
        int min = nums[0];
        dp[0] = min;
        for (int i = 1; i < nums.length; i++) {
            min = Math.min(min, nums[i]);
            dp[i] = min;
        }
        TreeSet<Integer> set = new TreeSet<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            Integer ceil = set.lower(nums[i]);
            min = dp[i];
            if (min < nums[i] && ceil != null && ceil > min) {
                return true;
            }
            set.add(nums[i]);
        }
        return false;
    }
}

# -*- coding: utf-8 -*-
"""
Created on Fri May  6 21:42:23 2022

@author: xiaoj
"""
from typing import List


class Solution:
    def find132pattern(self, nums: List[int]) -> bool:
        cur_min = nums[0]
        stack = []
        for i in nums:
            while stack and stack[-1][0] <= i:
                cur_min = min(cur_min, stack.pop(-1)[0])
            if stack and stack[-1][1] < i:
                return True
            stack.append((i, cur_min))
        return False

