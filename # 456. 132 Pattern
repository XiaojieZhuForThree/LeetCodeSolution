class Solution {
    public boolean find132pattern(int[] nums) {
        if (nums == null || nums.length == 0) {
            return false;
        }
        int[] dp = new int[nums.length];
        int min = nums[0];
        dp[0] = min;
        for (int i = 1; i < nums.length; i++) {
            min = Math.min(min, nums[i]);
            dp[i] = min;
        }
        TreeSet<Integer> set = new TreeSet<>();
        for (int i = nums.length - 1; i >= 0; i--) {
            Integer ceil = set.lower(nums[i]);
            min = dp[i];
            if (min < nums[i] && ceil != null && ceil > min) {
                return true;
            }
            set.add(nums[i]);
        }
        return false;
    }
}


# -*- coding: utf-8 -*-
"""
Created on Fri May  6 21:42:23 2022

@author: xiaoj
"""
from typing import List


class Solution:
    def find132pattern(self, nums: List[int]) -> bool:

        # minimum[i] = min(nums[:i + 1])
        minimum = [nums[0]] * len(nums)
        for i, num in enumerate(nums[1:]):
            minimum[i + 1] = min(minimum[i], num)

        monStack = []
        # we traverse nums from the back
        for i, num in enumerate(reversed(nums)):
            # if num is larger than the top of the stack (so it could a the nums[k] < nums[j] situation)
            while monStack and monStack[-1] < num:
                # we check if there is a possible nums[i] < nums[k] situation
                if monStack.pop() > minimum[~i]:   # ~i == -(i + 1)
                    return True
            monStack.append(num)

        return False
