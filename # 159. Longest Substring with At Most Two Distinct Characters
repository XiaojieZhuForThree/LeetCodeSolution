public class Solution {
    /**
     * @param s: a string
     * @return: the length of the longest substring T that contains at most 2 distinct characters
     */
    public int lengthOfLongestSubstringTwoDistinct(String s) {
        // Write your code here
        if (s == null || s.length() == 0) {
            return 0;
        }
        int ans = 0, left = 0;
        Map<Character, Integer> map = new HashMap<>();

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            map.put(c, map.getOrDefault(c, 0) + 1);
            if (map.size() > 2) {
                while (map.size() > 2) {
                    map.put(s.charAt(left), map.get(s.charAt(left))-1);
                    if (map.get(s.charAt(left))== 0) {
                        map.remove(s.charAt(left));
                    }
                    left++;
                }
            }
            ans = Math.max(ans, i - left + 1);
        }
        return ans;
    }
}
