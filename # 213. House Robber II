package com.leetcode.problems;

public class Question213 {
	class Solution {
		public int rob(int[] nums) {
			if (nums.length == 1) {
				return nums[0];
			}
			if (nums.length == 2) {
				return Math.max(nums[0], nums[1]);
			}
			return Math.max(dp(nums.clone(), 0, nums.length - 2), dp(nums.clone(), 1, nums.length - 1));
		}

		private int dp(int[] nums, int l, int r) {
			if (r - l == 1) {
				return Math.max(nums[l], nums[r]);
			}
			int max = Math.max(nums[l], nums[l + 1]);
			nums[l + 1] = max;
			for (int i = l + 2; i <= r; i++) {
				int curVal = nums[i] + nums[i - 2];
				nums[i] = Math.max(curVal, nums[i - 1]);
				max = Math.max(max, curVal);
			}
			return max;
		}
	}
}
