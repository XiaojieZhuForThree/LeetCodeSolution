class Solution {
    public int longestPalindromeSubseq(String s) {
        if (s == null || s.length() == 0) {
            return 0;
        }
        int ans = 1;
        int[] maxSub = new int[s.length()];
        Arrays.fill(maxSub, 1);
        Map<Character, Integer> seen = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (!seen.containsKey(c)) {
                seen.put(c, i);
            } else {
                for (int j = seen.get(c); j < i; j++) {
                    if (s.charAt(j) == c) {
                        int val = 2 + getVal(maxSub, j, i);
                        maxSub[j] = Math.max(maxSub[j], val);
                        ans = Math.max(ans, maxSub[j]);
                    }
                }                
            }
        }
        return ans;
    }
    public int getVal(int[] arr, int i, int j) {
        int val = 0;
        for (int x = i + 1; x < j; x++) {
            val = Math.max(arr[x], val);
        }
        return val;
    }
}


class Solution {
    public int longestPalindromeSubseq(String s) {
        int n = s.length();
        int[][] dp = new int[n][n];
        for (int i = 0; i < n; i++) {
            dp[i][i] = 1;
        }
        for (int i = 1; i < n; i++) {
            for(int j = i - 1; j >= 0; j--){
                if(s.charAt(i) == s.charAt(j)) {
                    dp[j][i] = dp[j+1][i-1] + 2;
                } else {
                    dp[j][i] = Math.max(dp[j+1][i], dp[j][i-1]);
                }
            }
        }
        return dp[0][n-1];
    }
}
