package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question437 {
	class Solution {
		int ans = 0;

		public int pathSum(TreeNode root, int sum) {
			Map<Integer, Integer> prevSums = new HashMap<>();
			prevSums.put(0, 1);
			dfs(root, 0, sum, prevSums);
			return ans;
		}

		private void dfs(TreeNode node, int curSum, int sum, Map<Integer, Integer> prevSums) {
			if (node == null) {
				return;
			}
			curSum += node.val;
			if (prevSums.containsKey(curSum - sum)) {
				ans += prevSums.get(curSum - sum);
			}
			prevSums.put(curSum, prevSums.getOrDefault(curSum, 0) + 1);

			dfs(node.left, curSum, sum, prevSums);
			dfs(node.right, curSum, sum, prevSums);

			prevSums.put(curSum, prevSums.get(curSum) - 1);
			curSum -= node.val;
		}
	}

	class Solution2 {
		int ans = 0;

		public int pathSum(TreeNode root, int sum) {
			if (root == null)
				return 0;
			pathSum(root.left, sum);
			pathSum(root.right, sum);
			helper(root, sum);
			return ans;
		}

		private void helper(TreeNode root, int sum) {
			if (root == null)
				return;
			if (root.val == sum)
				ans++;
			helper(root.left, sum - root.val);
			helper(root.right, sum - root.val);
		}
	}
}
