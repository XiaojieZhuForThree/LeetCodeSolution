/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int maxDiam = 0;
    public int diameterOfBinaryTree(TreeNode root) {
        if (root == null) {
            return 0;
        }
        helper(root);
        return maxDiam;
    }
    private int helper(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int leftD = helper(root.left), rightD = helper(root.right);
        int curDiam = leftD + rightD;
        maxDiam = Math.max(maxDiam, curDiam);
        return 1 + Math.max(leftD, rightD);
    }
}


#include "TreeNode.h"
#include <utility>

class Solution {
public:
	int ans = 0;
	int diameterOfBinaryTree(TreeNode* root) {
		dfs(root);
		return ans;
	}
private:
	int dfs(TreeNode* node) {
		if (!node) return -1;
		int l = dfs(node->left), r = dfs(node->right);
		ans = std::max(ans, l + r + 2);
		return 1 + std::max(l, r);
	}
};
