package com.leetcode.problems;

public class Question48 {
	class Solution {
		public void rotate(int[][] matrix) {
			int n = matrix.length;
			rotate(matrix, 0, n - 1);
			return;
		}

		private void rotate(int[][] matrix, int l, int r) {
			if (l >= r) {
				return;
			}
			int diff = r - l;
			for (int i = 0; i < diff; i++) {
				int val1 = matrix[l][l + i], val2 = matrix[l + i][r];
				int val3 = matrix[r][r - i], val4 = matrix[r - i][l];
				matrix[l + i][r] = val1;
				matrix[r][r - i] = val2;
				matrix[r - i][l] = val3;
				matrix[l][l + i] = val4;
			}
			rotate(matrix, l + 1, r - 1);
		}
	}
}


from typing import List


class Solution:
    def rotate(self, matrix: List[List[int]]) -> None:
        """
        Do not return anything, modify matrix in-place instead.
        """
        l = 0
        r = len(matrix) - 1
        while l < r:
            self.helper(matrix, l, r)
            l += 1
            r -= 1

    def helper(self, matrix, l, r):
        width = r - l
        container = matrix[l][l + 1:r + 1]
        x = l + 1
        y = r
        for i in range(width):
            temp = matrix[x][y]
            matrix[x][y] = container[i]
            container[i] = temp
            x += 1
        x -= 1
        y = r - 1
        for i in range(width):
            temp = matrix[x][y]
            matrix[x][y] = container[i]
            container[i] = temp
            y -= 1
        y += 1
        x -= 1
        for i in range(width):
            temp = matrix[x][y]
            matrix[x][y] = container[i]
            container[i] = temp
            x -= 1
        x += 1
        y += 1
        for i in range(width):
            temp = matrix[x][y]
            matrix[x][y] = container[i]
            container[i] = temp
            y += 1
