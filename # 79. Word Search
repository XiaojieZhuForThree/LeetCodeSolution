package com.leetcode.problems;

public class Question79 {
	class Solution {
		public boolean exist(char[][] board, String word) {
			if (board == null || board.length == 0 || board[0].length == 0)
				return false;
			int m = board.length, n = board[0].length;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (match(board, i, j, word, 0))
						return true;
				}
			}
			return false;
		}

		private boolean match(char[][] board, int i, int j, String word, int cur) {
			if (cur >= word.length())
				return true;
			if (i < 0 || i >= board.length || j < 0 || j >= board[0].length)
				return false;
			if (board[i][j] != word.charAt(cur))
				return false;
			char c = board[i][j];
			board[i][j] = '#';
			boolean ans = match(board, i + 1, j, word, cur + 1) || match(board, i - 1, j, word, cur + 1)
					|| match(board, i, j + 1, word, cur + 1) || match(board, i, j - 1, word, cur + 1);
			board[i][j] = c;
			return ans;
		}
	}
}


#include <vector>
#include <string>

using std::vector;
using std::string;

class Solution {
public:
	bool exist(vector<vector<char>>& board, string word) {
		for (int i = 0; i < size(board); i++) {
			for (int j = 0; j < size(board[0]); j++) {
				if (board[i][j] == word[0] && helper(board, word, 0, i, j)) return true;
			}
		}
		return false;
	}
private:
	bool helper(vector<vector<char>>& board, string& word, int cur, int i, int j) {
		if (cur == size(word)) return true;
		if (i < 0 || i >= size(board) || j < 0 || j >= size(board[0]) || board[i][j] != word[cur]) return false;
		board[i][j] = '&';
		bool ans = helper(board, word, cur + 1, i + 1, j)
			|| helper(board, word, cur + 1, i - 1, j)
			|| helper(board, word, cur + 1, i, j + 1)
			|| helper(board, word, cur + 1, i, j - 1);
		board[i][j] = word[cur];
		return ans;
	}
};
