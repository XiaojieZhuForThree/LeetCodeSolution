package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Queue;

public class Question994 {
	class Solution {
		class Point {
			private int x;
			private int y;

			public Point(int x, int y) {
				this.x = x;
				this.y = y;
			}

			public int getX() {
				return x;
			}

			public int getY() {
				return y;
			}
		}

		public int orangesRotting(int[][] grid) {
			int elapsedTime = -1;
			Queue<Point> rottenQueue = new ArrayDeque<>();
			int m = grid.length, n = grid[0].length;
			int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i][j] == 2) {
						rottenQueue.offer(new Point(i, j));
					}
				}
			}
			while (!rottenQueue.isEmpty()) {
				elapsedTime++;
				for (int i = rottenQueue.size(); i > 0; i--) {
					Point rotten = rottenQueue.poll();
					for (int[] dir : dirs) {
						int nx = rotten.getX() + dir[0];
						int ny = rotten.getY() + dir[1];
						if (0 > nx || nx >= m || 0 > ny || ny >= n || grid[nx][ny] != 1) {
							continue;
						}
						grid[nx][ny] = 2;
						rottenQueue.offer(new Point(nx, ny));
					}
				}
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i][j] == 1) {
						return -1;
					}
				}
			}
			return elapsedTime == -1 ? 0 : elapsedTime;
		}
	}
}
