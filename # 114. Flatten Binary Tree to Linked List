package com.leetcode.problems;

import com.leetcode.model.TreeNode;

public class Question114 {
	class Solution {
	    public void flatten(TreeNode root) {
	        rec(root);
	        return;
	    }
	    private TreeNode rec(TreeNode node) {
	        if (node == null) {
	            return node;
	        }
	        TreeNode left = rec(node.left), right = rec(node.right);
	        node.left = null;
	        if (left == null) {
	            node.right = right;
	            return node;
	        }
	        TreeNode dummy = left;
	        while (dummy.right != null) {
	            dummy = dummy.right;
	        }
	        dummy.right = right;
	        node.right = left;
	        return node;
	    }
	}
}


from typing import Optional
from data.TreeNode import TreeNode


class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        if not root:
            return
        self.flatten(root.left)
        self.flatten(root.right)
        if root.left:
            dummy = root.left
            while dummy.right:
                dummy = dummy.right
            dummy.right = root.right
            root.right = root.left
            root.left = None
