package com.leetcode.problems;

import com.leetcode.api.ListNode;

public class Question21 {
	class Solution {
		public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
			ListNode node = new ListNode(-1);
			ListNode trav = node;
			while (l1 != null && l2 != null) {
				if (l1.val < l2.val) {
					trav.next = l1;
					l1 = l1.next;
				} else {
					trav.next = l2;
					l2 = l2.next;
				}
				trav = trav.next;
			}
			if (l1 != null) {
				trav.next = l1;
			} else {
				trav.next = l2;
			}
			return node.next;
		}
	}
}


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, list1: Optional[ListNode], list2: Optional[ListNode]) -> Optional[ListNode]:
        ans = ListNode(-1)
        root = ans
        while list1 and list2:
            if list1.val < list2.val:
                ans.next = list1
                list1 = list1.next
            else:
                ans.next = list2
                list2 = list2.next
            ans = ans.next
        if list1:
            ans.next = list1
        if list2:
            ans.next = list2
        return root.next
