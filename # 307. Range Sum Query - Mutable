package com.leetcode.problems;

public class Question307 {
	class NumArray {
		int[] nums;
		int[] BIT;
		int n;

		public NumArray(int[] nums) {
			this.nums = nums;

			n = nums.length;
			BIT = new int[n + 1];
			for (int i = 0; i < n; i++)
				init(i, nums[i]);
		}

		public void init(int i, int val) {
			i++;
			while (i <= n) {
				BIT[i] += val;
				i += (i & -i);
			}
		}

		void update(int i, int val) {
			int diff = val - nums[i];
			nums[i] = val;
			init(i, diff);
		}

		public int getSum(int i) {
			int sum = 0;
			i++;
			while (i > 0) {
				sum += BIT[i];
				i -= (i & -i);
			}
			return sum;
		}

		public int sumRange(int i, int j) {
			return getSum(j) - getSum(i - 1);
		}
	}
}


from typing import List


class Node:
    def __init__(self, s, e, v, l, r):
        self.s = s
        self.e = e
        self.v = v
        self.l = l
        self.r = r

class NumArray:

    def __init__(self, nums: List[int]):
        self.root = self._build(nums, 0, len(nums) - 1)

    def update(self, index: int, val: int) -> None:
        self._update(self.root, index, val)

    def sumRange(self, left: int, right: int) -> int:
        return self._sum(self.root, left, right)
        
    def _build(self, nums, s, e):
        if s == e:
            return Node(s, e, nums[s], None, None)
        root = Node(s, e, -1, None, None)
        mid = s + (e - s) // 2
        root.l = self._build(nums, s, mid)
        root.r = self._build(nums, mid + 1, e)
        root.v = root.l.v + root.r.v
        return root
    
    def _update(self, node, index, val):
        if not node:
            return
        if node.s == node.e and node.s == index:
            node.v = val
            return
        mid = node.s + (node.e - node.s) // 2
        if index <= mid:
            self._update(node.l, index, val)
        else:
            self._update(node.r, index, val)
        node.v = node.l.v + node.r.v
        
    def _sum(self, node, left, right):
        if node.s == left and node.e == right:
            return node.v
        mid = node.s + (node.e - node.s) // 2
        if right <= mid:
            return self._sum(node.l, left, right)
        elif left > mid:
            return self._sum(node.r, left, right)
        else:
            return self._sum(node.l, left, mid) + self._sum(node.r, mid + 1, right)


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(index,val)
# param_2 = obj.sumRange(left,right)


from typing import List


class Node:
    def __init__(self, s, e, v, l, r):
        self.s = s
        self.e = e
        self.v = v
        self.l = l
        self.r = r


class NumArray:

    def __init__(self, nums: List[int]):
        self.root = self._build(nums, 0, len(nums) - 1)

    def update(self, index: int, val: int) -> None:
        self._update(self.root, index, val)

    def sumRange(self, left: int, right: int) -> int:
        return self._sum(self.root, left, right)

    def _build(self, nums, s, e):
        if s == e:
            return Node(s, e, nums[s], None, None)
        root = Node(s, e, -1, None, None)
        mid = s + (e - s) // 2
        root.l = self._build(nums, s, mid)
        root.r = self._build(nums, mid + 1, e)
        root.v = root.l.v + root.r.v
        return root

    def _update(self, node, index, val):
        if not node:
            return
        if node.s == node.e and node.s == index:
            node.v = val
            return
        mid = node.s + (node.e - node.s) // 2
        if index <= mid:
            self._update(node.l, index, val)
        else:
            self._update(node.r, index, val)
        node.v = node.l.v + node.r.v

    def _sum(self, node, left, right):
        if node.s == left and node.e == right:
            return node.v
        mid = node.s + (node.e - node.s) // 2
        if right <= mid:
            return self._sum(node.l, left, right)
        elif left > mid:
            return self._sum(node.r, left, right)
        else:
            return self._sum(node.l, left, mid) + self._sum(node.r, mid + 1, right)


# Your NumArray object will be instantiated and called as such:
# obj = NumArray(nums)
# obj.update(index,val)
# param_2 = obj.sumRange(left,right)
