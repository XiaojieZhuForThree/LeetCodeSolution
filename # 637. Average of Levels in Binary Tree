package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

import com.leetcode.api.TreeNode;

public class Question637 {
	class Solution {
		public List<Double> averageOfLevels(TreeNode root) {
			Queue<TreeNode> queue = new ArrayDeque<>();
			queue.offer(root);
			List<Double> ans = new ArrayList<>();
			while (!queue.isEmpty()) {
				double sum = 0;
				int cnt = queue.size();
				for (int i = queue.size(); i > 0; i--) {
					TreeNode node = queue.poll();
					sum += node.val;
					if (node.left != null) {
						queue.offer(node.left);
					}
					if (node.right != null) {
						queue.offer(node.right);
					}
				}
				ans.add(sum / cnt);
			}
			return ans;
		}
	}
}


from typing import List, Optional
from data.TreeNode import TreeNode


class Solution:
    def averageOfLevels(self, root: Optional[TreeNode]) -> List[float]:
        self.nums = []
        self.sums = []

        def dfs(node, level):
            if not node:
                return
            if level >= len(self.nums):
                self.nums.append(1)
                self.sums.append(node.val)
            else:
                self.nums[level] += 1
                self.sums[level] += node.val
            dfs(node.left, level + 1)
            dfs(node.right, level + 1)
        dfs(root, 0)
        ans = []
        for i in range(len(self.nums)):
            ans.append(self.sums[i] / self.nums[i])
        return ans
