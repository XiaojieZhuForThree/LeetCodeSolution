class LFUCache {
    Map<Integer, Integer> vals;
    Map<Integer, Integer> counts;
    Map<Integer, LinkedHashSet<Integer>> freqs;
    int cap;
    int min = 1;
    public LFUCache(int capacity) {
        cap = capacity;
        vals = new HashMap<>();
        counts = new HashMap<>();
        freqs = new HashMap<>();
        freqs.put(1, new LinkedHashSet<>());
    }
    
    public int get(int key) {
        if (!vals.containsKey(key)) {
            return -1;
        }
        int count = counts.get(key);
        counts.put(key, count+1);
        freqs.get(count).remove(key);
        if (!freqs.containsKey(count+1)) {
            freqs.put(count+1, new LinkedHashSet<>());
        }
        freqs.get(count+1).add(key);
        if (freqs.get(min).size() == 0) {
            min++;
        }
        return vals.get(key);
    }
    
    public void put(int key, int value) {
        if (cap <= 0) {
            return;
        }
        if (vals.containsKey(key)) {
            vals.put(key, value);
            get(key);
            return;
        }
        if (vals.size() >= cap) {
            int removed = freqs.get(min).iterator().next();
            freqs.get(min).remove(removed);
            counts.remove(removed);
            vals.remove(removed);
        }
        vals.put(key, value);
        counts.put(key, 1);
        min = 1;
        freqs.get(min).add(key);
    }
}

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache obj = new LFUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */


#include <unordered_map>
#include <unordered_set>
#include <deque>
using namespace std;

class LFUCache {
	int cap, least;
	unordered_map<int, int> map, calls;
	unordered_map<int, unordered_set<int>> freq;
	unordered_map<int, deque<int>> occurs;
public:
	LFUCache(int capacity) {
		cap = capacity;
		least = 0;
	}

	int get(int key) {
		if (cap == 0) return -1;
		if (map.count(key)) {
			update_freq(key);
			return map[key];
		}
		return -1;
	}

	void put(int key, int value) {
		if (cap == 0) return;
		if (map.count(key)) {
			map[key] = value;
			update_freq(key);
			return;
		}
		if (map.size() == cap) {
			pop_lfu();
		}
		map[key] = value;
		update_freq(key);
	}
private:
	void update_freq(int key) {
		if (!calls.count(key)) {
			calls[key] = 1;
			if (!freq.count(1)) {
				unordered_set<int> set;
				freq[1] = set;
			}
			if (!occurs.count(1)) {
				deque<int> deque;
				occurs[1] = deque;
			}
			freq[1].insert(key);
			occurs[1].push_back(key);
			least = 1;
			return;
		}
		int cur = calls[key];
		if (!freq.count(cur + 1)) {
			unordered_set<int> set;
			freq[cur + 1] = set;
		}
		if (!occurs.count(cur + 1)) {
			deque<int> deque;
			occurs[cur + 1] = deque;
		}
		freq[cur + 1].insert(key);
		occurs[cur + 1].push_back(key);
		calls[key] = cur + 1;
		freq[cur].erase(key);
		if (least == cur && freq[cur].empty()) least = cur + 1;
	}
	void pop_lfu() {
		deque<int>& deque = occurs[least];
		unordered_set<int>& set = freq[least];
		while (!set.count(deque.front())) deque.pop_front();
		set.erase(deque.front());
		map.erase(deque.front());
		calls.erase(deque.front());
		deque.pop_front();
	}
};

/**
 * Your LFUCache object will be instantiated and called as such:
 * LFUCache* obj = new LFUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */
