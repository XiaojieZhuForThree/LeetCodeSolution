import java.util.*;

class Solution {
	List<List<String>> ans = new ArrayList<>();

	private void helper(List<String> list, int n, int i, Set<Integer> no) {
		for (int j = 0; j < n; j++) {
			if (!no.contains(i * 10 + j)) {
				StringBuilder sb = new StringBuilder();
				for (int p = 0; p < n; p++) {
					if (p == j) {
						sb.append('Q');
					} else {
						sb.append('.');
					}
				}
				list.add(sb.toString());
				if (list.size() == n) {
					ans.add(new ArrayList<>(list));
					list.remove(list.size() - 1);
					return;
				} else {
					Set<Integer> next = new HashSet<>(no);
					for (int m = i + 1; m < n; m++) {
						next.add(m * 10 + j);
					}
					int k = j - 1, x = j + 1, l = i + 1, y = i + 1;
					while (k >= 0 && l < n) {
						next.add(l * 10 + k);
						k--;
						l++;
					}
					while (x < n && y < n) {
						next.add(y * 10 + x);
						x++;
						y++;
					}
					helper(list, n, i + 1, next);
					list.remove(list.size() - 1);
				}
			}
		}
	}

	public List<List<String>> solveNQueens(int n) {
		helper(new ArrayList<String>(), n, 0, new HashSet<Integer>());
		return ans;
	}
}
