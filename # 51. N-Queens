package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question51 {
	class Solution {
		Set<Integer> cols = new HashSet<>();
		Set<Integer> upper = new HashSet<>();
		Set<Integer> lower = new HashSet<>();

		public List<List<String>> solveNQueens(int n) {
			List<List<String>> ans = new ArrayList<>();
			dfs(0, n, ans, new ArrayList<>());
			return ans;
		}

		private void dfs(int row, int n, List<List<String>> ans, List<Integer> cur) {
			if (row >= n) {
				ans.add(generateBoard(cur));
				return;
			}
			for (int i = 0; i < n; i++) {
				if (cols.contains(i) || upper.contains(row + i) || lower.contains(row - i)) {
					continue;
				}
				cols.add(i);
				upper.add(row + i);
				lower.add(row - i);
				cur.add(i);
				dfs(row + 1, n, ans, cur);
				cols.remove(i);
				upper.remove(row + i);
				lower.remove(row - i);
				cur.remove(cur.size() - 1);
			}
			return;
		}

		private List<String> generateBoard(List<Integer> pos) {
			int n = pos.size();
			List<String> ans = new ArrayList<>();
			for (int i : pos) {
				StringBuilder sb = new StringBuilder();
				for (int j = 0; j < n; j++) {
					if (j == i)
						sb.append("Q");
					else
						sb.append(".");
				}
				ans.add(sb.toString());
			}
			return ans;
		}
	}
}


from collections import defaultdict
from typing import List


class Solution:
    def solveNQueens(self, n: int) -> List[List[str]]:
        ans = []
        self.dfs([], n, defaultdict(int), defaultdict(
            int), defaultdict(int), ans)
        return ans

    def dfs(self, cur, n, cols, upper, lower, ans):
        if len(cur) == n:
            sol = []
            for i in range(n):
                row = ['.' for j in range(n)]
                row[cur[i]] = 'Q'
                sol.append(''.join(row))
            ans.append(sol)
            return
        i = len(cur)
        for j in range(n):
            if cols[j] > 0 or upper[i + j] > 0 or lower[i - j] > 0:
                continue
            cur.append(j)
            cols[j] += 1
            upper[i + j] += 1
            lower[i - j] += 1
            self.dfs(cur, n, cols, upper, lower, ans)
            cur.pop(-1)
            cols[j] -= 1
            upper[i + j] -= 1
            lower[i - j] -= 1
        return
