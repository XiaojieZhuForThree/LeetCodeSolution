import java.util.*;

class Solution {
	Set<List<String>> ans = new HashSet<>();

	private void helper(List<String> list, int n, int i, Set<String> no) {
		for (int j = 0; j < n; j++) {
			StringBuilder check  = new StringBuilder();
			check.append(i);
			check.append(j);
			if (!no.contains(check.toString())) {
				StringBuilder sb = new StringBuilder();
				for (int p = 0; p < n; p++) {
					if (p == j) {
						sb.append('Q');
					} else {
						sb.append('.');
					}
				}
				list.add(sb.toString());
				if (list.size() == n) {
					ans.add(new ArrayList<>(list));
					list.remove(list.size()-1);
					return;
				} else {
					Set<String> next = new HashSet<>(no);
					for (int m = i + 1; m < n; m++) {
						StringBuilder invalid = new StringBuilder();
						invalid.append(m);
						invalid.append(j);
						next.add(invalid.toString());
					}
					int k = j - 1, x = j + 1, l = i + 1, y = i + 1;
					while (k >= 0 && l < n) {
						StringBuilder invalid = new StringBuilder();
						invalid.append(l);
						invalid.append(k);
						next.add(invalid.toString());
						k--;
						l++;
					}
					while (x < n && y < n) {
						StringBuilder invalid = new StringBuilder();
						invalid.append(y);
						invalid.append(x);
						next.add(invalid.toString());
						x++;
						y++;
					}
					helper(list, n, i + 1, next);
					list.remove(list.size()-1);
				}
			}
		}
	}

	public List<List<String>> solveNQueens(int n) {
		helper(new ArrayList<String>(), n, 0, new HashSet<String>());
		return new ArrayList<>(ans);
	}
}
