class Solution {
    public int oddEvenJumps(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        }
        boolean[][] dp = new boolean[A.length][2];
        dp[A.length-1][0] = true;
        dp[A.length-1][1] = true;
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(A[A.length-1], A.length-1);
        for (int i = A.length-2; i >= 0; i--) {
            Integer maxInd = map.floorKey(A[i]), minInd = map.ceilingKey(A[i]);
            if (maxInd != null && dp[map.get(maxInd)][1]) {
                dp[i][0] = true;
            }
            if (minInd != null && dp[map.get(minInd)][0]) {
                dp[i][1] = true;
            }
            map.put(A[i], i);
        }
        int ans = 0;
        for (int i = 0; i < A.length; i++) {
            if (dp[i][1]) {
                ans++;
            }
        }
        return ans;
    }
}


class Solution {
    public int oddEvenJumps(int[] A) {
        if (A == null || A.length == 0) {
            return 0;
        }
        TreeMap<Integer, Integer> map = new TreeMap<>();
        map.put(A[A.length-1], A.length-1);
        int ans = 0;
        boolean[][] dp = new boolean[A.length][2];
        dp[A.length-1][0] = true;
        dp[A.length-1][1] = true;
        for (int i = A.length - 1; i >= 0; i--) {
            Integer maxmin = map.ceilingKey(A[i]), minmax = map.floorKey(A[i]);
            if (maxmin != null) {
                dp[i][0] = dp[map.get(maxmin)][1];
            }
            if (minmax != null) {
                dp[i][1] = dp[map.get(minmax)][0];
            }
            if (dp[i][0]) {
                ans++;
            }
            map.put(A[i], i);
        }
        return ans;
    }
}
