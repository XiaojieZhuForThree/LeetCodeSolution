package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.HashMap;
import java.util.Map;
import java.util.Queue;

public class Question1088 {
	class Solution {
		public int confusingNumberII(int N) {
			Map<Integer, Integer> conv = new HashMap<>();
			conv.put(0, 0);
			conv.put(1, 1);
			conv.put(6, 9);
			conv.put(8, 8);
			conv.put(9, 6);
			int start = 1;
			Queue<Integer> level = new ArrayDeque<>();
			level.offer(0);
			int ans = 0;
			while (start <= N) {
				for (int i = level.size(); i > 0; i--) {
					int base = level.poll();
					if (start > 1 && base == 0) {
						continue;
					}
					if (base >= Integer.MAX_VALUE / 10 || base * 10 > N) {
						continue;
					}
					for (int j : conv.keySet()) {
						int num = base * 10 + j;
						if (num <= N && isValid(num, conv)) {
							ans++;
						}
						level.offer(num);
					}
				}
				start *= 10;
			}
			return ans;
		}

		private boolean isValid(Integer num, Map<Integer, Integer> conv) {
			int rev = 0;
			int target = num;
			while (target > 0) {
				rev = rev * 10 + conv.get(target % 10);
				target /= 10;
			}
			return rev != num;
		}
	}
}
