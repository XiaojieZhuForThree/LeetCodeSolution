class Solution {
    int[] valid = {0, 1, 6, 8, 9}; 
    int[] reverse = {0, 1, 2, 3, 4, 5, 9, 7, 8, 6};
    int res = 0;
    public int confusingNumberII(int N) {
        dfs(0, N);
        return res;
    }
    public void dfs(int n, int N) {
        if (isValid(n)) {
            res++;
        }
        for (int i = 0; i < valid.length; i++) {
            if (i == 0 && n == 0){
                continue;
            }
            int d = valid[i];
            if ((Integer.MAX_VALUE - d) / 10 < n || n * 10 + d > N) {
                continue;
            }
            dfs(n * 10 + d, N);
        }
    }
    public boolean isValid(int n){
        long rev = 0;
        int prev = n;
        while (n != 0) {
            int d = n % 10;
            rev *= 10;
            rev += reverse[d];
            n /= 10;
        }
        return rev != prev;
        
    }
}
