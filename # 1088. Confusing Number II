class Solution {
    int ans = 0;
    public int confusingNumberII(int N) {
        int[] rotate = {0, 1, 6, 8, 9};
        int[] match = {0, 1, 9, 8, 6};
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < rotate.length; i++) {
            map.put(rotate[i], match[i]);
        }
        dfs(0, N, map);
        return ans;
    }
    private void dfs(int i, int N, Map<Integer, Integer> map) {
        if (isConfusing(i, map)) {
            ans++;
        }
        for (int j : map.keySet()) {
            if (j == 0 && i == 0) {
                continue;
            } else if ((Integer.MAX_VALUE - j) / 10 < i || i * 10 + j > N) {
                continue;
            } else {
                dfs(i * 10 + j, N, map);
            }
        }
    }
    private boolean isConfusing(int i, Map<Integer, Integer> map) {
        int rev = 0, prev = i;
        while (i != 0) {
            int j = i % 10;
            rev *= 10;
            rev += map.get(j);
            i /= 10;
        }
        return rev != prev;
    }
}
