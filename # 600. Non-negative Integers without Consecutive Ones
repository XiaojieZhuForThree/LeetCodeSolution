package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question600 {
	class Solution {
		Map<Integer, Integer> validNumbersByDigits;

		public int findIntegers(int num) {
			validNumbersByDigits = generateReference();
			return getAns(num);
		}

		private final Map<Integer, Integer> generateReference() {
			Map<Integer, Integer> map = new HashMap<>();
			map.put(0, 2);
			map.put(1, 3);
			for (int i = 2; i < 32; i++) {
				map.put(i, map.get(i - 1) + map.get(i - 2));
			}
			return map;
		}

		private final int getAns(int num) {
			if (num == 0) {
				return 1;
			}
			if (num == 1) {
				return 2;
			}
			int k = getMaxDig(num);
			int val = validNumbersByDigits.get(k - 1);
			int remainder = num - (1 << k);
			if (remainder >= (1 << (k - 1))) {
				val += k - 2 >= 0 ? validNumbersByDigits.get(k - 2) : 1;
			} else {
				val += getAns(remainder);
			}
			return val;
		}

		private final int getMaxDig(int num) {
			int i = 0;
			while ((1 << i) <= num) {
				i++;
			}
			return i - 1;
		}
	}
}
