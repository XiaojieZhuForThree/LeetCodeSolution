class Solution {
    class UF {
        int[] parents;
        int[] sizes;
        public UF(int N) {
            parents = new int[N];
            sizes = new int[N];
            for (int i = 0; i < N; i++) {
                parents[i] = i;
                sizes[i] = 1;
            }
        }
        public int find(int x) {
            if (x == parents[x]) {
                return x;
            }
            parents[x] = find(parents[x]);
            return parents[x];
        }
        public void union(int x, int y) {
            int parX = find(x);
            int parY = find(y);
            if (parX != parY) {
                parents[parX] = parY;
                sizes[parY] += sizes[parX];
            }
        }
    }
    public int[] hitBricks(int[][] grid, int[][] hits) {
        int m = grid.length, n = grid[0].length;
        UF uf = new UF(m*n+1);
        for (int[] hit : hits) {
            if (grid[hit[0]][hit[1]] == 1) {
                grid[hit[0]][hit[1]] = 2;
            }
        }
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    unionAround(i, j, grid, uf);
                }
            }
        }
        int count = uf.sizes[uf.find(0)];
        int[] res = new int[hits.length];
        for (int i = hits.length-1; i >= 0; i--) {
            int[] hit = hits[i];
            if (grid[hit[0]][hit[1]] == 2) {
                unionAround(hit[0], hit[1], grid, uf);
                grid[hit[0]][hit[1]] = 1;
            }
            int newCount = uf.sizes[uf.find(0)];
            res[i] = newCount > count ? newCount - count - 1 : 0;
            count = newCount;
        }
        return res;
    }
    private void unionAround(int i, int j, int[][] grid, UF uf) {
        int[] dx = new int[] {-1, 1, 0, 0};
        int[] dy = new int[] {0, 0, -1, 1};
        for (int m = 0; m < 4; m++) {
            int nx = i + dx[m], ny = j + dy[m];
            if (nx < 0 || nx >= grid.length || ny < 0 || ny >= grid[0].length) {
                continue;
            }
            if (grid[nx][ny] == 1) {
                uf.union(i*grid[0].length + j + 1, nx*grid[0].length + ny + 1);
            }
        }
        if (i == 0) {
            uf.union(j + 1, 0);
        }
    }
}
