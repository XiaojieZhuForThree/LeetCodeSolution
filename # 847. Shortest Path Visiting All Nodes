package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;

public class Question847 {
	class Solution {
		public int shortestPathLength(int[][] graph) {
			int[][] dp = new int[graph.length][1 << graph.length];
			Queue<int[]> queue = new ArrayDeque<>();
			for (int i = 0; i < graph.length; i++) {
				Arrays.fill(dp[i], Integer.MAX_VALUE);
				dp[i][1 << i] = 0;
				queue.offer(new int[] { i, 1 << i });
			}
			while (!queue.isEmpty()) {
				int[] cur = queue.poll();
				for (int next : graph[cur[0]]) {
					int nextMask = cur[1] | (1 << next);
					if (dp[next][nextMask] > dp[cur[0]][cur[1]] + 1) {
						dp[next][nextMask] = dp[cur[0]][cur[1]] + 1;
						queue.offer(new int[] { next, nextMask });
					}
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int[] start : dp) {
				ans = Math.min(ans, start[(1 << graph.length) - 1]);
			}
			return ans;
		}
	}
}


class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        if not graph:
            return 0
        n = len(graph)
        ans = 0
        dp = [set() for i in range(n)]
        for i in range(n):
            dp[i].add(1<<i)
            
        level = deque([(i, 1<<i) for i in range(n)])
        target = (1 << n) - 1
        while level:
            for i in range(len(level), 0, -1):
                cur, val = level.popleft()
                if val == (1 << n) - 1:
                    return ans
                for nxt in graph[cur]:
                    new_val = val | 1 << nxt
                    if new_val not in dp[nxt]:
                        dp[nxt].add(new_val)
                        level.append((nxt, new_val))
            ans += 1
        return -1


class Solution:
    def shortestPathLength(self, graph: List[List[int]]) -> int:
        if not graph:
            return 0
        n = len(graph)
        ans = 0
        dp = []
        for i in range (n):
            dp.append([0] * (1<<n))
            dp[i][1<<i] = 1
            
        level = deque([(i, 1<<i) for i in range(n)])
        target = (1 << n) - 1
        
        while level:
            for i in range(len(level), 0, -1):
                cur, val = level.popleft()
                if val == (1 << n) - 1:
                    return ans
                for nxt in graph[cur]:
                    new_val = val | 1 << nxt
                    if dp[nxt][new_val] == 0:
                        dp[nxt][new_val] = 1
                        level.append((nxt, new_val))
            ans += 1
        return -1
