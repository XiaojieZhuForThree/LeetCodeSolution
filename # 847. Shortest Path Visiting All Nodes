package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;

public class Question847 {
	class Solution {
		public int shortestPathLength(int[][] graph) {
			int[][] dp = new int[graph.length][1 << graph.length];
			Queue<int[]> queue = new ArrayDeque<>();
			for (int i = 0; i < graph.length; i++) {
				Arrays.fill(dp[i], Integer.MAX_VALUE);
				dp[i][1 << i] = 0;
				queue.offer(new int[] { i, 1 << i });
			}
			while (!queue.isEmpty()) {
				int[] cur = queue.poll();
				for (int next : graph[cur[0]]) {
					int nextMask = cur[1] | (1 << next);
					if (dp[next][nextMask] > dp[cur[0]][cur[1]] + 1) {
						dp[next][nextMask] = dp[cur[0]][cur[1]] + 1;
						queue.offer(new int[] { next, nextMask });
					}
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int[] start : dp) {
				ans = Math.min(ans, start[(1 << graph.length) - 1]);
			}
			return ans;
		}
	}
}
