class Solution {
    class UF {
        int[] parents;
        int[] children;
        public UF(int N) {
            parents = new int[N];
            children = new int[N];
            for (int i = 0; i < N; i++) {
                parents[i] = i;
                children[i] = 1;
            }
        }
        public int find(int n) {
            if (parents[n] == n) {
                return n;
            }
            parents[n] = find(parents[n]);
            return parents[n];
        }
        public void union(int a, int b) {
            int parA = find(a);
            int parB = find(b);
            if (parA != parB) {
                parents[parA] = parB;
                children[parB] += children[parA];
                children[parA] = 1;
            }
        }
    }
    public int removeStones(int[][] stones) {
        UF uf = new UF(stones.length);
        for (int i = 1; i < stones.length; i++) {
            int[] curStone = stones[i];
            for (int j = 0; j < i; j++) {
                int[] prevStone = stones[j];
                if (curStone[0] == prevStone[0] || curStone[1] == prevStone[1]) {
                    uf.union(i, j);
                }
            }
        }
        int ans = 0;
        for (int i : uf.children) {
            ans += i-1;
        }
        return ans;
    }
}


#include <vector>
#include <unordered_map>
using namespace std;

class UF {
public:
    unordered_map<int, int> par;
    UF() {
    }
    int findPar(int c) {
        if (par[c] == c) return c;
        par[c] = findPar(par[c]);
        return par[c];
    }
    void merge(int a, int b) {
        int parA = findPar(a);
        int parB = findPar(b);
        par[parB] = parA;
    }
};

class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        UF uf;
        for (auto& s : stones) {
            uf.par[s[0]] = s[0];
        }
        unordered_map<int, vector<int>> cols;
        for (auto& s : stones) {
            cols[s[1]].push_back(s[0]);
        }
        for (auto& p : cols) {
            vector<int> group = p.second;
            for (int i = 1; i < group.size(); i++) {
                uf.merge(group[0], group[i]);
            }
        }
        int ans = stones.size();
        for (auto& p : uf.par) {
            if (p.first == uf.findPar(p.first)) ans--;
        }
        return ans;
    }
};


#include <vector>
#include <unordered_map>
using std::vector;

struct UF {
	std::unordered_map<int, int> pars;
	std::unordered_map<int, int> cnt;
	void merge(int a, int b) {
		int pa = find(a), pb = find(b);
		if (pa == pb) return;
		pars[pb] = pa;
		cnt[pa] += cnt[pb];
		cnt.erase(pb);
	}
	int find(int i) {
		if (pars[i] != i) pars[i] = find(pars[i]);
		return pars[i];
	}
};

class Solution {
public:
	int removeStones(vector<vector<int>>& stones) {
		UF uf;
		for (int i = 0; i < size(stones); i++) {
			uf.pars[i] = i;
			uf.cnt[i] = 1;
		}
		for (int i = 0; i < size(stones); i++) {
			for (int j = 0; j < i; j++) {
				if (stones[i][0] == stones[j][0] || stones[i][1] == stones[j][1]) uf.merge(i, j);
			}
		}
		int ans = 0;
		for (auto& p : uf.cnt) ans += (p.second - 1);
		return ans;
	}
};
