package com.leetcode.problems;

import java.util.Arrays;

public class Question1509 {
	class Solution {
		public int minDifference(int[] nums) {
			if (nums == null || nums.length < 5)
				return 0;
			Arrays.sort(nums);
			int l = 3, r = nums.length - 1, ans = nums[r] - nums[l];
			for (; l >= 0; l--)
				ans = Math.min(ans, nums[r--] - nums[l]);
			return ans;
		}
	}
}


#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
    int minDifference(vector<int>& nums) {
        if (size(nums) <= 4) return 0;
        sort(nums.begin(), nums.end());
        int l = 0, r = size(nums) - 4;
        int ans = -1;
        for (int i = 0; i <= 3; i++) {
            if (r >= size(nums)) break;
            int cur = nums[r] - nums[l];
            if (ans == -1 || ans > cur) ans = cur;
            l++;
            r++;
        }
        return ans;
    }
};
