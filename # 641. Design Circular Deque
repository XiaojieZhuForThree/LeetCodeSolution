package problems;

public class Question641 {
	class MyCircularDeque {
		class DoublyLinkedList {
			DoublyLinkedList pre, next;
			int val;

			DoublyLinkedList(int val) {
				this.val = val;
			}

		}

		private int k, cnt;
		private DoublyLinkedList head, tail;

		/** Initialize your data structure here. Set the size of the deque to be k. */
		public MyCircularDeque(int k) {
			this.k = k;
		}

		/**
		 * Adds an item at the front of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean insertFront(int value) {
			if (cnt == k) {
				return false;
			}
			DoublyLinkedList node = new DoublyLinkedList(value);
			if (head == null) {
				head = node;
				tail = node;
				head.next = tail;
				tail.pre = head;
			} else {
				head.pre = node;
				node.next = head;
				head = node;
			}
			cnt++;
			return true;
		}

		/**
		 * Adds an item at the rear of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean insertLast(int value) {
			if (cnt == k) {
				return false;
			}
			DoublyLinkedList node = new DoublyLinkedList(value);
			if (tail == null) {
				head = node;
				tail = node;
				head.next = tail;
				tail.pre = head;
			} else {
				tail.next = node;
				node.pre = tail;
				tail = node;
			}
			cnt++;
			return true;
		}

		/**
		 * Deletes an item from the front of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean deleteFront() {
			if (head == null) {
				return false;
			}
			if (head == tail) {
				head = null;
				tail = null;
				cnt--;
				return true;
			}
			DoublyLinkedList afterHead = head.next;
			afterHead.pre = null;
			head.next = null;
			head = afterHead;
			cnt--;
			return true;
		}

		/**
		 * Deletes an item from the rear of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean deleteLast() {
			if (tail == null) {
				return false;
			}
			if (head == tail) {
				head = null;
				tail = null;
				cnt--;
				return true;
			}
			DoublyLinkedList preTail = tail.pre;
			preTail.next = null;
			tail.pre = null;
			tail = preTail;
			cnt--;
			return true;
		}

		/** Get the front item from the deque. */
		public int getFront() {
			if (head == null) {
				return -1;
			}
			return head.val;
		}

		/** Get the last item from the deque. */
		public int getRear() {
			if (tail == null) {
				return -1;
			}
			return tail.val;
		}

		/** Checks whether the circular deque is empty or not. */
		public boolean isEmpty() {
			return cnt == 0;
		}

		/** Checks whether the circular deque is full or not. */
		public boolean isFull() {
			return cnt == k;
		}
	}

	/**
	 * Your MyCircularDeque object will be instantiated and called as such:
	 * MyCircularDeque obj = new MyCircularDeque(k); boolean param_1 =
	 * obj.insertFront(value); boolean param_2 = obj.insertLast(value); boolean
	 * param_3 = obj.deleteFront(); boolean param_4 = obj.deleteLast(); int param_5
	 * = obj.getFront(); int param_6 = obj.getRear(); boolean param_7 =
	 * obj.isEmpty(); boolean param_8 = obj.isFull();
	 */
}


struct DLL {
    int val = -1;
    DLL* l = nullptr;
    DLL* r = nullptr;
    DLL(int v) {
        val = v;
        l = nullptr;
        r = nullptr;
    }
};
class MyCircularDeque {
public:
    int cnt = 0, cap = 0;
    DLL* head = nullptr, * tail = nullptr;
    MyCircularDeque(int k) {
        cap = k;
    }

    bool insertFront(int value) {
        if (isFull()) return false;
        DLL* newHead = new DLL(value);
        if (!head && !tail) {
            head = newHead;
            tail = newHead;
        }
        else {
            newHead->r = head;
            head->l = newHead;
            head = newHead;
        }
        cnt++;
        return true;
    }

    bool insertLast(int value) {
        if (isFull()) return false;
        DLL* newTail = new DLL(value);
        if (!head && !tail) {
            head = newTail;
            tail = newTail;
        }
        else {
            newTail->l = tail;
            tail->r = newTail;
            tail = newTail;
        }
        cnt++;
        return true;
    }

    bool deleteFront() {
        if (isEmpty()) return false;
        if (cnt == 1) {
            head = nullptr;
            tail = nullptr;
        }
        else {
            DLL* nxt = head->r;
            head->r = nullptr;
            nxt->l = nullptr;
            head = nxt;
        }
        cnt--;
        return true;
    }

    bool deleteLast() {
        if (isEmpty()) return false;
        if (cnt == 1) {
            head = nullptr;
            tail = nullptr;
        }
        else {
            DLL* prev = tail->l;
            prev->r = nullptr;
            tail->l = nullptr;
            tail = prev;
        }
        cnt--;
        return true;
    }

    int getFront() {
        if (isEmpty()) return -1;
        return head->val;
    }

    int getRear() {
        if (isEmpty()) return -1;
        return tail->val;
    }

    bool isEmpty() {
        return cnt == 0;
    }

    bool isFull() {
        return cnt == cap;
    }
};

/**
 * Your MyCircularDeque object will be instantiated and called as such:
 * MyCircularDeque* obj = new MyCircularDeque(k);
 * bool param_1 = obj->insertFront(value);
 * bool param_2 = obj->insertLast(value);
 * bool param_3 = obj->deleteFront();
 * bool param_4 = obj->deleteLast();
 * int param_5 = obj->getFront();
 * int param_6 = obj->getRear();
 * bool param_7 = obj->isEmpty();
 * bool param_8 = obj->isFull();
 */
