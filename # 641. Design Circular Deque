package problems;

public class Question641 {
	class MyCircularDeque {
		class DoublyLinkedList {
			DoublyLinkedList pre, next;
			int val;

			DoublyLinkedList(int val) {
				this.val = val;
			}

		}

		private int k, cnt;
		private DoublyLinkedList head, tail;

		/** Initialize your data structure here. Set the size of the deque to be k. */
		public MyCircularDeque(int k) {
			this.k = k;
		}

		/**
		 * Adds an item at the front of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean insertFront(int value) {
			if (cnt == k) {
				return false;
			}
			DoublyLinkedList node = new DoublyLinkedList(value);
			if (head == null) {
				head = node;
				tail = node;
				head.next = tail;
				tail.pre = head;
			} else {
				head.pre = node;
				node.next = head;
				head = node;
			}
			cnt++;
			return true;
		}

		/**
		 * Adds an item at the rear of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean insertLast(int value) {
			if (cnt == k) {
				return false;
			}
			DoublyLinkedList node = new DoublyLinkedList(value);
			if (tail == null) {
				head = node;
				tail = node;
				head.next = tail;
				tail.pre = head;
			} else {
				tail.next = node;
				node.pre = tail;
				tail = node;
			}
			cnt++;
			return true;
		}

		/**
		 * Deletes an item from the front of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean deleteFront() {
			if (head == null) {
				return false;
			}
			if (head == tail) {
				head = null;
				tail = null;
				cnt--;
				return true;
			}
			DoublyLinkedList afterHead = head.next;
			afterHead.pre = null;
			head.next = null;
			head = afterHead;
			cnt--;
			return true;
		}

		/**
		 * Deletes an item from the rear of Deque. Return true if the operation is
		 * successful.
		 */
		public boolean deleteLast() {
			if (tail == null) {
				return false;
			}
			if (head == tail) {
				head = null;
				tail = null;
				cnt--;
				return true;
			}
			DoublyLinkedList preTail = tail.pre;
			preTail.next = null;
			tail.pre = null;
			tail = preTail;
			cnt--;
			return true;
		}

		/** Get the front item from the deque. */
		public int getFront() {
			if (head == null) {
				return -1;
			}
			return head.val;
		}

		/** Get the last item from the deque. */
		public int getRear() {
			if (tail == null) {
				return -1;
			}
			return tail.val;
		}

		/** Checks whether the circular deque is empty or not. */
		public boolean isEmpty() {
			return cnt == 0;
		}

		/** Checks whether the circular deque is full or not. */
		public boolean isFull() {
			return cnt == k;
		}
	}

	/**
	 * Your MyCircularDeque object will be instantiated and called as such:
	 * MyCircularDeque obj = new MyCircularDeque(k); boolean param_1 =
	 * obj.insertFront(value); boolean param_2 = obj.insertLast(value); boolean
	 * param_3 = obj.deleteFront(); boolean param_4 = obj.deleteLast(); int param_5
	 * = obj.getFront(); int param_6 = obj.getRear(); boolean param_7 =
	 * obj.isEmpty(); boolean param_8 = obj.isFull();
	 */
}
