package com.leetcode.problems;

import java.util.Arrays;

public class Question593 {
	class Solution {
		public boolean validSquare(int[] p1, int[] p2, int[] p3, int[] p4) {
			return isValid(p1, p2, p3) && isValid(p1, p3, p4) && isValid(p1, p2, p4) && isValid(p2, p3, p4);
		}

		private boolean isValid(int[] p1, int[] p2, int[] p3) {
			int len1 = Math.abs(p1[0] - p2[0]) * Math.abs(p1[0] - p2[0])
					+ Math.abs(p1[1] - p2[1]) * Math.abs(p1[1] - p2[1]);
			int len2 = Math.abs(p1[0] - p3[0]) * Math.abs(p1[0] - p3[0])
					+ Math.abs(p1[1] - p3[1]) * Math.abs(p1[1] - p3[1]);
			int len3 = Math.abs(p2[0] - p3[0]) * Math.abs(p2[0] - p3[0])
					+ Math.abs(p2[1] - p3[1]) * Math.abs(p2[1] - p3[1]);
			int[] lens = new int[] { len1, len2, len3 };
			Arrays.sort(lens);
			return len1 != 0 && len2 != 0 && len3 != 0 && lens[0] == lens[1] && lens[0] * 2 == lens[2];
		}
	}
}
