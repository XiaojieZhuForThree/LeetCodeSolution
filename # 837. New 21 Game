package com.leetcode.problems;

public class Question837 {
	class Solution {
		public double new21Game(int n, int k, int maxPts) {
			if (n >= k - 1 + maxPts)
				return 1.0;
			double[] dp = new double[k + maxPts];
			for (int i = n + 1; i < k + maxPts; i++)
				dp[i] = 0.0;
			for (int i = k; i <= n; i++)
				dp[i] = 1.0;
			if (k > 0) {
				dp[k - 1] = (n - k + 1) * 1.0 / maxPts;
			}
			for (int i = k - 2; i >= 0; i--) {
				dp[i] = (dp[i + 1] * (1 + maxPts) / maxPts) - (dp[i + maxPts + 1] / maxPts);
			}
			return dp[0];
		}
	}
}


#include <vector>
using namespace std;

class Solution {
public:
	double new21Game(int n, int k, int maxPts) {
		if (k == 0 || n >= k + maxPts) {
			return 1.0;
		}

		vector<double> dp(n + 1, 0.0);
		dp[0] = 1.0;
		double rs = 1.0;
		double ans = 0.0;

		for (int i = 1; i < n + 1; i++) {
			dp[i] = rs / maxPts;
			if (i < k) {
				rs += dp[i];
			}
			else {
				ans += dp[i];
			}
			if (i - maxPts >= 0) {
				rs -= dp[i - maxPts];
			}
		}
		return ans;
	}
};
