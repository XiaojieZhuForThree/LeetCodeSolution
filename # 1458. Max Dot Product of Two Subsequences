package problems;

public class Question1458 {
	class Solution1 {
		public int maxDotProduct(int[] nums1, int[] nums2) {
			int[][] dp = new int[nums1.length][nums2.length];
			for (int i = 0; i < nums1.length; i++) {
				for (int j = 0; j < nums2.length; j++) {
					dp[i][j] = nums1[i] * nums2[j];
					if (i > 0 && j > 0) {
						dp[i][j] += Math.max(dp[i - 1][j - 1], 0);
					}
					if (i > 0) {
						dp[i][j] = Math.max(dp[i][j], dp[i - 1][j]);
					}
					if (j > 0) {
						dp[i][j] = Math.max(dp[i][j], dp[i][j - 1]);
					}
				}
			}
			return dp[nums1.length - 1][nums2.length - 1];
		}
	}

	class Solution2 {
		public int maxDotProduct(int[] nums1, int[] nums2) {
			int[][] dp = new int[nums1.length + 1][nums2.length + 1];
			for (int i = 1; i <= nums1.length; i++) {
				for (int j = 1; j <= nums2.length; j++) {
					int val1 = Math.max(0, dp[i - 1][j - 1]) + nums1[i - 1] * nums2[j - 1];
					int val2 = j == 1 ? Integer.MIN_VALUE : dp[i][j - 1];
					int val3 = i == 1 ? Integer.MIN_VALUE : dp[i - 1][j];
					dp[i][j] = Math.max(val1, Math.max(val2, val3));
				}
			}
			return dp[nums1.length][nums2.length];
		}
	}
}


#include <vector>
using std::vector;

class Solution {
public:
	int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
		vector<vector<int>>dp(size(nums1), vector<int>(size(nums2), INT_MIN));
		for (int i = 0; i < size(nums1); i++) {
			for (int j = 0; j < size(nums2); j++) {
				dp[i][j] = nums1[i] * nums2[j];
				if (i > 0 && j > 0) {
					dp[i][j] += std::max(dp[i - 1][j - 1], 0);
				}
				if (i > 0) {
					dp[i][j] = std::max(dp[i][j], dp[i - 1][j]);
				}
				if (j > 0) {
					dp[i][j] = std::max(dp[i][j], dp[i][j - 1]);
				}
			}
		}
		return dp[size(nums1) - 1][size(nums2) - 1];
	}
};
