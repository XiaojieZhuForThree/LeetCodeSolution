package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.concurrent.ThreadLocalRandom;

import com.leetcode.model.Master;

public class Question843 {

	class Solution1 {
		public void findSecretWord(String[] wordlist, Master master) {
			Random rand = ThreadLocalRandom.current();
			List<String> cur = new ArrayList<>();
			for (String s : wordlist) {
				cur.add(s);
			}
			for (int i = 0; i < 10; i++) {
				String cand = cur.get(rand.nextInt(cur.size()));
				int sim = master.guess(cand);
				if (sim == 6) {
					return;
				}
				List<String> next = new ArrayList<>();
				for (String s : cur) {
					if (!s.equals(cand) && diff(s, cand) == sim) {
						next.add(s);
					}
				}
				cur = next;
			}
			return;
		}

		private int diff(String a, String b) {
			int ans = 0;
			for (int i = 0; i < 6; i++) {
				if (a.charAt(i) == b.charAt(i)) {
					ans++;
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public void findSecretWord(String[] wordlist, Master master) {
			List<String> cur = new ArrayList<>();
			for (String s : wordlist) {
				cur.add(s);
			}
			for (int i = 0, x = 0; i < 10 && x < 6; i++) {
				Map<String, Integer> groups = new HashMap<>();
				for (String a : cur) {
					for (String b : cur) {
						if (match(a, b) == 0)
							groups.put(a, groups.getOrDefault(a, 0) + 1);
					}
				}
				String cand = "";
				int val = 100;
				for (String s : cur) {
					if (groups.getOrDefault(s, 0) < val) {
						val = groups.getOrDefault(s, 0);
						cand = s;
					}
				}
				x = master.guess(cand);
				List<String> next = new ArrayList<>();
				for (String s : cur) {
					if (match(cand, s) == x) {
						next.add(s);
					}
				}
				cur = next;
			}
			return;
		}

		private int match(String a, String b) {
			int ans = 0;
			for (int i = 0; i < a.length(); i++) {
				if (a.charAt(i) == b.charAt(i)) {
					ans++;
				}
			}
			return ans;
		}
	}

	class Solution3 {
	    public void findSecretWord(String[] wordlist, Master master) {
	        List<String> list = new ArrayList<>();
	        int[][] weights = new int[26][6];
	        for (String s : wordlist) {
	            for (int i = 0; i < s.length(); i++) {
	                weights[s.charAt(i) - 'a'][i]++;
	            }
	            list.add(s);
	        }
	        for (int i = 0; i < 10; i++) {
	            int weight = 0;
	            String cand = "";
	            for (String s : list) {
	                int cur = 0;
	                for (int j = 0; j < s.length(); j++) {
	                    cur += weights[s.charAt(j) - 'a'][j];
	                }
	                if (cur > weight) {
	                    weight = cur;
	                    cand = s;
	                }
	            }
	            int same = master.guess(cand);
	            if (same == 6) {
	                return;
	            }
	            List<String> next = new ArrayList<>();
	            for (String s : list) {
	                if (getSame(s, cand) == same) {
	                    next.add(s);
	                }
	            }
	            list = next;
	        }
	        return;
	    }
	    
	    private int getSame(String a, String b) {
	        int ans = 0;
	        for (int i = 0; i < a.length(); i++) {
	            if (a.charAt(i) == b.charAt(i)) ans++;
	        }
	        return ans;
	    }
	}
}
