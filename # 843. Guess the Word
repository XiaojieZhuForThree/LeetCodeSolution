package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.leetcode.model.Master;

public class Question843 {
	/**
	 * // This is the Master's API interface. // You should not implement it, or
	 * speculate about its implementation interface Master { public int guess(String
	 * word) {} }
	 */
	class Solution {
		public void findSecretWord(String[] wordlist, Master master) {
			if (wordlist == null || wordlist.length == 0)
				return;
			List<String> list = new ArrayList<>();
			for (final String w : wordlist)
				list.add(w);
			int[][] weights = new int[6][26];
			for (final String w : list) {
				for (int i = 0; i < w.length(); i++)
					weights[i][w.charAt(i) - 'a']++;
			}
			Map<String, Integer> weightMap = new HashMap<>();
			for (final String w : list)
				weightMap.put(w, getWeight(w, weights));

			String cand = list.get(0);
			for (int i = 0; i < 10; i++) {
				int match = master.guess(cand);
				if (match == 6)
					return;
				int curWeight = -1;
				String next = "";
				List<String> nextList = new ArrayList<>();
				for (String w : list) {
					if (getMatch(w, cand) == match)
						nextList.add(w);
				}
				for (String w : nextList) {
					if (weightMap.get(w) > curWeight) {
						curWeight = weightMap.get(w);
						next = w;
					}
				}
				cand = next;
				list = nextList;
			}
		}

		private int getWeight(String w, int[][] weights) {
			if (w == null || w.length() == 0)
				return -1;
			int ans = 0;
			for (int i = 0; i < w.length(); i++)
				ans += weights[i][w.charAt(i) - 'a'];
			return ans;
		}

		private int getMatch(String a, String b) {
			if (a == null || b == null || a.length() == 0 || b.length() == 0 || a.length() != b.length())
				return 0;
			int ans = 0;
			for (int i = 0; i < a.length(); i++) {
				if (a.charAt(i) == b.charAt(i))
					ans++;
			}
			return ans;
		}
	}
}
