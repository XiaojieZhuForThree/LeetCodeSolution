/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        List<String> list = new ArrayList<>(Arrays.asList(wordlist));
        for (int i = 0; i < 10; i++) {
            String s = list.get(0);
            int a = master.guess(s);
            if (a == s.length()) {
                return;
            }
            list.remove(0);
            int j = 0;
            while (j < list.size()) {
                if (compare(list.get(j), s) != a){
                    list.remove(j);
                }
                else {
                    j++;
                }
            }
            Collections.sort(list);
        }
    }
    int compare(String s1, String s2) {
        int ans = 0;
        for (int i = 0; i < s1.length(); i++) {
            if (s1.charAt(i) == s2.charAt(i)) {
                ans++;
            }
        }
        return ans;
    }
}


/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < wordlist.length; i++) {
            set.add(i);
        }
        while (!set.isEmpty()) {
            int min = Integer.MAX_VALUE;
            int minIndex = -1;
            for (int i : set) {
                int max = maxLoss(i, wordlist, set);
                if (max < min) {
                    min = max;
                    minIndex = i;
                }
            }
            int val = master.guess(wordlist[minIndex]);
            if (val == 6) {
                return;
            }
            Set<Integer> next = new HashSet<>();
            for (int i : set) {
                if (compare(wordlist[i], wordlist[minIndex]) == val) {
                    next.add(i);
                }
            }
            set = next;
        }
    }
    int maxLoss(int i, String[] wordlist, Set<Integer> set) {
        int[] bucket = new int[6];
        int max = 0;
        for (int j : set) {
            if (!(wordlist[j].equals(wordlist[i]))) {
                int val = compare(wordlist[i], wordlist[j]);
                bucket[val]++;
                max = Math.max(max, bucket[val]);
            }
        }
        return max;
    }
    int compare(String s1, String s2) {
        int ans = 0;
        for (int i = 0; i < 6; i++) {
            if (s1.charAt(i) == s2.charAt(i)) {
                ans++;
            }
        }
        return ans;
    }
}

/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i < wordlist.length; i++) {
            set.add(i);
        }
        while (!set.isEmpty()) {
            int min = Integer.MAX_VALUE;
            int index = -1;
            for (int i : set) {
                int max = maxSub(i, wordlist, set);
                if (max < min) {
                    min = max;
                    index = i;
                }
            }
            int val = master.guess(wordlist[index]);
            if (val == 6) {
                return;
            }
            Set<Integer> next = new HashSet<>();
            for (int i : set) {
                if (compare(wordlist[i], wordlist[index])==val) {
                    next.add(i);
                }
            }
            set = next;
        }
    }
    int maxSub(int i, String[] wordlist, Set<Integer> set) {
        int[] bucket = new int[6];
        int max = 0;
        for (int j : set) {
            if (!(wordlist[j].equals(wordlist[i]))) {
                int index = compare(wordlist[i], wordlist[j]);
                bucket[index]++;
                max = Math.max(max, bucket[index]);
            }
        }
        return max;
    }
    int compare(String s, String t) {
        int ans = 0;
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == t.charAt(i)) {
                ans++;
            }
        }
        return ans;
    }
}


/**
 * // This is the Master's API interface.
 * // You should not implement it, or speculate about its implementation
 * interface Master {
 *     public int guess(String word) {}
 * }
 */
class Solution {
    public void findSecretWord(String[] wordlist, Master master) {
        List<String> list = new ArrayList<>();
        for (String word : wordlist) {
            list.add(word);
        }
        for (int i = 0; i < 10; i++) {
            int min = Integer.MAX_VALUE;
            String target = "";
            for (String word : list) {
                if (minmax(word, list) < min) {
                    min = minmax(word, list);
                    target = word;
                }
            }
            int guess = master.guess(target);
            if (guess == 6) {
                return;
            } else {
                List<String> newList = new ArrayList<>();
                for (String word : list) {
                    if (match(word, target) == guess) {
                        newList.add(word);
                    }
                }
                list = newList;
            }
        }
    }
    private int match(String o1, String o2) {
        int match = 0;
        for (int i = 0; i < o1.length(); i++) {
            if (o1.charAt(i) == o2.charAt(i)) {
                match++;
            }
        }
        return match;
    }
    private int minmax(String word, List<String> list) {
        Map<Integer, Integer> map = new HashMap<>();
        int max = 0;
        for (String ref : list) {
            int mat = match(word, ref);
            map.put(mat, map.getOrDefault(mat, 0) + 1);
        }
        for (int key : map.keySet()) {
            max = Math.max(max, map.get(key));
        }
        return max;
    }
}
