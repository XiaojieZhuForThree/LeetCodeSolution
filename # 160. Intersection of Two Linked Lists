package com.leetcode.problems;

import com.leetcode.api.ListNode;

public class Question160 {
	public class Solution {
		public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
			if (headA == null || headB == null) {
				return null;
			}
			int lenA = getLength(headA), lenB = getLength(headB);
			if (lenA > lenB) {
				for (; lenB < lenA; lenB++) {
					headA = headA.next;
				}
			} else {
				for (; lenA < lenB; lenA++) {
					headB = headB.next;
				}
			}
			while (headA != null) {
				if (headA == headB) {
					return headA;
				}
				headA = headA.next;
				headB = headB.next;
			}
			return null;
		}

		private int getLength(ListNode node) {
			if (node == null) {
				return 0;
			}
			return 1 + getLength(node.next);
		}
	}
}


# Definition for singly-linked list.
from typing import Optional


class ListNode:
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution:
    def getIntersectionNode(self, headA: ListNode, headB: ListNode) -> Optional[ListNode]:
        l1 = []
        l2 = []
        while headA:
            l1.append(headA)
            headA = headA.next
        while headB:
            l2.append(headB)
            headB = headB.next
        l1.reverse()
        l2.reverse()
        ans = None
        start = 0
        while start < min(len(l1), len(l2)) and l1[start] == l2[start]:
            ans = l1[start]
            start += 1
        return ans
