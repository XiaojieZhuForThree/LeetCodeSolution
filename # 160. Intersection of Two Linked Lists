/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 ////////////////////////////////////////
 // O(m+n)O(m||n) solution
public class Solution {
	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
		Set<ListNode> A = new HashSet<ListNode>();
		while (headA != null) {
			A.add(headA);
			headA = headA.next;
		}
		while (headB != null) {
			if (A.contains(headB)) {
                return headB;
			}
			else {
				headB = headB.next;
			}
		}
		return null;
	}
}




///////////////////////////////////////////////////////////////////
// O(m+n)O(1) solution from reference

public class Solution {
	public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
		
		if (headA == null || headB == null)
			return null;

		ListNode a = headA, b = headB;
		while (a != b) {
			a = (a == null) ? headB : a.next;
			b = (b == null) ? headA : b.next;
		}

		return a;
	}
}
