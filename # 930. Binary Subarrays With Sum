package problems;

public class Question930 {
	class Solution1 {
		public int numSubarraysWithSum(int[] A, int S) {
			int n = A.length, ans = 0, psum = 0;
			int[] cnt = new int[n + 1];
			cnt[0] = 1;
			for (int i : A) {
				psum += i;
				if (psum >= S) {
					ans += cnt[psum - S];
				}
				cnt[psum]++;
			}
			return ans;
		}
	}

	class Solution2 {
		public int numSubarraysWithSum(int[] A, int S) {
			return atMost(A, S) - atMost(A, S - 1);
		}

		public int atMost(int[] A, int S) {
			if (S < 0) {
				return 0;
			}
			int res = 0, i = 0, n = A.length;
			for (int j = 0; j < n; j++) {
				S -= A[j];
				while (S < 0) {
					S += A[i++];
				}
				res += j - i + 1;
			}
			return res;
		}
	}
}


#include <unordered_map>
#include <vector>

using std::vector;

class Solution {
public:
	int numSubarraysWithSum(vector<int>& nums, int goal) {
		std::unordered_map<int, int> m;
		m[0] = 1;
		int cur = 0, ans = 0;
		for (int i : nums) {
			cur += i;
			if (m.count(cur - goal)) ans += m[cur - goal];
			m[cur]++;
		}
		return ans;
	}
};
