package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

public class Question310 {
	class Solution {
		public List<Integer> findMinHeightTrees(int n, int[][] edges) {
			if (n == 1) {
				return List.of(0);
			}
			List<Integer> ans = new ArrayList<>();
			List<List<Integer>> graph = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				graph.add(new ArrayList<>());
			}
			int[] degrees = new int[n];
			for (int[] edge : edges) {
				graph.get(edge[0]).add(edge[1]);
				graph.get(edge[1]).add(edge[0]);
				degrees[edge[0]]++;
				degrees[edge[1]]++;
			}
			Queue<Integer> queue = new ArrayDeque<>();
			for (int i = 0; i < n; i++) {
				if (degrees[i] == 1) {
					queue.offer(i);
				}
			}
			while (!queue.isEmpty()) {
				ans = new ArrayList<>();
				for (int i = queue.size(); i > 0; i--) {
					int cur = queue.poll();
					ans.add(cur);
					for (int j : graph.get(cur)) {
						degrees[j]--;
						if (degrees[j] == 1) {
							queue.offer(j);
						}
					}
				}
			}
			return ans;
		}
	}
}


#include <vector>
#include <unordered_map>
#include <deque>

using std::vector;

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        if (n == 1) return { 0 };
        std::unordered_map<int, vector<int>> m;
        std::unordered_map<int, int> ind;
        for (auto& e : edges) {
            m[e[0]].push_back(e[1]);
            m[e[1]].push_back(e[0]);
            ind[e[0]]++;
            ind[e[1]]++;
        }
        vector<int> ans;
        std::deque<int> q;
        for (auto& p : ind) {
            if (p.second == 1) q.push_back(p.first);
        }
        while (!q.empty()) {
            ans.clear();
            for (int i = size(q); i > 0; i--) {
                int c = q.front();
                q.pop_front();
                ans.push_back(c);
                for (int j : m[c]) {
                    ind[j]--;
                    if (ind[j] == 1) q.push_back(j);
                }
            }
        }
        return ans;
    }
};
