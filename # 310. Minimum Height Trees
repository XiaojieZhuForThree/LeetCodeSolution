package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

public class Question310 {
	class Solution {
		public List<Integer> findMinHeightTrees(int n, int[][] edges) {
			List<Integer> ans = new ArrayList<>();
			if (n == 1) {
				ans.add(0);
				return ans;
			}
			int[] degrees = new int[n];
			List<List<Integer>> graph = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				graph.add(new ArrayList<>());
			}
			for (int[] e : edges) {
				graph.get(e[0]).add(e[1]);
				graph.get(e[1]).add(e[0]);
				degrees[e[0]]++;
				degrees[e[1]]++;
			}
			Queue<Integer> queue = new ArrayDeque<>();
			for (int i = 0; i < n; i++) {
				if (degrees[i] == 1) {
					queue.offer(i);
				}
			}
			while (!queue.isEmpty()) {
				ans = new ArrayList<>();
				for (int i = queue.size(); i > 0; i--) {
					int cur = queue.poll();
					ans.add(cur);
					for (int j : graph.get(cur)) {
						degrees[j]--;
						if (degrees[j] == 1) {
							queue.offer(j);
						}
					}
				}
			}
			return ans;
		}
	}
}
