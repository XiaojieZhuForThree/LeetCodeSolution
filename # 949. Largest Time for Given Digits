package com.leetcode.problems;

public class Question949 {
	class Solution {
		String ans = "";

		public String largestTimeFromDigits(int[] A) {
			dfs(A, new boolean[4], "");
			return ans.isEmpty() ? "" : getFormat(ans);
		}

		private final void dfs(int[] A, boolean[] set, String s) {
			if (s.length() == 4) {
				if (isSuitable(s) && ans.compareTo(s) < 0) {
					ans = s;
				}
				return;
			}
			for (int i = 0; i < 4; i++) {
				if (!set[i]) {
					set[i] = true;
					String ns = s + A[i];
					dfs(A, set, ns);
					set[i] = false;
				}
			}
			return;
		}

		private final boolean isSuitable(String s) {
			if (s.charAt(0) > '2') {
				return false;
			}
			if (s.charAt(0) == '2' && s.charAt(1) > '3') {
				return false;
			}
			if (s.charAt(2) > '5') {
				return false;
			}
			return true;
		}

		private final String getFormat(String s) {
			return s.substring(0, 2) + ":" + s.substring(2);
		}
	}
}
