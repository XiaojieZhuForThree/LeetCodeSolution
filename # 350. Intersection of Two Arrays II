package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question350 {
	class Solution {
		public int[] intersect(int[] nums1, int[] nums2) {
			Map<Integer, Integer> map = new HashMap<>();
			for (int i : nums1)
				map.put(i, map.getOrDefault(i, 0) + 1);
			List<Integer> ans = new ArrayList<>();
			for (int i : nums2) {
				if (map.getOrDefault(i, 0) > 0) {
					ans.add(i);
					map.put(i, map.get(i) - 1);
				}
			}
			int[] res = new int[ans.size()];
			for (int i = 0; i < ans.size(); i++)
				res[i] = ans.get(i);
			return res;
		}
	}
}


#include <vector>
#include <unordered_map>
using std::vector;

class Solution {
public:
    vector<int> intersect(vector<int>& nums1, vector<int>& nums2) {
        std::unordered_map<int, int> a, b;
        for (int i : nums1) a[i]++;
        for (int i : nums2) b[i]++;
        vector<int> ans;
        for (auto& p : a) {
            if (!b.count(p.first)) continue;
            for (int i = 0; i < std::min(p.second, b[p.first]); i++) ans.push_back(p.first);
        }
        return ans;
    }
};
