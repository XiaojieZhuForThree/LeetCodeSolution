package com.leetcode.problems;

import java.util.PriorityQueue;
import java.util.Comparator;

public class Question1499 {
	class Solution {
		public int findMaxValueOfEquation(int[][] points, int k) {
			PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {

				@Override
				public int compare(Integer a, Integer b) {
					// TODO Auto-generated method stub
					return Integer.compare(points[b][1] - points[b][0], points[a][1] - points[a][0]);
				}

			});
			int ans = Integer.MIN_VALUE;
			for (int i = 0; i < points.length; i++) {
				while (!pq.isEmpty() && points[pq.peek()][0] + k < points[i][0]) {
					pq.poll();
				}
				if (pq.isEmpty()) {
					pq.offer(i);
					continue;
				}
				ans = Math.max(ans, points[i][1] + points[i][0] + points[pq.peek()][1] - points[pq.peek()][0]);
				pq.offer(i);
			}
			return ans;
		}
	}
}
