package com.leetcode.problems;

import java.util.PriorityQueue;
import java.util.Comparator;

public class Question1499 {
	class Solution {
		public int findMaxValueOfEquation(int[][] points, int k) {
			if (points == null || points.length < 2)
				return 0;
			int ans = Integer.MIN_VALUE;
			PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
				@Override
				public int compare(Integer a, Integer b) {
					return points[b][1] - points[b][0] - points[a][1] + points[a][0];
				}
			});
			for (int i = 0; i < points.length; i++) {
				while (!pq.isEmpty() && points[i][0] - points[pq.peek()][0] > k)
					pq.poll();
				if (!pq.isEmpty()) {
					int j = pq.peek();
					ans = Math.max(ans, points[i][0] + points[i][1] + points[j][1] - points[j][0]);
				}
				pq.offer(i);
			}
			return ans;
		}
	}
}
