package com.leetcode.problems;

import java.util.PriorityQueue;
import java.util.Comparator;

public class Question1499 {
	class Solution {
		public int findMaxValueOfEquation(int[][] points, int k) {
			if (points == null || points.length == 0 || k == 0)
				return 0;
			PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
				@Override
				public int compare(Integer a, Integer b) {
					int val1 = points[a][1] - points[a][0];
					int val2 = points[b][1] - points[b][0];
					return Integer.compare(val2, val1);
				}
			});
			int ans = Integer.MIN_VALUE;
			for (int i = 0; i < points.length; i++) {
				int[] ptr = points[i];
				while (!pq.isEmpty() && ptr[0] - points[pq.peek()][0] > k)
					pq.poll();
				if (!pq.isEmpty())
					ans = Math.max(ans, ptr[1] + ptr[0] + points[pq.peek()][1] - points[pq.peek()][0]);
				pq.offer(i);
			}
			return ans;
		}
	}
}
