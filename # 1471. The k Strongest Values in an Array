package problems;

import java.util.Arrays;
import java.util.PriorityQueue;

public class Question1471 {
	class Solution1 {
		public int[] getStrongest(int[] arr, int k) {
			int n = arr.length;
			Arrays.sort(arr);
			int m = arr[(n - 1) / 2];
			PriorityQueue<Integer> pq = new PriorityQueue<>(
					(a, b) -> Math.abs(a - m) == Math.abs(b - m) ? b - a : Math.abs(b - m) - Math.abs(a - m));
			for (int i : arr) {
				pq.offer(i);
			}
			int[] ans = new int[k];
			for (int i = 0; i < k; i++) {
				ans[i] = pq.poll();
			}
			return ans;
		}
	}

	class Solution2 {
		public int[] getStrongest(int[] arr, int k) {
			int n = arr.length;
			Arrays.sort(arr);
			int m = arr[(n - 1) / 2];
			int l = 0, r = n - 1;
			int[] ans = new int[k];
			for (int i = 0; i < k; i++) {
				if (m - arr[l] > arr[r] - m) {
					ans[i] = arr[l++];
				} else {
					ans[i] = arr[r--];
				}
			}
			return ans;
		}
	}
}
