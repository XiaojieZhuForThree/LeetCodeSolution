package com.leetcode.problems;

import java.util.Arrays;
import java.util.Comparator;

class Solution {
	public int[][] kClosest(int[][] points, int k) {
		Arrays.sort(points, new Comparator<int[]>() {
			@Override
			public int compare(int[] a, int[] b) {
				return Integer.compare(a[0] * a[0] + a[1] * a[1], b[0] * b[0] + b[1] * b[1]);
			}
		});
		int[][] ans = new int[k][2];
		int i = 0;
		while (i < k) {
			ans[i] = points[i++];
		}
		return ans;
	}
}

class Solution {   
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        sort(points.begin(), points.end(), closerThan);
        points.resize(k);
        return points;
    }
    static int distance2 (vector<int>& point) {
        return point[0] * point[0] + point[1] * point[1];
    }

    static bool closerThan(vector<int>& point1, vector<int>& point2) {
        return distance2(point1) < distance2(point2);
    }
};
