package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeMap;

import com.leetcode.api.TreeNode;

public class Question987 {
	class Pos {
		int val;
		int y;

		public Pos(int val, int y) {
			this.val = val;
			this.y = y;
		}
	}

	class Solution {
		public List<List<Integer>> verticalTraversal(TreeNode root) {
			Map<Integer, PriorityQueue<Pos>> map = new TreeMap<>();
			dfs(map, root, 0, 0);
			List<List<Integer>> ans = new ArrayList<>();
			for (int i : map.keySet()) {
				List<Integer> list = new ArrayList<>();
				PriorityQueue<Pos> queue = map.get(i);
				while (!queue.isEmpty()) {
					list.add(queue.poll().val);
				}
				ans.add(list);
			}
			return ans;
		}

		private void dfs(Map<Integer, PriorityQueue<Pos>> map, TreeNode node, int x, int y) {
			if (node == null) {
				return;
			}
			Pos pos = new Pos(node.val, y);
			map.putIfAbsent(x, new PriorityQueue<>((a, b) -> a.y == b.y ? a.val - b.val : a.y - b.y));
			map.get(x).offer(pos);
			dfs(map, node.left, x - 1, y + 1);
			dfs(map, node.right, x + 1, y + 1);
		}
	}
}


from typing import List, Optional
from data.TreeNode import TreeNode


class Solution:
    def verticalTraversal(self, root: Optional[TreeNode]) -> List[List[int]]:
        self.container = []

        def dfs(node, r, c):
            if not node:
                return
            self.container.append((c, r, node.val))
            dfs(node.left, r + 1, c - 1)
            dfs(node.right, r + 1, c + 1)
        dfs(root, 0, 0)
        self.container.sort()
        if not self.container:
            return []
        ans = [[]]
        ptr = 0
        col = self.container[0][0]
        for candidate in self.container:
            c, r, val = candidate
            if c > col:
                ans.append([])
                ptr += 1
                col = c
            ans[ptr].append(val)
        return ans
