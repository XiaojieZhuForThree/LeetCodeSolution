package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeMap;

import com.leetcode.api.TreeNode;

public class Question987 {
	class Pos {
		int val;
		int y;

		public Pos(int val, int y) {
			this.val = val;
			this.y = y;
		}
	}

	class Solution {
		public List<List<Integer>> verticalTraversal(TreeNode root) {
			Map<Integer, PriorityQueue<Pos>> map = new TreeMap<>();
			dfs(map, root, 0, 0);
			List<List<Integer>> ans = new ArrayList<>();
			for (int i : map.keySet()) {
				List<Integer> list = new ArrayList<>();
				PriorityQueue<Pos> queue = map.get(i);
				while (!queue.isEmpty()) {
					list.add(queue.poll().val);
				}
				ans.add(list);
			}
			return ans;
		}

		private void dfs(Map<Integer, PriorityQueue<Pos>> map, TreeNode node, int x, int y) {
			if (node == null) {
				return;
			}
			Pos pos = new Pos(node.val, y);
			map.putIfAbsent(x, new PriorityQueue<>((a, b) -> a.y == b.y ? a.val - b.val : a.y - b.y));
			map.get(x).offer(pos);
			dfs(map, node.left, x - 1, y + 1);
			dfs(map, node.right, x + 1, y + 1);
		}
	}
}
