class Solution {
    public boolean isSubsequence(String s, String t) {
        int index = 0;
        StringBuilder sb = new StringBuilder();
        for (char i : s.toCharArray()){
            while (index < t.length()) {
                if (t.charAt(index) == i) {
                    sb.append(i);
                    index++;
                    break;
                } else {
                    index++;
                }
            }
        }
        return sb.toString().equals(s);
    }
}


class Solution {
    public boolean isSubsequence(String s, String t) {
        int i = 0, j = 0, sl = s.length(), tl = t.length();
        char[] sc = s.toCharArray(), tc = t.toCharArray();
        while (i < sl && j < tl) {
            if (sc[i] == tc[j]) {
                i++;
                j++;
            } else {
                j++;
            }
        }
        return i == sl;
    }
}


class Solution:
    def isSubsequence(self, s: str, t: str) -> bool:
        ptr = 0
        for c in t:
            if ptr == len(s):
                return True
            if s[ptr] == c:
                ptr += 1
        return ptr == len(s)


#include <string>
using std::string;

class Solution {
public:
	bool isSubsequence(string s, string t) {
		if (s.empty()) return true;
		int ptr = 0;
		for (char c : t) {
			if (c == s[ptr]) ptr++;
			if (ptr == size(s)) break;
		}
		return ptr == size(s);
	}
};
