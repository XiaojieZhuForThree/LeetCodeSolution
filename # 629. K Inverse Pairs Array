class Solution:
    def kInversePairs(self, n: int, k: int) -> int:
        dp = [0 for i in range(k + 1)]
        dp[0] = 1
        curMax = 0
        for i in range(1, n + 1):
            curMax += i - 1
            nxt = [0 for i in range(k + 1)]
            nxt[0] = 1
            cur = 1
            for j in range(1, min(k + 1, curMax + 1)):
                cur += dp[j]
                if j - (i - 1) > 0:
                    cur -= dp[j - i]
                cur %= 1_000_000_007
                nxt[j] = cur
            dp = nxt
        return dp[k]


#include <vector>
class Solution {
public:
    long long mod = 1000000007;
    std::vector<std::vector<int>> dp;
    int kInversePairs(int n, int k) {
        dp = std::vector<std::vector<int>>(n + 1, std::vector<int>(k + 1, -1));
        return helper(n, k);
    }

private:
    int helper(int n, int k) {
        if (k == 0) return 1;
        if (n == 0) return 0;
        if (dp[n][k] != -1) return dp[n][k];
        long long ans = 0;
        for (int i = k; i >= 0 && i + n - 1 >= k; i--) {
            int cand = helper(n - 1, i);
            ans += cand;
            ans %= mod;
        }
        dp[n][k] = ans;
        return ans;
    }
};



#include <vector>

class Solution {
public:
	long long mod = 1000000007;
	std::vector<std::vector<long long>> dp;
	int kInversePairs(int n, int k) {
		dp = std::vector<std::vector<long long>>(n + 1, std::vector<long long>(k + 1, -1));
		return helper(n, k);
	}
private:
	long long helper(int n, int k) {
		if (k == 0) return 1;
		if (n == 0) return 0;
		if (dp[n][k] != -1) return dp[n][k];
		long long ans = helper(n, k - 1) + helper(n - 1, k);
		ans += mod;
		if (k - n >= 0) ans -= helper(n - 1, k - n);
		ans %= mod;
		dp[n][k] = ans;
		return ans;
	}
};
