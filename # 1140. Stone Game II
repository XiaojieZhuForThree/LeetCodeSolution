package problems;

import java.util.Arrays;

public class Question1140 {
	class Solution {
		int[][] dp;

		public int stoneGameII(int[] piles) {
			int sum = 0;
			for (int i : piles) {
				sum += i;
			}
			dp = new int[piles.length + 1][piles.length + 1];
			for (int[] i : dp) {
				Arrays.fill(i, -1);
			}
			return dfs(piles, sum, 1, -1);
		}

		private int dfs(int[] piles, int sum, int M, int i) {
			if (dp[M + 1][i + 1] != -1) {
				return dp[M + 1][i + 1];
			}
			if (i == piles.length - 1) {
				dp[M + 1][i + 1] = 0;
				return 0;
			}
			int max = 0, cur = 0;
			for (int j = 1; j <= 2 * M && i + j < piles.length; j++) {
				cur += piles[i + j];
				sum -= piles[i + j];
				max = Math.max(max, cur + (sum - dfs(piles, sum, Math.max(M, j), i + j)));
			}
			dp[M + 1][i + 1] = max;
			return max;
		}
	}
}


#include <vector>
using namespace std;

class Solution {
public:
	int dp[101][101];
	int stoneGameII(vector<int>& piles) {


		memset(dp, -1, sizeof(dp));

		solve(0, piles, 1);
		int sum = 0;
		for (auto x : piles)
			sum += x;

		int diff = solve(0, piles, 1);
		return (sum + diff) / 2;
	}

	int solve(int i, vector<int>& piles, int m) {
		if (i >= piles.size())
			return 0;

		if (dp[i][m] != -1) return dp[i][m];

		int tot = 0, ans = INT_MIN;

		for (int j = 0; j < 2 * m; j++) {
			if (i + j < piles.size()) tot += piles[i + j];
			ans = max(ans, tot - solve(i + j + 1, piles, max(m, j + 1)));
		}
		return dp[i][m] = ans;
	}
};
