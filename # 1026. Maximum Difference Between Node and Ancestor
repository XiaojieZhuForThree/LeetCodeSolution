package com.leetcode.problems;

public class Question1026 {
	class Solution1 {
		int ans = 0;

		public int maxAncestorDiff(TreeNode root) {
			TreeNode copy = copyTree(root);
			getDiff(root, true);
			getDiff(copy, false);
			return ans;
		}

		private TreeNode copyTree(TreeNode node) {
			if (node == null) {
				return null;
			}
			TreeNode copy = new TreeNode(node.val);
			copy.left = copyTree(node.left);
			copy.right = copyTree(node.right);
			return copy;
		}

		private void getDiff(TreeNode node, boolean isMin) {
			if (node == null) {
				return;
			}
			if (node.left != null) {
				getDiff(node.left, isMin);
				ans = Math.max(ans, Math.abs(node.val - node.left.val));
			}
			if (node.right != null) {
				getDiff(node.right, isMin);
				ans = Math.max(ans, Math.abs(node.val - node.right.val));
			}
			if (node.left != null) {
				node.val = isMin ? Math.min(node.val, node.left.val) : Math.max(node.val, node.left.val);
			}
			if (node.right != null) {
				node.val = isMin ? Math.min(node.val, node.right.val) : Math.max(node.val, node.right.val);
			}
		}
	}

	class Solution2 {
		int ans = 0;

		public int maxAncestorDiff(TreeNode root) {
			if (root == null) {
				return ans;
			}
			helper(root, root.val, root.val);
			return ans;
		}

		private void helper(TreeNode node, int min, int max) {
			if (node == null) {
				return;
			}
			min = Math.min(min, node.val);
			max = Math.max(max, node.val);
			ans = Math.max(ans, max - min);
			helper(node.left, min, max);
			helper(node.right, min, max);
		}
	}
}


#include "TreeNode.h"
#include <stdlib.h>
#include <utility>

class Solution {
public:
    int ans = 0;
    int maxAncestorDiff(TreeNode* root) {
        dfs(root);
        return ans;
    }

private:
    std::pair<int, int> dfs(TreeNode* node) {
        if (!node) return { 10001, -1 };
        auto l = dfs(node->left);
        auto r = dfs(node->right);
        if (l.first == 10001) l.first = node->val;
        if (l.second == -1) l.second = node->val;
        if (r.first == 10001) r.first = node->val;
        if (r.second == -1) r.second = node->val;
        int val1 = abs(node->val - l.first), val2 = abs(l.second - node->val);
        int val3 = abs(node->val - r.first), val4 = abs(r.second - node->val);
        ans = std::max(ans, std::max(std::max(val1, val2), std::max(val3, val4)));
        int s = std::min(l.first, r.first), b = std::max(l.second, r.second);
        s = std::min(s, node->val), b = std::max(b, node->val);
        return { s, b };
    }
};
