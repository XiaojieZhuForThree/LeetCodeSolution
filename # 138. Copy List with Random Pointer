package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

import com.leetcode.api.Node;

public class Question138 {
	class Solution {
		public Node copyRandomList(Node head) {
			Map<Node, Node> map = new HashMap<>();
			Node dummy = head;
			while (dummy != null) {
				map.put(dummy, new Node(dummy.val));
				dummy = dummy.next;
			}
			dummy = head;
			while (dummy != null) {
				Node next = dummy.next;
				if (next != null) {
					map.get(dummy).next = map.get(next);
				}
				Node random = dummy.random;
				if (random != null) {
					map.get(dummy).random = map.get(random);
				}
				dummy = dummy.next;
			}
			return map.get(head);
		}
	}
}


#include <unordered_map>
class Node {
public:
	int val;
	Node* next;
	Node* random;

	Node(int _val) {
		val = _val;
		next = NULL;
		random = NULL;
	}
};

class Solution {
public:
	Node* copyRandomList(Node* head) {
		std::unordered_map<Node*, Node*> map;
		Node* ptr = head;
		while (ptr) {
			Node* cpy = new Node(ptr->val);
			map[ptr] = cpy;
			ptr = ptr->next;
		}
		ptr = head;
		while (ptr) {
			map[ptr]->next = map[ptr->next];
			if (ptr->random) map[ptr]->random = map[ptr->random];
			ptr = ptr->next;
		}
		return map[head];
	}
};
