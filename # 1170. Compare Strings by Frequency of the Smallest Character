class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] ans = new int[queries.length];
        int[] wordsC = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            wordsC[i] = helper(words[i]);
        }
        for (int i = 0; i < queries.length; i++) {
            int m = 0;
            int val = helper(queries[i]);
            for (int j : wordsC) {
                if (val < j) {
                    m ++;
                }
            }
            ans[i] = m;
        }
        return ans;
    }
    int helper(String s) {
        char min = 'z';
        int[] counts = new int[26];
        for (char c : s.toCharArray()) {
            counts[c-'a'] ++;
            if (c < min) {
                min = c;
            }
        }
        return counts[min-'a'];
    }
}


class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] ans = new int[queries.length];
        int[] wordsC = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            wordsC[i] = helper(words[i]);
        }
        for (int i = 0; i < queries.length; i++) {
            int m = 0;
            int val = helper(queries[i]);
            for (int j : wordsC) {
                if (val < j) {
                    m ++;
                }
            }
            ans[i] = m;
        }
        return ans;
    }
    int helper(String s) {
        char min = 'z';
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == min) {
                count++;
            } else if (c < min) {
                min = c;
                count = 1;
            }
        }
        return count;
    }
}

class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] ans = new int[queries.length];
        int[] wordsC = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            wordsC[i] = helper(words[i]);
        }
        Arrays.sort(wordsC);
        for (int i = 0; i < queries.length; i++) {
            int val = helper(queries[i]);
            int l = 0, r = wordsC.length-1;
            while (l <= r) {
                int mid = (l + r) / 2;
                if (val < wordsC[mid]) {
                    r = mid - 1;
                } else {
                    l = mid + 1;
                }
            }
            ans[i] = wordsC.length-l;
        }
        return ans;
    }
    int helper(String s) {
        char min = 'z';
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == min) {
                count++;
            } else if (c < min) {
                min = c;
                count = 1;
            }
        }
        return count;
    }
}

class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] ans = new int[queries.length];
        int[] wordsC = new int[words.length];
        for (int i = 0; i < words.length; i++) {
            wordsC[i] = helper(words[i]);
        }
        Arrays.sort(wordsC);
        for (int i = 0; i < queries.length; i++) {
            int val = helper(queries[i]);
            int idx = Arrays.binarySearch(wordsC, val);
            if (idx >= 0) {
                while (idx < wordsC.length && wordsC[idx] == val) {
                    idx++;
                }
            } else {
                idx = -idx-1;
            }
            ans[i] = wordsC.length-idx;
        }
        return ans;
    }
    int helper(String s) {
        char min = 'z';
        int count = 0;
        for (char c : s.toCharArray()) {
            if (c == min) {
                count++;
            } else if (c < min) {
                min = c;
                count = 1;
            }
        }
        return count;
    }
}
