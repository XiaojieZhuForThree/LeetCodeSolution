class Solution {
    public String reverseWords(String s) {
        StringBuilder sb = new StringBuilder();
        String[] words = s.split(" ");
        for (String i : words) {
        	sb.append(new StringBuilder(i).reverse());
        	sb.append(' ');
        }
        return sb.substring(0, sb.length()-1).toString();
    }
}

#include <string>

using namespace std;
class Solution {
public:
    string reverseWords(string s) {
        int b = 0, e = s.find(" ");
        while (e != string::npos) {
            reverse(s.begin() + b, s.begin() + e);
            b = e + 1;
            e = s.find(" ", b);
        }
        reverse(s.begin() + b, s.end());
        return s;
    }
};


#include <string>
using std::string;

class Solution {
public:
	string reverseWords(string s) {
		string ans;
		int l = 0, r = 0;
		for (; r < size(s); r++) {
			if (s[r] != ' ') continue;
			string cur = s.substr(l, r - l);
			reverse(cur.begin(), cur.end());
			ans += cur;
			ans += ' ';
			l = r + 1;
		}
		if (l != size(s)) {
			string cur = s.substr(l, r - l);
			reverse(cur.begin(), cur.end());
			ans += cur;
		}
		return ans;
	}
};
