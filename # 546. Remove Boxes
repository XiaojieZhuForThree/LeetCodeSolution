package com.leetcode.problems;

import java.util.Arrays;

public class Question546 {
	class Solution {
		public int removeBoxes(int[] boxes) {
			int dp[][][] = new int[boxes.length][boxes.length][boxes.length];
			for (int i = 0; i < dp.length; i++) {
				for (int j = 0; j < dp[0].length; j++)
					Arrays.fill(dp[i][j], -1);
			}
			return fun(boxes, 0, boxes.length - 1, 0, dp);
		}

		private int fun(int[] boxes, int i, int j, int streak_so_far, int dp[][][]) {
			if (i > j)
				return 0;

			if (i == j)
				return (streak_so_far + 1) * (streak_so_far + 1);

			if (dp[i][j][streak_so_far] != -1)
				return dp[i][j][streak_so_far];

			int max = (streak_so_far + 1) * (streak_so_far + 1) + fun(boxes, i + 1, j, 0, dp); // break your streak at i
																								// index

			for (int k = i + 1; k <= j; k++) { // do not break your streak at i index
				if (boxes[k] == boxes[i]) {
					// streak continues for [k.....j]
					// and we calculate answer for subproblem [i+1.....k-1]
					max = Math.max(max, fun(boxes, i + 1, k - 1, 0, dp) + fun(boxes, k, j, streak_so_far + 1, dp));
				}
			}

			return dp[i][j][streak_so_far] = max;
		}
	}
}
