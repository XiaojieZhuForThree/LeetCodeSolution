package com.leetcode.problems;

import java.util.Arrays;

public class Question948 {
	class Solution {
		public int bagOfTokensScore(int[] tokens, int P) {
			if (tokens == null || tokens.length == 0 || P == 0) {
				return 0;
			}
			Arrays.sort(tokens);
			int left = 0, right = tokens.length - 1;
			int score = 0;
			while (left < right) {
				if (P >= tokens[left]) {
					P -= tokens[left++];
					score++;
				} else if (score > 0 && P + tokens[right] >= tokens[left]) {
					score--;
					P += tokens[right--];
				} else {
					break;
				}
			}
			if (P >= tokens[left]) {
				score++;
			}
			return score;
		}
	}
}


#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    int bagOfTokensScore(vector<int>& tokens, int power) {
        sort(tokens.begin(), tokens.end());
        int l = 0, r = tokens.size() - 1;
        int ans = 0, cur = 0;
        while (l <= r) {
            if (power >= tokens[l]) {
                cur++;
                power -= tokens[l];
                l++;
                ans = max(ans, cur);
            }
            else if (cur > 0) {
                cur -= 1;
                power += tokens[r];
                r--;
            }
            else {
                break;
            }
        }
        return ans;
    }
};
