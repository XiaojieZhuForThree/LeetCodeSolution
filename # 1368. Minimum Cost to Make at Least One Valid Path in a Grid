package problems;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;

public class Question1368 {
	class Solution {
		int[][] dirs = new int[][] { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 } };

		public int minCost(int[][] grid) {
			int m = grid.length, n = grid[0].length;
			int[][] dp = new int[m][n];
			for (int[] i : dp) {
				Arrays.fill(i, Integer.MAX_VALUE);
			}
			Deque<int[]> deque = new ArrayDeque<>();
			int cost = 0;
			dfs(grid, dp, deque, 0, 0, cost);
			while (!deque.isEmpty()) {
				cost++;
				for (int i = deque.size(); i > 0; i--) {
					int[] cur = deque.poll();
					for (int[] dir : dirs) {
						dfs(grid, dp, deque, cur[0] + dir[0], cur[1] + dir[1], cost);
					}
				}
			}
			return dp[m - 1][n - 1];
		}

		private void dfs(int[][] grid, int[][] dp, Deque<int[]> deque, int i, int j, int cost) {
			if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
				return;
			}
			if (dp[i][j] != Integer.MAX_VALUE) {
				return;
			}
			dp[i][j] = cost;
			deque.offer(new int[] { i, j });
			int sign = grid[i][j] - 1;
			int[] dir = dirs[sign];
			int ni = i + dir[0], nj = j + dir[1];
			dfs(grid, dp, deque, ni, nj, cost);
		}
	}
}


#include <unordered_map>
#include <vector>
using std::vector;

class Solution {
public:
    std::unordered_map<int, std::pair<int, int>> p = {{1, {0, 1}}, {2, {0, -1}}, {3, {1, 0}}, {4, {-1, 0}}};
    vector<vector<int>> g;
    vector<vector<int>> dp;
    vector<vector<vector<int>>> mem;
    int minCost(vector<vector<int>>& grid) {
        int m = size(grid), n = size(grid[0]);
        g = grid;
        dp.resize(m, vector<int>(n, -1));
        mem.resize(m, vector<vector<int>>(n, vector<int>(m + n + 1, -1)));
        return dfs(0, 0, 0, m, n);
    }
private:
    int dfs(int i, int j, int cur, int m, int n) {
        if (i == m - 1 && j == n - 1) return cur;
        if (mem[i][j][cur] != -1) return mem[i][j][cur];
        if (i < 0 || i >= m || j < 0 || j >= n || cur >= m + n) return INT_MAX;
        dp[i][j] = cur;
        int ans = INT_MAX;
        for (int k = 1; k <= 4; k++) {
            int nxt = cur;
            if (g[i][j] != k) nxt = cur + 1;
            int ni = i + p[k].first, nj = j + p[k].second;
            if (ni < 0 || ni >= m || nj < 0 || nj >= n || (dp[ni][nj] != -1 && dp[ni][nj] <= nxt)) continue;
            ans = min(ans, dfs(ni, nj, nxt, m, n));
        }
        mem[i][j][cur] = ans;
        return ans;
    }
};
