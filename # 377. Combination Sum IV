package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question377 {
	class Solution {
		Map<Integer, Integer> map = new HashMap<>();

		public int combinationSum4(int[] nums, int target) {
			if (target == 0) {
				return 1;
			}
			if (map.containsKey(target)) {
				return map.get(target);
			}
			int ans = 0;
			for (int i : nums) {
				if (target < i) {
					continue;
				}
				ans += combinationSum4(nums, target - i);
			}
			map.put(target, ans);
			return ans;
		}
	}
}


from typing import List


class Solution:
    def combinationSum4(self, nums: List[int], target: int) -> int:
        self.seen = {}

        def helper(target):
            if target in self.seen:
                return self.seen[target]
            elif target == 0:
                return 1
            ans = 0
            for i in nums:
                if target - i >= 0:
                    ans += helper(target - i)
            self.seen[target] = ans
            return ans

        return helper(target)


class Solution {
public:
    unordered_map<int, int> dp;
    int combinationSum4(vector<int>& nums, int target) {
        if (target == 0) return 1;
        if (dp.count(target)) return dp[target];
        int ans = 0;
        for (int i : nums) {
            if (i > target) continue;
            ans += combinationSum4(nums, target - i);
        }
        dp[target] = ans;
        return ans;
    }
};
