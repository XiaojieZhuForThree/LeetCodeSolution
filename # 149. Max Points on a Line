/**
 * Definition for a point.
 * class Point {
 *     int x;
 *     int y;
 *     Point() { x = 0; y = 0; }
 *     Point(int a, int b) { x = a; y = b; }
 * }
 */
class Solution {
    public int maxPoints(Point[] points) {
        if (points == null) {
            return 0;
        }
        if (points.length <= 2) {
            return points.length;
        }
        Map<Integer, Map<Integer, Integer>> map = new HashMap<>();
        int ans = 0;
        for (int i = 0; i < points.length; i++) {
            map.clear();
            int overlap = 0, max = 0;
            for (int j = i + 1; j < points.length; j++) {
                int x = points[j].x - points[i].x;
                int y = points[j].y - points[i].y;
                if (x == 0 && y == 0){
                    overlap++;
                    continue;
                }
                int gcd = generateGCD(x, y);
                if (gcd != 0) {
                    x /= gcd;
                    y /= gcd;
                }
                if (map.containsKey(x)){
                    map.get(x).put(y, map.get(x).getOrDefault(y, 0) + 1);
                } else{
                    Map<Integer, Integer> m = new HashMap<>();
                    m.put(y, 1);
                    map.put(x, m);
                }
                max = Math.max(max, map.get(x).get(y));
            }
            ans = Math.max(ans, max + overlap + 1);
        }
        return ans;
    }
    private int generateGCD(int x, int y){
        if (y == 0){
            return x;
        }
        return generateGCD(y, x%y);
    }
}


class Solution {
    public int maxPoints(int[][] points) {
        int n = points.length;
        if (n < 3) {
            return n;
        }
        int max = 2;
        for (int i = 1; i < n; i++) {
            int count = 0;
            long x1 = points[i-1][0];
            long y1 = points[i-1][1];
            long x2 = points[i][0];
            long y2 = points[i][1];
            
            if (x1 == x2 && y1 == y2) {
                for (int j = 0; j < n; j++) {
                    if (points[j][0] == x1 && points[j][1] == y1) {
                        count++;
                    }
                }
            }
            else {
                for (int j = 0; j < n; j++) {
                    long a = (points[j][1] - y2) * (x2 - x1);
                    long b = (y2 - y1) * (points[j][0] - x2);
                    if (a == b) {
                        count++;
                    }
                }
            }
            max = Math.max(max, count);
        }
        return max;
    }
}
