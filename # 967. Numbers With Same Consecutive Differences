package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Queue;

public class Question967 {
	class Solution {
		public int[] numsSameConsecDiff(int N, int K) {
			Queue<Integer> container = new ArrayDeque<>();
			for (int i = 0; i < 10; i++) {
				container.offer(i);
			}
			for (int n = 2; n <= N; n++) {
				processNumber(container, K);
			}
			return getArray(container);
		}

		private final void processNumber(Queue<Integer> container, int K) {
			for (int i = container.size(); i > 0; i--) {
				int number = container.poll();
				if (number == 0) {
					continue;
				}
				int lastDig = number % 10;
				if (lastDig + K < 10) {
					container.offer(number * 10 + lastDig + K);
				}
				if (lastDig - K >= 0 && K != 0) {
					container.offer(number * 10 + lastDig - K);
				}
			}
		}

		private final int[] getArray(Queue<Integer> container) {
			int[] ans = new int[container.size()];
			for (int i = container.size(); i > 0; i--) {
				ans[i - 1] = container.poll();
			}
			return ans;
		}
	}
}


from typing import List


class Solution:
    def numsSameConsecDiff(self, n: int, k: int) -> List[int]:
        self.ans = set()

        def backTrack(num, cur):
            if cur == n:
                self.ans.add(num)
                return
            dig = num % 10
            if dig + k < 10:
                backTrack(num * 10 + dig + k, cur + 1)
            if dig - k >= 0:
                backTrack(num * 10 + dig - k, cur + 1)
            return
        for i in range(1, 10):
            backTrack(i, 1)
        return self.ans
