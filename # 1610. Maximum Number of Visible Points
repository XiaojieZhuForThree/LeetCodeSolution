package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Question1610 {
	class Solution {
		public int visiblePoints(List<List<Integer>> points, int angle, List<Integer> location) {
			int overlap = 0;
			List<Double> ptrs = new ArrayList<>();
			for (List<Integer> ptr : points) {
				if (isOverlap(ptr, location))
					overlap++;
				else
					ptrs.add(convertToAngle(ptr, location));
			}
			Collections.sort(ptrs);
			int n = ptrs.size();
			for (int i = 0; i < n; i++)
				ptrs.add(ptrs.get(i) + 2 * Math.PI);
			int l = 0, r = 0, span = 0;
			double ang = ((double) angle * Math.PI) / 180.0;
			for (; r < ptrs.size(); r++) {
				while (ptrs.get(r) - ptrs.get(l) > ang)
					l++;
				span = Math.max(span, r - l + 1);
			}
			return span + overlap;
		}

		private boolean isOverlap(List<Integer> ptr1, List<Integer> ptr2) {
			return ptr1.get(0) == ptr2.get(0) && ptr1.get(1) == ptr2.get(1);
		}

		private double convertToAngle(List<Integer> ptr, List<Integer> origin) {
			return Math.atan2(ptr.get(1) - origin.get(1), ptr.get(0) - origin.get(0));
		}
	}
}
