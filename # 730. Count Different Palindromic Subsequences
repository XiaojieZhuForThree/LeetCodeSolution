class Solution {
    public int countPalindromicSubsequences(String S) {
        int len = S.length();
        int[][] dp = new int[len][len];
        
        char[] chs = S.toCharArray();
        
        for (int i = 0; i < len; i++) {
            dp[i][i] = 1;
        }
        
        for (int distance = 1; distance < len; distance++) {
            for (int i = 0; i < len - distance; i++) {
                int j = i + distance;
                if (chs[i] == chs[j]) {
                    int low = i+1;
                    int high = j - 1;
                    while (low <= high && chs[low] != chs[j]) {
                        low++;
                    }
                    while (low <= high && chs[high] != chs[j]) {
                        high--;
                    }
                    if (low > high) {
                        dp[i][j] = dp[i+1][j-1] * 2 + 2;
                    } else if (low == high) {
                        dp[i][j] = dp[i+1][j-1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i+1][j-1] * 2 - dp[low+1][high-1];
                    }
                } else {
                    dp[i][j] = dp[i][j-1] + dp[i+1][j] - dp[i+1][j-1];
                }
                dp[i][j] = dp[i][j] < 0 ? dp[i][j] + 1000000007 : dp[i][j] % 1000000007;
            }
        }
        return dp[0][len-1];
    }
}

class Solution {
    public int countPalindromicSubsequences(String S) {
        if (S == null || S.length() == 0) {
            return 0;
        }
        int len = S.length();
        int[][] dp = new int[len][len];
        for (int i = 0; i < len; i++) {
            dp[i][i] = 1;
        }
        for (int l = 1; l < len; l++) {
            for (int i = 0; i < len - l; i++) {
                int j = i + l;
                if (S.charAt(i) == S.charAt(j)) {
                    int left = i+1, right = j-1;
                    while (left <= right && S.charAt(left) != S.charAt(j)) {
                        left++;
                    }
                    while (left <= right && S.charAt(right) != S.charAt(j)) {
                        right--;
                    }
                    if (left > right) {
                        dp[i][j] = dp[i+1][j-1] * 2 + 2;
                    } else if (left == right) {
                        dp[i][j] = dp[i+1][j-1] * 2 + 1;
                    } else {
                        dp[i][j] = dp[i+1][j-1] * 2 - dp[left+1][right-1];
                    }
                } else {
                    dp[i][j] = dp[i+1][j] + dp[i][j-1] - dp[i+1][j-1];
                }
                dp[i][j] = dp[i][j] < 0 ? dp[i][j] + 1000000007 : dp[i][j] % 1000000007;
            }
        }
        return dp[0][len-1];
    }
}
