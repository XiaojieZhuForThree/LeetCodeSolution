package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question1483 {
	class TreeAncestor {
		Map<Integer, List<Integer>> pars;
		int[][] dp;

		public TreeAncestor(int n, int[] parent) {
			pars = new HashMap<>();
			int exp = 1, cur = 1;
			while (cur <= n) {
				cur <<= 1;
				exp++;
			}
			dp = new int[n][exp];
			for (int[] row : dp)
				Arrays.fill(row, -1);
			for (int i = 0; i < n; i++) {
				int par = parent[i];
				if (par != -1) {
					pars.putIfAbsent(par, new ArrayList<>());
					pars.get(par).add(i);
					dp[i][0] = par;
				}
			}
			dfs(0);
		}

		private void dfs(int cur) {
			for (int i = 1; i < dp[0].length; i++) {
				int prev = dp[cur][i - 1];
				if (prev == -1)
					break;
				dp[cur][i] = dp[prev][i - 1];
			}
			for (int i : pars.getOrDefault(cur, new ArrayList<>()))
				dfs(i);
			return;
		}

		public int getKthAncestor(int node, int k) {
			if (node == -1 || k == 0)
				return node;
			int cur = 1, exp = 0;
			while (cur * 2 <= k) {
				cur *= 2;
				exp++;
			}
			int prev = dp[node][exp];
			return getKthAncestor(prev, k - cur);
		}
	}

	/**
	 * Your TreeAncestor object will be instantiated and called as such:
	 * TreeAncestor obj = new TreeAncestor(n, parent); int param_1 =
	 * obj.getKthAncestor(node,k);
	 */
}
