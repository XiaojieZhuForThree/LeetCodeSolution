package com.leetcode.problems;

import java.util.Arrays;

public class Question322 {
	class Solution {
		public int coinChange(int[] coins, int amount) {
			int[] dp = new int[amount + 1];
			Arrays.fill(dp, Integer.MAX_VALUE);
			dp[0] = 0;
			for (int i = 0; i <= amount; i++) {
				if (dp[i] == Integer.MAX_VALUE) {
					continue;
				}
				for (int coin : coins) {
					if (i + coin > amount || i + coin < 0) {
						continue;
					}
					dp[i + coin] = Math.min(dp[i + coin], dp[i] + 1);
				}
			}
			return dp[amount] == Integer.MAX_VALUE ? -1 : dp[amount];
		}
	}
}


class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        dp = [-1] * (amount + 1)
        dp[0] = 0
        for i in range(amount + 1):
            for j in coins:
                if i - j < 0:
                    continue
                elif dp[i - j] == -1:
                    continue
                elif dp[i] == -1:
                    dp[i] = dp[i - j] + 1
                else:
                    dp[i] = min(dp[i], dp[i - j] + 1)
        return dp[amount]


from typing import List


class Solution:
    def coinChange(self, coins: List[int], amount: int) -> int:
        if not amount:
            return 0
        dp = [-1 for i in range(amount + 1)]
        dp[0] = 0
        for i in coins:
            if i <= amount:
                dp[i] = 1
        for i in range(amount + 1):
            for j in coins:
                prev = i - j
                if prev < 0 or dp[prev] == -1:
                    continue
                if dp[i] == -1:
                    dp[i] = dp[prev] + 1
                else:
                    dp[i] = min(dp[i], dp[prev] + 1)
        return dp[amount]
        
