package com.leetcode.problems;

public class Question977 {
	class Solution {
		public int[] sortedSquares(int[] nums) {
			int left = 0, right = nums.length - 1, ptr = right;
			int[] ans = new int[nums.length];
			while (left <= right) {
				if (Math.abs(nums[left]) < Math.abs(nums[right])) {
					ans[ptr--] = nums[right] * nums[right--];
				} else {
					ans[ptr--] = nums[left] * nums[left++];
				}
			}
			return ans;
		}
	}
}


#include <vector>
using std::vector;

class Solution {
public:
	vector<int> sortedSquares(vector<int>& nums) {
		vector<int> ans;
		int l = 0, r = size(nums) - 1;
		while (l <= r) {
			if (abs(nums[l]) > abs(nums[r])) {
				ans.push_back(nums[l] * nums[l]);
				l++;
			}
			else {
				ans.push_back(nums[r] * nums[r]);
				r--;
			}
		}
		reverse(ans.begin(), ans.end());
		return ans;
	}
};
