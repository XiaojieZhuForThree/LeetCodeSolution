package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question1776 {
	class Solution {
		public double[] getCollisionTimes(int[][] cars) {
			int n = cars.length;
			double[] ans = new double[n];
			ans[n - 1] = -1.0;
			Deque<Integer> queue = new ArrayDeque<>();
			queue.offerLast(n - 1);
			for (int i = n - 2; i >= 0; i--) {
				while (!queue.isEmpty() && !canCatch(i, queue.peekFirst(), cars, ans)) {
					queue.pollFirst();
				}
				if (queue.isEmpty()) {
					ans[i] = -1.0;
					queue.offerFirst(i);
				} else {
					int r = queue.peekFirst();
					ans[i] = (cars[r][0] - cars[i][0]) * 1.0 / (cars[i][1] - cars[r][1]);
					queue.offerFirst(i);
				}
			}
			return ans;
		}

		private boolean canCatch(int i, int j, int[][] cars, double[] ans) {
			if (cars[i][1] <= cars[j][1])
				return false;
			double time = (cars[j][0] - cars[i][0]) * 1.0 / (cars[i][1] - cars[j][1]);
			return (ans[j] == -1.0 || time <= ans[j]);
		}
	}
}
