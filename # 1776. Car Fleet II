package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question1776 {
	class Solution {
		public double[] getCollisionTimes(int[][] cars) {
			if (cars == null || cars.length == 0)
				return new double[0];
			int n = cars.length;
			double[] ans = new double[n];
			Deque<Integer> stack = new ArrayDeque<>();
			for (int i = n - 1; i >= 0; i--) {
				ans[i] = -1.0;
				while (!stack.isEmpty()) {
					int j = stack.peekLast();
					if (cars[i][1] <= cars[j][1])
						stack.pollLast();
					else if (calTime(cars, i, j) >= ans[j] && ans[j] > 0)
						stack.pollLast();
					else
						break;
				}
				if (!stack.isEmpty())
					ans[i] = calTime(cars, i, stack.peekLast());
				stack.offerLast(i);
			}
			return ans;
		}

		private double calTime(int[][] cars, int i, int j) {
			return (cars[j][0] - cars[i][0]) * 1.0 / (cars[i][1] - cars[j][1]);
		}
	}
}
