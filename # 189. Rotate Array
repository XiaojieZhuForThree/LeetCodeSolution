package com.leetcode.problems;

public class Question189 {
	class Solution {
		public void rotate(int[] nums, int k) {
			if (nums == null || nums.length == 0) {
				return;
			}
			k %= nums.length;
			if (k == 0) {
				return;
			}
			swap(nums, 0, nums.length - k - 1);
			swap(nums, nums.length - k, nums.length - 1);
			swap(nums, 0, nums.length - 1);
		}

		private void swap(int[] nums, int l, int r) {
			while (l < r) {
				int temp = nums[l];
				nums[l++] = nums[r];
				nums[r--] = temp;
			}
			return;
		}
	}
}


class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k %= len(nums)
        
        if k == 0:
            return
        
        nums.reverse()
        self.reverse(nums, 0, k - 1)
        self.reverse(nums, k, len(nums) - 1)
    
    def reverse(self, nums, s, e):
        while s < e:
            tmp = nums[s]
            nums[s] = nums[e]
            nums[e] = tmp
            s += 1
            e -= 1


class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k %= len(nums)
        
        if k == 0:
            return
        
        nums[:] = nums[-k:] + nums[:-k]
