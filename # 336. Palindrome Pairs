package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question336 {
	class Solution {
		public List<List<Integer>> palindromePairs(String[] words) {
			if (words == null || words.length < 2)
				return List.of();
			final List<List<Integer>> ans = new ArrayList<>();
			final Map<String, Integer> map = new HashMap<>();
			for (int i = 0; i < words.length; i++)
				map.put(words[i], i);
			if (map.containsKey("")) {
				final int idx = map.get("");
				for (int i = 0; i < words.length; i++) {
					if (isPali(words[i]) && i != idx) {
						ans.add(List.of(i, idx));
						ans.add(List.of(idx, i));
					}
				}
			}
			for (int i = 0; i < words.length; i++) {
				final String wdRev = new StringBuilder(words[i]).reverse().toString();
				if (map.containsKey(wdRev) && map.get(wdRev) != i)
					ans.add(List.of(map.get(wdRev), i));
			}
			for (int i = 0; i < words.length; i++) {
				for (int j = 1; j < words[i].length(); j++) {
					final String s1 = words[i].substring(0, j), s2 = words[i].substring(j);
					if (isPali(s1)) {
						final String s2Rev = new StringBuilder(s2).reverse().toString();
						if (map.containsKey(s2Rev) && map.get(s2Rev) != i)
							ans.add(List.of(map.get(s2Rev), i));
					}
					if (isPali(s2)) {
						final String s1Rev = new StringBuilder(s1).reverse().toString();
						if (map.containsKey(s1Rev) && map.get(s1Rev) != i)
							ans.add(List.of(i, map.get(s1Rev)));
					}
				}
			}
			return ans;
		}

		private boolean isPali(final String s) {
			if (s == null)
				return false;
			int l = 0, r = s.length() - 1;
			while (l < r) {
				if (s.charAt(l++) != s.charAt(r--))
					return false;
			}
			return true;
		}
	}
}
