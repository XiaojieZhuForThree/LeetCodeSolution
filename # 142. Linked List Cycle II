package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

import com.leetcode.api.ListNode;

public class Question142 {
	public class Solution1 {
		public ListNode detectCycle(ListNode head) {
			if (head == null || head.next == null) {
				return null;
			}
			Set<ListNode> seen = new HashSet<>();
			while (head != null) {
				if (seen.contains(head)) {
					return head;
				}
				seen.add(head);
				head = head.next;
			}
			return null;
		}
	}

	public class Solution2 {
		public ListNode detectCycle(ListNode head) {
			if (head == null || head.next == null) {
				return null;
			}
			ListNode fast = head, slow = head.next;
			int i = 1;
			while (fast != slow) {
				if (slow == null || slow.next == null) {
					return null;
				}
				fast = fast.next;
				slow = slow.next.next;
				i++;
			}
			int j = 1;
			ListNode dummy = slow.next;
			while (dummy != slow) {
				j++;
				dummy = dummy.next;
			}
			ListNode node = head;
			for (int k = 0; k < i - j; k++) {
				node = node.next;
			}
			while (node != fast) {
				if (isValid(node, j)) {
					return node;
				}
				node = node.next;
			}
			return node;
		}

		private boolean isValid(ListNode node, int j) {
			ListNode dummy = node;
			for (int i = 0; i < j; i++) {
				dummy = dummy.next;
			}
			return dummy == node;
		}
	}

	public class Solution3 {
		public ListNode detectCycle(ListNode head) {
			if (head == null || head.next == null || head.next.next == null) {
				return null;
			}
			ListNode slow = head.next, fast = head.next.next;
			while (slow != fast) {
				if (fast.next == null || fast.next.next == null) {
					return null;
				}
				slow = slow.next;
				fast = fast.next.next;
			}
			slow = head;
			while (slow != fast) {
				slow = slow.next;
				fast = fast.next;
			}
			return slow;
		}
	}
}
