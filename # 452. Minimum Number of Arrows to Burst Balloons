package com.leetcode.problems;

import java.util.Arrays;
import java.util.Comparator;

public class Question452 {
	class Solution {
		public int findMinArrowShots(int[][] points) {
			if (points == null || points.length == 0) {
				return 0;
			}
			Arrays.sort(points, new Comparator<int[]>() {
				@Override
				public int compare(int[] o1, int[] o2) {
					if (o1[0] == o2[0]) {
						return Integer.compare(o1[1], o2[1]);
					}
					return Integer.compare(o1[0], o2[0]);
				}
			});
			int left = points[0][0], right = points[0][1];
			int ans = 1;
			for (int i = 1; i < points.length; i++) {
				int[] point = points[i];
				if (point[0] > right) {
					ans++;
					left = point[0];
					right = point[1];
				} else {
					left = Math.max(left, point[0]);
					right = Math.min(right, point[1]);
				}
			}
			return ans;
		}
	}
}
