package com.leetcode.problems;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Question827 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		public int largestIsland(int[][] grid) {
			if (grid == null || grid.length == 0 || grid[0].length == 0)
				return 0;
			int m = grid.length, n = grid[0].length;
			int num = 2, ans = 0;
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i][j] == 1) {
						int area = dfs(grid, i, j, num);
						ans = Math.max(ans, area);
						map.put(num, area);
						num++;
					}
				}
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i][j] == 0) {
						int sum = 1;
						Set<Integer> set = new HashSet<>();
						for (int[] dir : dirs) {
							int ni = i + dir[0], nj = j + dir[1];
							if (ni < 0 || ni >= m || nj < 0 || nj >= n)
								continue;
							if (grid[ni][nj] == 0 || set.contains(grid[ni][nj]))
								continue;
							set.add(grid[ni][nj]);
							sum += map.get(grid[ni][nj]);
						}
						ans = Math.max(ans, sum);
					}
				}
			}
			return ans;
		}

		private int dfs(int[][] grid, int i, int j, int num) {
			int ans = 1;
			grid[i][j] = num;
			for (int[] dir : dirs) {
				int ni = i + dir[0], nj = j + dir[1];
				if (ni < 0 || ni >= grid.length || nj < 0 || nj >= grid[0].length)
					continue;
				if (grid[ni][nj] != 1)
					continue;
				ans += dfs(grid, ni, nj, num);
			}
			return ans;
		}
	}
}
