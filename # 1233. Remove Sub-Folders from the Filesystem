package problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question1233 {
	class Solution1 {
		public List<String> removeSubfolders(String[] folder) {
			Set<String> set = new HashSet<>();
			Arrays.sort(folder, new Comparator<String>() {
				public int compare(String a, String b) {
					return a.length() - b.length();
				}
			});

			for (String f : folder) {
				StringBuilder sb = new StringBuilder();
				boolean cont = false;
				for (char c : f.toCharArray()) {
					if (c == '/') {
						if (set.contains(sb.toString())) {
							cont = true;
							break;
						}
					}
					sb.append(c);
				}
				if (!cont) {
					set.add(f);
				}
			}
			return new ArrayList<>(set);
		}
	}

	class Solution2 {
		private class TrieNode {
			boolean hasEnd;
			Map<String, TrieNode> children;

			TrieNode() {
				hasEnd = false;
				children = new HashMap<>();
			}

			boolean insert(String[] nodes) {
				TrieNode node = this;
				boolean isSub = false;
				for (String sf : nodes) {
					if (!node.children.containsKey(sf)) {
						node.children.put(sf, new TrieNode());
					}
					node = node.children.get(sf);
					if (node.hasEnd) {
						isSub = true;
					}
				}
				node.hasEnd = true;
				return isSub;
			}
		}

		public List<String> removeSubfolders(String[] folder) {
			TrieNode root = new TrieNode();
			List<String> list = new ArrayList<>();
			Arrays.sort(folder, new Comparator<String>() {
				public int compare(String a, String b) {
					return a.length() - b.length();
				}
			});
			for (String s : folder) {
				String[] nodes = s.substring(1).split("/");
				if (!root.insert(nodes)) {
					list.add(s);
				}
			}
			return list;
		}
	}
}
