package problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question1233 {
	class Solution1 {
		public List<String> removeSubfolders(String[] folder) {
			Arrays.sort(folder, new Comparator<String>() {
				public int compare(String a, String b) {
					return Integer.compare(a.length(), b.length());
				}
			});
			Set<String> set = new HashSet<>();
			for (String s : folder) {
				StringBuilder sb = new StringBuilder();
				boolean isSub = false;
				for (char c : s.toCharArray()) {
					if (c == '/') {
						if (set.contains(sb.toString())) {
							isSub = true;
							break;
						}
					}
					sb.append(c);
				}
				if (!isSub) {
					set.add(s);
				}
			}
			return new ArrayList<String>(set);
		}
	}

	class Solution2 {
		public List<String> removeSubfolders(String[] folder) {
			TrieNode root = new TrieNode();
			Arrays.sort(folder);
			List<String> ans = new ArrayList<>();
			for (String s : folder) {
				if (!root.generateTrie(s.substring(1).split("/"))) {
					ans.add(s);
				}
			}
			return ans;
		}
	}

	class TrieNode {
		String word;
		boolean isFinal;
		Map<String, TrieNode> next;

		public TrieNode() {
			isFinal = false;
			next = new HashMap<>();
		}

		public boolean generateTrie(String[] words) {
			TrieNode node = this;
			for (String w : words) {
				node.next.putIfAbsent(w, new TrieNode());
				if (node.next.get(w).isFinal) {
					return true;
				}
				node = node.next.get(w);
			}
			node.isFinal = true;
			return false;
		}
	}
}
