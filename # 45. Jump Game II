package com.leetcode.problems;

public class Question45 {
	class Solution {
		public int jump(int[] nums) {
			if (nums.length == 1) {
				return 0;
			}
			return dfs(nums, 0, new int[nums.length], new boolean[nums.length]);
		}

		private int dfs(int[] nums, int index, int[] dp, boolean[] visited) {
			if (index >= nums.length - 1) {
				return 0;
			}
			if (visited[index]) {
				return dp[index];
			}
			if (nums[index] == 0) {
				visited[index] = true;
				dp[index] = 1000;
				return 1000;
			}
			int ans = 1000;
			for (int i = 1; i <= nums[index]; i++) {
				ans = Math.min(ans, dfs(nums, index + i, dp, visited));
			}
			visited[index] = true;
			dp[index] = 1 + ans;
			return dp[index];
		}
	}
}


#include <vector>

using namespace std;

class Solution {
public:
	int jump(vector<int>& nums) {
		if (nums.size() < 2) return 0;
		int ans = 1, cur = nums[0], backup = nums[0];
		for (int i = 1; i < nums.size(); i++) {
			if (cur == 0) {
				cur = backup;
				ans++;
			}
			cur--;
			backup--;
			if (backup < nums[i]) backup = nums[i];
		}
		return ans;
	}
};
