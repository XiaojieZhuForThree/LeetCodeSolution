package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Queue;

public class Question1293 {
	class Solution {
		class Position {
			int x;
			int y;
			int k;

			public Position(int x, int y, int k) {
				this.x = x;
				this.y = y;
				this.k = k;
			}
		}

		public int shortestPath(int[][] grid, int k) {
			if (grid == null || grid.length == 0 || grid[0].length == 0)
				return -1;
			int m = grid.length, n = grid[0].length;
			boolean[][][] seen = new boolean[m][n][k + 1];
			int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
			Queue<Position> queue = new ArrayDeque<>();
			Position pos = new Position(0, 0, k);
			seen[0][0][k] = true;
			queue.offer(pos);
			int steps = -1;
			while (!queue.isEmpty()) {
				steps++;
				for (int i = queue.size(); i > 0; i--) {
					Position cur = queue.poll();
					if (cur.x == m - 1 && cur.y == n - 1)
						return steps;
					for (int[] dir : dirs) {
						int nx = cur.x + dir[0], ny = cur.y + dir[1];
						if (nx < 0 || nx >= m || ny < 0 || ny >= n)
							continue;
						int nk = cur.k - grid[nx][ny];
						if (nk < 0 || seen[nx][ny][nk])
							continue;
						seen[nx][ny][nk] = true;
						queue.offer(new Position(nx, ny, nk));
					}
				}
			}
			return -1;
		}
	}
}
