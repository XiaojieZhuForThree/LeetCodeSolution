class Solution {
    public int numIslands(char[][] grid) {
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return 0;
        }
        int ans = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == '1') {
                    dfs(grid, i, j);
                    ans++;
                }
            }
        }
        return ans;
    }
    public void dfs(char[][] grid, int i, int j) {
        if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
            return;
        }
        if (grid[i][j] == '1') {
            grid[i][j] = '0';
            dfs(grid, i-1, j);
            dfs(grid, i, j-1);
            dfs(grid, i+1, j);
            dfs(grid, i, j+1);
        }

    }
}



from typing import List


class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        ans = 0
        m = len(grid)
        n = len(grid[0])
        for i in range(m):
            for j in range(n):
                if grid[i][j] == '1':
                    ans += 1
                    self.dfs(grid, i, j)
        return ans

    def dfs(self, grid, i, j):
        m = len(grid)
        n = len(grid[0])
        if i < 0 or j < 0 or i >= m or j >= n or grid[i][j] == '0':
            return
        grid[i][j] = '0'
        for d in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
            self.dfs(grid, i + d[0], j + d[1])


#include <vector>
using std::vector;

class Solution {
public:
	int numIslands(vector<vector<char>>& grid) {
		int ans = 0;
		vector<std::pair<int, int>> dir = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
		for (int i = 0; i < size(grid); i++) {
			for (int j = 0; j < size(grid[0]); j++) {
				if (grid[i][j] == '1') {
					ans++;
					dfs(grid, dir, i, j);
				}
			}
		}
		return ans;
	}

private:
	void dfs(vector<vector<char>>& g, vector<std::pair<int, int>>& dir, int i, int j) {
		if (i < 0 || i >= size(g) || j < 0 || j >= size(g[0]) || g[i][j] == '0') return;
		g[i][j] = '0';
		for (auto& p : dir) dfs(g, dir, i + p.first, j + p.second);
	}
};
