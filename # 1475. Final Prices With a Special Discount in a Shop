package problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question1475 {
	class Solution1 {
		public int[] finalPrices(int[] prices) {
			int n = prices.length;
			for (int i = 0; i < n; i++) {
				for (int j = i + 1; j < n; j++) {
					if (prices[j] <= prices[i]) {
						prices[i] -= prices[j];
						break;
					}
				}
			}
			return prices;
		}
	}
	class Solution2 {
	    public int[] finalPrices(int[] prices) {
	        int n = prices.length;
	        Deque<Integer> deque = new ArrayDeque<>();
	        for (int i = 0; i < n; i++) {
	            while (!deque.isEmpty() && prices[deque.peekLast()] >= prices[i]) {
	                prices[deque.pollLast()] -= prices[i];
	            }
	            deque.offer(i);
	        }
	        return prices;
	    }
	}
}


#include <vector>
#include <deque>
using std::vector;

class Solution {
public:
    vector<int> finalPrices(vector<int>& prices) {
        int n = size(prices);
        std::deque<int> mis;
        vector<int> dp(n, -1);
        for (int i = n - 1; i >= 0; i--) {
            while (!mis.empty() && prices[mis.front()] > prices[i]) mis.pop_front();
            if (!mis.empty()) dp[i] = mis.front();
            mis.push_front(i);
        }
        for (int i = 0; i < n; i++) {
            if (dp[i] == -1) continue;
            prices[i] -= prices[dp[i]];
        }
        return prices;
    }
};
