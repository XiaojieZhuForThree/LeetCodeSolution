package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class Question1338 {
	class Solution {
		public int minSetSize(int[] arr) {
			if (arr == null || arr.length == 0)
				return 0;
			int half = arr.length / 2;
			Map<Integer, Integer> map = new HashMap<>();
			for (int i : arr)
				map.put(i, map.getOrDefault(i, 0) + 1);
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> map.get(b) - map.get(a));
			for (int i : map.keySet())
				pq.offer(i);
			int ans = 0, count = 0;
			while (!pq.isEmpty() && count < half) {
				ans++;
				count += map.get(pq.poll());
			}
			return ans;
		}
	}
}


from collections import Counter
import heapq
import math
from typing import List


class Solution:
    def minSetSize(self, arr: List[int]) -> int:
        counter = Counter(arr)
        heap = []
        heapq.heapify(heap)
        for i in counter:
            heapq.heappush(heap, (-counter[i], i))
        half = math.ceil(len(arr) / 2)
        ans = 0
        while half > 0:
            half += heapq.heappop(heap)[0]
            ans += 1
        return ans
