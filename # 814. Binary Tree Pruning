package com.leetcode.problems;

import com.leetcode.model.TreeNode;

public class Question814 {
	class Solution {
		public TreeNode pruneTree(TreeNode root) {
			if (root == null)
				return root;
			root.left = pruneTree(root.left);
			root.right = pruneTree(root.right);
			if (root.left == null && root.right == null && root.val == 0)
				return null;
			return root;
		}
	}
}



#include "TreeNode.cpp"

class Solution {
public:
    TreeNode* pruneTree(TreeNode* root) {
        if (root == nullptr) return root;
        pruneTree(root->left);
        pruneTree(root->right);
        if (root->left != nullptr) {
            if (shouldRemove(root->left)) root->left = nullptr;
        }
        if (root->right != nullptr) {
            if (shouldRemove(root->right)) root->right = nullptr;
        }
        return shouldRemove(root) ? nullptr : root;
    }
private:
    bool shouldRemove(TreeNode* node) {
        return node->val == 0 && node->left == nullptr && node->right == nullptr;
    }
};
