package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;

public class Question133 {
	class Node {
		public int val;
		public List<Node> neighbors;

		public Node() {
			val = 0;
			neighbors = new ArrayList<Node>();
		}

		public Node(int _val) {
			val = _val;
			neighbors = new ArrayList<Node>();
		}

		public Node(int _val, ArrayList<Node> _neighbors) {
			val = _val;
			neighbors = _neighbors;
		}
	}

	class Solution {
		public Node cloneGraph(Node node) {
			if (node == null) {
				return null;
			}
			Map<Integer, Node> map = new HashMap<>();
			Deque<Node> queue = new ArrayDeque<>();
			queue.offer(node);
			while (!queue.isEmpty()) {
				Node cur = queue.poll();
				Node copy = map.containsKey(cur.val) ? map.get(cur.val) : new Node(cur.val);
				List<Node> list = new ArrayList<>();
				for (Node nei : cur.neighbors) {
					if (map.containsKey(nei.val)) {
						list.add(map.get(nei.val));
					} else {
						Node cnei = new Node(nei.val);
						list.add(cnei);
						map.put(cnei.val, cnei);
						queue.offer(nei);
					}
				}
				copy.neighbors = list;
				map.putIfAbsent(copy.val, copy);
			}
			return map.get(node.val);
		}
	}
}
