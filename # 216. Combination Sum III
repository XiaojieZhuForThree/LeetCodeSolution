package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question216 {
	class Solution {
		List<List<Integer>> ans = new ArrayList<>();

		public List<List<Integer>> combinationSum3(int k, int n) {
			if (9 * k < n || k > n) {
				return ans;
			}
			dfs(new ArrayList<>(), 0, k, n);
			return ans;
		}

		private final void dfs(List<Integer> list, int cur, int k, int remain) {
			if (remain == 0 && cur == k) {
				ans.add(new ArrayList<>(list));
				return;
			}
			if (remain <= 0 || cur >= k) {
				return;
			}
			int lastDig = list.size() == 0 ? 0 : list.get(list.size() - 1);
			for (int i = lastDig + 1; i < 10; i++) {
				if (remain - i >= 0) {
					list.add(i);
					dfs(list, cur + 1, k, remain - i);
					list.remove(list.size() - 1);
				}
			}
			return;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Mon May  9 19:37:52 2022

@author: xiaoj
"""
from typing import List


class Solution:
    def combinationSum3(self, k: int, n: int) -> List[List[int]]:
        ans = []
        self.dfs(ans, k, n, 0, 0, [])
        return ans

    def dfs(self, ans, k, n, used, cur, cand):
        if used == k and cur == n:
            ans.append(cand.copy())
            return
        last = cand[-1] if cand else 0
        for i in range(last + 1, 10):
            cand.append(i)
            self.dfs(ans, k, n, used + 1, cur + i, cand)
            cand.pop(-1)
        return
