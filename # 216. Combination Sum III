package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question216 {
	class Solution {
		List<List<Integer>> ans = new ArrayList<>();

		public List<List<Integer>> combinationSum3(int k, int n) {
			if (9 * k < n || k > n) {
				return ans;
			}
			dfs(new ArrayList<>(), 0, k, n);
			return ans;
		}

		private final void dfs(List<Integer> list, int cur, int k, int remain) {
			if (remain == 0 && cur == k) {
				ans.add(new ArrayList<>(list));
				return;
			}
			if (remain <= 0 || cur >= k) {
				return;
			}
			int lastDig = list.size() == 0 ? 0 : list.get(list.size() - 1);
			for (int i = lastDig + 1; i < 10; i++) {
				if (remain - i >= 0) {
					list.add(i);
					dfs(list, cur + 1, k, remain - i);
					list.remove(list.size() - 1);
				}
			}
			return;
		}
	}
}
