class Solution {
    public int minPathSum(int[][] grid) {
        int ans = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                int add = 0;
                if (i > 0 && j > 0) {
                    add = Math.min(grid[i-1][j], grid[i][j-1]);
                } else if (i > 0) {
                    add = grid[i-1][j];
                } else if (j > 0) {
                    add = grid[i][j-1];
                }
                grid[i][j] += add;
            }
        }
        return grid[grid.length - 1][grid[0].length - 1];
    }
}


#include <vector>
using namespace std;

class Solution {
public:
	int minPathSum(vector<vector<int>>& grid) {
		int m = size(grid), n = size(grid[0]);
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i == 0 && j == 0) continue;
				else if (i == 0) grid[i][j] += grid[i][j - 1];
				else if (j == 0) grid[i][j] += grid[i - 1][j];
				else grid[i][j] += min(grid[i - 1][j], grid[i][j - 1]);
			}
		}
		return grid[m - 1][n - 1];
	}
};
