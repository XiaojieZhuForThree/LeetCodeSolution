package problems;

public class Question886 {
	class Solution {
		public boolean possibleBipartition(int N, int[][] dislikes) {
			boolean[][] graph = new boolean[N][N];
			for (int[] d : dislikes) {
				graph[d[0] - 1][d[1] - 1] = true;
				graph[d[1] - 1][d[0] - 1] = true;
			}
			int[] colors = new int[N];
			for (int i = 0; i < N; i++) {
				if (colors[i] == 0 && !dfs(i, 1, colors, graph)) {
					return false;
				}
			}
			return true;
		}

		private boolean dfs(int u, int color, int[] colors, boolean[][] graph) {
			if (colors[u] != 0) {
				return colors[u] == color;
			}
			colors[u] = color;
			for (int v = 0; v < colors.length; v++) {
				if (graph[u][v] && !dfs(v, -color, colors, graph)) {
					return false;
				}
			}
			return true;
		}
	}
}
