import java.util.*;

class Solution {
	Map<Integer, Integer> map = new HashMap<>();
	int i = 1;

	public int numSquares(int n) {
		for (; i * i <= n; i++) {
			map.put(i * i, 1);
		}
		if (i * i == n) {
			return 1;
		} else {
			return rec(n);
		}
	}

	private int rec(int n) {
		if (n == 0) {
			return 0;
		}
		if (map.containsKey(n)) {
			return map.get(n);
		}
		int ans = n;
		for (int i = 1; i * i <= n; i++) {
			ans = Math.min(ans, 1 + rec(n - i * i));
		}
		map.put(n, ans);
		return ans;
	}
}


class Solution {
public:
    int numSquares(int n) {
        unordered_set<int> squares, seen;
        deque<int> queue;
        for (int i = 1; i <= 100; i++) squares.insert(i * i);
        queue.push_back(n);
        seen.insert(n);
        int ans = 0;
        while (!queue.empty()) {
            for (int i = queue.size(); i > 0; i--) {
                int cur = queue.front();
                queue.pop_front();
                if (cur == 0) return ans;
                for (int j : squares) {
                    if (cur - j < 0 || seen.count(cur - j)) continue;
                    seen.insert(cur - j);
                    queue.push_back(cur - j);
                }
            }
            ans++;
        }
        return -1;
    }
};


class Solution2 {
public:
    int numSquares(int n) {
        vector<int> dp(n + 1, 10000);
        dp[0] = 0;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j * j <= i; j++) {
                dp[i] = min(dp[i], 1 + dp[i - j * j]);
            }
        }
        return dp[n];
    }
};


#include <vector>
using std::vector;

class Solution {
public:
    int numSquares(int n) {
        vector<int> dp(n + 1, -1);
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j * j <= i; j++) {
                if (dp[i - j * j] == -1) continue;
                if (dp[i] == -1 || dp[i] > dp[i - j * j] + 1) dp[i] = dp[i - j * j] + 1;
            }
        }
        return dp[n];
    }
};
