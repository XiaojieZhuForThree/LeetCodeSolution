package com.leetcode.problems;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Question823 {
	class Solution {
		public int numFactoredBinaryTrees(int[] arr) {
			Map<Integer, Long> map = new HashMap<>();
			long ans = 0;
			for (int i : arr) {
				map.put(i, 1L);
				ans += 1;
			}
			Arrays.sort(arr);
			for (int i : arr) {
				for (int j : arr) {
					if (j == i) {
						break;
					}
					if (i % j != 0 || !map.containsKey(j)) {
						continue;
					}
					int k = i / j;
					if (!map.containsKey(k)) {
						continue;
					}
					long val = map.get(j) * map.get(k);
					ans += val;
					map.put(i, map.get(i) + val);
				}
			}
			return (int) (ans % 1000000007);
		}
	}
}


from typing import List


class Solution:
    def numFactoredBinaryTrees(self, arr: List[int]) -> int:
        arr.sort()
        rec = {}
        for i in arr:
            rec[i] = 1
            j = 2
            for j in arr:
                if j == i:
                    break
                if i % j == 0:
                    k = i // j
                    if k in rec:
                        rec[i] += rec[j] * rec[k]
                rec[i] %= 1_000_000_007
        return (sum(rec.values()) % 1_000_000_007)


#include <algorithm>
#include <unordered_map>
#include <vector>
using std::vector;

class Solution {
public:
    int numFactoredBinaryTrees(vector<int>& arr) {
        std::sort(arr.begin(), arr.end());
        int ans = 0;
        std::unordered_map<int, long long> dp;
        for (int i = 0; i < size(arr); i++) {
            long long cur = 1;
            for (int j = 0; j <= i; j++) {
                if (arr[i] % arr[j] == 0 && dp.count(arr[i] / arr[j])) {
                    cur += dp[arr[j]] * dp[arr[i] / arr[j]];
                    cur %= 1000000007;
                }
            }
            ans += cur;
            ans %= 1000000007;
            dp[arr[i]] = cur;
        }
        return ans;
    }
};
