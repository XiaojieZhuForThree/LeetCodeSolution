package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question969 {
	class Solution {
		public List<Integer> pancakeSort(int[] A) {
			int n = A.length, end = A.length;
			List<Integer> ans = new ArrayList<>();
			for (; n > 0; n--) {
				int index = find(A, n);
				flip(A, index);
				flip(A, end - 1);
				ans.add(index + 1);
				ans.add(end--);
			}
			return ans;
		}

		private final int find(int[] A, int n) {
			for (int i = 0; i < A.length; i++) {
				if (A[i] == n) {
					return i;
				}
			}
			return -1;
		}

		private final void flip(int[] A, int i) {
			int left = 0, right = i;
			while (left < right) {
				swap(A, left, right);
				left++;
				right--;
			}
		}

		private final void swap(int[] A, int left, int right) {
			int temp = A[left];
			A[left] = A[right];
			A[right] = temp;
		}
	}
}
