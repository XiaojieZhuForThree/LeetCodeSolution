package com.leetcode.problems;

import java.util.Arrays;
import java.util.PriorityQueue;

public class Question630 {
	class Solution {
		public int scheduleCourse(int[][] courses) {
			int start = 0;
			Arrays.sort(courses, (a, b) -> a[1] - b[1]);
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
			for (int[] course : courses) {
				start += course[0];
				pq.offer(course[0]);
				if (start > course[1]) {
					start -= pq.poll();
				}
			}
			return pq.size();
		}
	}
}


from typing import List
import heapq

class Solution:
    def scheduleCourse(self, courses: List[List[int]]) -> int:
        validCourses = []
        for c in courses:
            if c[0] <= c[1]:
                validCourses.append((c[1], c[0]))
        validCourses.sort()
        pq = []
        heapq.heapify(pq)
        cur = 0
        las = 0
        for c in validCourses:
            prevLas = las
            las = c[0]
            cur += c[1]
            heapq.heappush(pq, (-c[1], -c[0]))
            if las < cur:
                cand = heapq.heappop(pq)
                time, ddl = -cand[0], -cand[1]
                cur -= time
                if las == ddl:
                    las = prevLas
        return len(pq)
        
