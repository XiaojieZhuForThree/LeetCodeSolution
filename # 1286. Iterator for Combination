package com.leetcode.problems;

public class Question1286 {
	class CombinationIterator {
		int[] pts;
		String characters;
		int combinationLength;
		int charactersLength;
		boolean hasNext;

		public CombinationIterator(String characters, int combinationLength) {
			this.characters = characters;
			this.combinationLength = combinationLength;
			this.charactersLength = characters.length();
			this.hasNext = true;

			pts = new int[combinationLength];

			for (int i = 0; i < combinationLength; i++) {
				pts[i] = i;
			}
		}

		public String next() {
			StringBuilder sb = new StringBuilder();
			for (int i : pts) {
				sb.append(characters.charAt(i));
			}
			if (pts[0] == charactersLength - combinationLength) {
				hasNext = false;
			}
			if (hasNext()) {
				generateNextCombination();
			}
			return sb.toString();
		}

		public boolean hasNext() {
			return hasNext;
		}

		private void generateNextCombination() {
			for (int i = combinationLength - 1; i >= 0; i--) {
				if (canMove(i)) {
					int newIndex = pts[i] + 1;
					updatePointers(newIndex, i);
					break;
				}
			}
		}

		private boolean canMove(int i) {
			return pts[i] < charactersLength - combinationLength + i;
		}

		private void updatePointers(int newIndex, int i) {
			for (int j = i; j < combinationLength; j++) {
				pts[j] = newIndex;
				newIndex++;
			}
		}
	}

	/**
	 * Your CombinationIterator object will be instantiated and called as such:
	 * CombinationIterator obj = new CombinationIterator(characters,
	 * combinationLength); String param_1 = obj.next(); boolean param_2 =
	 * obj.hasNext();
	 */
}
