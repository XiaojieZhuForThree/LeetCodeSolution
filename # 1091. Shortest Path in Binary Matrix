package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.Queue;
import java.util.Set;

public class Question1091 {
	class Point {
		int x;
		int y;

		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

	class Solution {
		public int shortestPathBinaryMatrix(int[][] grid) {
			if (grid[0][0] == 1) {
				return -1;
			}
			int[][] dirs = new int[][] { { 0, 1 }, { 0, -1 }, { 1, 0 }, { -1, 0 }, { 1, 1 }, { 1, -1 }, { -1, 1 },
					{ -1, -1 } };
			Set<Integer> seen = new HashSet<>();
			Queue<Point> queue = new ArrayDeque<>();
			queue.offer(new Point(0, 0));
			int len = 0;
			while (!queue.isEmpty()) {
				len++;
				for (int i = queue.size(); i > 0; i--) {
					Point pt = queue.poll();
					if (pt.x == grid.length - 1 && pt.y == grid[0].length - 1) {
						return len;
					}
					for (int[] dir : dirs) {
						int nx = pt.x + dir[0], ny = pt.y + dir[1];
						if (nx < 0 || nx >= grid.length || ny < 0 || ny >= grid[0].length) {
							continue;
						}
						if (grid[nx][ny] == 1) {
							continue;
						}
						if (seen.contains(nx * grid[0].length + ny)) {
							continue;
						}
						seen.add(nx * grid[0].length + ny);
						queue.offer(new Point(nx, ny));
					}
				}
			}
			return -1;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Mon May 16 19:06:00 2022

@author: xiaoj
"""
from collections import deque
from typing import List


class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if grid[0][0] == 1:
            return -1
        m = len(grid)
        n = len(grid[0])
        seen = [[0 for i in range(n)] for i in range(m)]
        queue = deque([])
        queue.append([0, 0])
        seen[0][0] = 1
        dirs = [[0, 1], [0, -1], [1, 0], [-1, 0],
                [1, 1], [1, -1], [-1, 1], [-1, -1]]
        ans = 0
        while queue:
            ans += 1
            l = len(queue)
            for i in range(l):
                cur = queue.popleft()
                if cur[0] == m - 1 and cur[1] == n - 1:
                    return ans
                for d in dirs:
                    nx = cur[0] + d[0]
                    ny = cur[1] + d[1]
                    if nx < 0 or nx >= m or ny < 0 or ny >= n or seen[nx][ny]:
                        continue
                    if grid[nx][ny] == 1:
                        continue
                    seen[nx][ny] = 1
                    queue.append([nx, ny])
        return -1


#include <vector>
#include <deque>
using namespace std;

class Solution {
public:
	int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
		int n = size(grid);
		vector<vector<bool>> visited(n, vector<bool>(n, false));
		vector<pair<int, int>> dirs = { {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1} };
		deque<pair<int, int>> q;
		if (grid[0][0] == 0) {
			q.push_back({ 0, 0 });
			visited[0][0] == true;
		}
		int ans = 0;
		while (!q.empty()) {
			ans++;
			for (int i = size(q); i > 0; i--) {
				pair<int, int> cur = q.front();
				q.pop_front();
				if (cur.first == n - 1 && cur.second == n - 1) return ans;
				for (auto& d : dirs) {
					int nx = cur.first + d.first, ny = cur.second + d.second;
					if (nx < 0 || nx >= n || ny < 0 || ny >= n || grid[nx][ny] == 1 || visited[nx][ny]) continue;
					visited[nx][ny] = true;
					q.push_back({ nx, ny });
				}
			}
		}
		return -1;
	}
};
