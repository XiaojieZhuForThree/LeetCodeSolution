package com.leetcode.problems;

import com.leetcode.model.TreeNode;

public class Question968 {
	class Solution1 {
		int ans = 0;

		public int minCameraCover(TreeNode root) {
			int status = dfs(root);
			if (status == 1) {
				ans++;
			}
			return ans;
		}

		private int dfs(TreeNode node) {
			if (node == null) {
				return 0;
			}
			int l = dfs(node.left), r = dfs(node.right);
			if (l == 1 || r == 1) {
				ans++;
				return 2;
			}
			if (l == 2 || r == 2) {
				return 0;
			}
			return 1;
		}
	}

	class Solution2 {
		public int minCameraCover(TreeNode root) {
			int[] cases = dp(root);
			return Math.min(cases[0], cases[1]);
		}

		private int[] dp(TreeNode node) {
			if (node == null) {
				return new int[] { 1, 0, 0 };
			}
			int[] left = dp(node.left), right = dp(node.right);
			int[] cases = new int[3];
			int lMin = Math.min(left[0], Math.min(left[1], left[2]));
			int rMin = Math.min(right[0], Math.min(right[1], right[2]));
			cases[0] = lMin + rMin + 1;
			int lL = left[0] + right[1], rL = left[1] + right[0], bL = left[0] + right[0];
			cases[1] = Math.min(lL, Math.min(rL, bL));
			cases[2] = left[1] + right[1];
			return cases;
		}
	}
}
