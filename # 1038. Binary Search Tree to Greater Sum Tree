package com.leetcode.problems;

public class Question1038 {
	class Solution {
		public TreeNode bstToGst(TreeNode root) {
			updateValues(root);
			return root;
		}

		private final void updateValues(TreeNode node) {
			if (node == null) {
				return;
			}
			if (isLeafNode(node)) {
				return;
			}
			updateValues(node.right);
			node.val += getLeftMostValue(node.right);
			if (node.left != null) {
				updateValues(node.left);
				addValue(node.left, node.val);
			}
		}

		private final boolean isLeafNode(TreeNode node) {
			return node.left == null && node.right == null;
		}

		private final int getLeftMostValue(TreeNode node) {
			if (node == null) {
				return 0;
			}
			while (node.left != null) {
				node = node.left;
			}
			return node.val;
		}

		private final void addValue(TreeNode node, int val) {
			if (node == null) {
				return;
			}
			node.val += val;
			addValue(node.left, val);
			addValue(node.right, val);
		}
	}
}


#include "TreeNode.h"

class Solution {
public:
	TreeNode* bstToGst(TreeNode* root) {
		helper(root, 0);
		return root;
	}
private:
	int helper(TreeNode* node, int c) {
		if (!node) return c;
		node->val += helper(node->right, c);
		return node->val + helper(node->left, node->val) - node->val;
	}
};
