import java.util.Arrays;

public class Question1300 {
	class Solution1 {
		public int findBestValue(int[] arr, int target) {
			int max = Integer.MIN_VALUE;
			for (int i : arr) {
				max = Math.max(max, i);
			}
			int l = 0, r = max, diff = Integer.MAX_VALUE, ans = Integer.MAX_VALUE;
			while (l <= r) {
				int mid = l + (r - l) / 2;
				int newSum = computeNewSum(arr, mid);
				if (newSum < target) {
					l = mid + 1;
				} else {
					r = mid - 1;
				}
				int newDiff = Math.abs(target - newSum);
				if (diff > newDiff || diff == newDiff && ans > mid) {
					ans = mid;
					diff = newDiff;
				}
			}
			return ans;
		}

		private int computeNewSum(int[] arr, int mid) {
			int ans = 0;
			for (int i : arr) {
				ans += Math.min(i, mid);
			}
			return ans;
		}
	}

	class Solution2 {
		public int findBestValue(int[] arr, int target) {
			Arrays.sort(arr);
			int i = 0, n = arr.length;
			while (i < n && target > arr[i] * (n - i)) {
				target -= arr[i++];
			}
			if (n == i) {
				return arr[n - 1];
			}
			int ans = target / (n - i);
			if (target - ans * (n - i) > (n - i) * (ans + 1) - target) {
				ans++;
			}
			return ans;
		}
	}
}
