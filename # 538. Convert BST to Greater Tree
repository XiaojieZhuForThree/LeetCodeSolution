package com.leetcode.problems;

import com.leetcode.api.TreeNode;

public class Question538 {
	class Solution {
		public TreeNode convertBST(TreeNode root) {
			if (root == null) {
				return root;
			}
			if (root.left == null && root.right == null) {
				return root;
			}
			if (root.right != null) {
				convertBST(root.right);
				TreeNode node = getLeft(root.right);
				root.val += node.val;
			}
			if (root.left != null) {
				TreeNode node = getRight(root.left);
				node.val += root.val;
				convertBST(root.left);
			}
			return root;
		}

		private TreeNode getLeft(TreeNode node) {
			while (node.left != null) {
				node = node.left;
			}
			return node;
		}

		private TreeNode getRight(TreeNode node) {
			while (node.right != null) {
				node = node.right;
			}
			return node;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Fri Apr 15 21:21:54 2022

@author: xiaoj
"""

from typing import Optional

# Definition for a binary tree node.


class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right


class Solution:
    def convertBST(self, root: Optional[TreeNode]) -> Optional[TreeNode]:
        self.dfs(root, 0)
        return root

    def dfs(self, node, cur):
        if not node:
            return cur
        cur = self.dfs(node.right, cur)
        node.val += cur
        cur = node.val
        cur = self.dfs(node.left, cur)
        return cur
