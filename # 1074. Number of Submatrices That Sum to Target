package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question1074 {
	class Solution1 {
		public int numSubmatrixSumTarget(int[][] matrix, int target) {
			for (int i = 0; i < matrix.length; i++) {
				for (int j = 0; j < matrix[0].length; j++) {
					matrix[i][j] += (j > 0 ? matrix[i][j - 1] : 0);
				}
			}
			int ans = 0;
			for (int i = 0; i < matrix.length; i++) {
				for (int j = 0; j < matrix[0].length; j++) {
					for (int k = 1; k <= j + 1; k++) {
						int sum = 0;
						for (int l = 1; l <= i + 1; l++) {
							sum += matrix[i + 1 - l][j] - (k < j + 1 ? matrix[i + 1 - l][j - k] : 0);
							if (sum == target) {
								ans++;
							}
						}
					}
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public int numSubmatrixSumTarget(int[][] matrix, int target) {
			int ans = 0, m = matrix.length, n = matrix[0].length;
			for (int i = 0; i < m; i++) {
				for (int j = 1; j < n; j++) {
					matrix[i][j] += matrix[i][j - 1];
				}
			}
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < n; i++) {
				for (int j = i; j < n; j++) {
					map.clear();
					map.put(0, 1);
					int sum = 0;
					for (int k = 0; k < m; k++) {
						sum += matrix[k][j] - (i == 0 ? 0 : matrix[k][i - 1]);
						if (map.containsKey(sum - target)) {
							ans += map.get(sum - target);
						}
						map.put(sum, map.getOrDefault(sum, 0) + 1);
					}
				}
			}
			return ans;
		}
	}
}


from typing import List


class Solution:
    def numSubmatrixSumTarget(self, matrix: List[List[int]], target: int) -> int:
        m, n = len(matrix), len(matrix[0])
        self.process(matrix, m, n)
        ans = 0
        for i in range(m):
            for j in range(-1, i):
                rec = {0: 1}
                cur = 0
                for k in range(n):
                    cur += matrix[i][k] - (matrix[j][k] if j >= 0 else 0)
                    diff = cur - target
                    if diff in rec:
                        ans += rec[diff]
                    if cur not in rec:
                        rec[cur] = 1
                    else:
                        rec[cur] += 1
        return ans

    def process(self, matrix, m, n):
        for i in range(m):
            for j in range(n):
                if i > 0:
                    matrix[i][j] += matrix[i-1][j]


class Solution {
public:
    int numSubmatrixSumTarget(vector<vector<int>>& matrix, int target) {
        int m = size(matrix), n = size(matrix[0]);
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) matrix[i][j] += helper(matrix, i, j - 1);
        }
        int ans = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= i; j++) {
                unordered_map<int, int> seen;
                seen[0] = 1;
                int cur = 0;
                for (int k = 0; k < m; k++) {
                    cur += helper(matrix, k, i) - helper(matrix, k, j - 1);
                    if (seen.count(cur - target)) ans += seen[cur - target];
                    seen[cur]++;                    
                }
            }
        }
        return ans;
    }

private:
    int helper(vector<vector<int>>& matrix, int i, int j) {
        if (i < 0 || i >= size(matrix) || j < 0 || j >= size(matrix[0])) return 0;
        return matrix[i][j];
    }
};
