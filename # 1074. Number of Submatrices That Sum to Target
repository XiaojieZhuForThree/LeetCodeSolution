package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question1074 {
	class Solution1 {
		public int numSubmatrixSumTarget(int[][] matrix, int target) {
			for (int i = 0; i < matrix.length; i++) {
				for (int j = 0; j < matrix[0].length; j++) {
					matrix[i][j] += (j > 0 ? matrix[i][j - 1] : 0);
				}
			}
			int ans = 0;
			for (int i = 0; i < matrix.length; i++) {
				for (int j = 0; j < matrix[0].length; j++) {
					for (int k = 1; k <= j + 1; k++) {
						int sum = 0;
						for (int l = 1; l <= i + 1; l++) {
							sum += matrix[i + 1 - l][j] - (k < j + 1 ? matrix[i + 1 - l][j - k] : 0);
							if (sum == target) {
								ans++;
							}
						}
					}
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public int numSubmatrixSumTarget(int[][] matrix, int target) {
			int ans = 0, m = matrix.length, n = matrix[0].length;
			for (int i = 0; i < m; i++) {
				for (int j = 1; j < n; j++) {
					matrix[i][j] += matrix[i][j - 1];
				}
			}
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < n; i++) {
				for (int j = i; j < n; j++) {
					map.clear();
					map.put(0, 1);
					int sum = 0;
					for (int k = 0; k < m; k++) {
						sum += matrix[k][j] - (i == 0 ? 0 : matrix[k][i - 1]);
						if (map.containsKey(sum - target)) {
							ans += map.get(sum - target);
						}
						map.put(sum, map.getOrDefault(sum, 0) + 1);
					}
				}
			}
			return ans;
		}
	}
}
