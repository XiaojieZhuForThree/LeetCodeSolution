package problems;

import java.util.HashMap;
import java.util.Map;

public class Question1074 {
	class Solution1 {
		public int numSubmatrixSumTarget(int[][] matrix, int target) {
			int m = matrix.length, n = matrix[0].length;
			int[][] dp = new int[m][n];
			int ans = 0;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					for (int x = i; x >= 0; x--) {
						int rowSum = 0;
						for (int y = j; y >= 0; y--) {
							rowSum += matrix[x][y];
							int sum = 0;
							if (x < i) {
								sum = rowSum + dp[x + 1][y];
							} else {
								sum = rowSum;
							}
							if (sum == target) {
								ans++;
							}
							dp[x][y] = sum;
						}
					}
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public int numSubmatrixSumTarget(int[][] matrix, int target) {
			int ans = 0, m = matrix.length, n = matrix[0].length;
			for (int i = 0; i < m; i++) {
				for (int j = 1; j < n; j++) {
					matrix[i][j] += matrix[i][j - 1];
				}
			}
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < n; i++) {
				for (int j = i; j < n; j++) {
					map.clear();
					map.put(0, 1);
					int sum = 0;
					for (int k = 0; k < m; k++) {
						sum += matrix[k][j] - (i == 0 ? 0 : matrix[k][i - 1]);
						if (map.containsKey(sum - target)) {
							ans += map.get(sum - target);
						}
						map.put(sum, map.getOrDefault(sum, 0) + 1);
					}
				}
			}
			return ans;
		}
	}
}
