class Solution {
    String ans = "";
    int minLen = Integer.MAX_VALUE;
    public String minWindow(String S, String T) {
        for (int i = 0; i < S.length(); i++) {
            if (S.charAt(i) == T.charAt(0)) {
                dfs(S, T, i);
            }
        }
        return ans;
    }
    private void dfs(String S, String T, int i){
        int j = 0, init = i;
        while (j < T.length() && i < S.length()) {
            if (S.charAt(i) == T.charAt(j)) {
                j++;
            }
            i++;
        }
        if (j == T.length()) {
            if (i - init < minLen) {
                minLen = i - init;
                ans = S.substring(init, i);
            }
        }
    }
}


class Solution {
    public String minWindow(String S, String T) {
        int right = 0, minLength = Integer.MAX_VALUE;
        String res = "";
        while (right < S.length()) {
            int tIndex = 0;
            while (right < S.length()) {
                if (S.charAt(right) == T.charAt(tIndex)) {
                    tIndex++;
                }
                if (tIndex == T.length()) {
                    break;
                }
                right++;
            }
            if (right == S.length()) {
                break;
            }
            int left = right;
            tIndex = T.length() - 1;
            while (left >= 0) {
                if (S.charAt(left) == T.charAt(tIndex)) {
                    tIndex--;
                }
                if (tIndex < 0) {
                    break;
                }
                left--;
            }
            if (right - left + 1 < minLength) {
                minLength = right - left + 1;
                res = S.substring(left, right+1);
            }
            right = left + 1;
        }
        return res;
    }
}
