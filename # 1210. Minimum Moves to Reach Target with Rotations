package problems;

import java.util.Deque;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Set;

public class Question1210 {
	class Node {
		int x, y, status;

		public Node(int x, int y, int status) {
			this.x = x;
			this.y = y;
			this.status = status;
		}
	}

	class Solution {
		public int minimumMoves(int[][] grid) {
			Deque<Node> deque = new LinkedList<>();
			Set<String> visited = new HashSet<>();
			deque.offer(new Node(0, 1, 0));
			deque.offer(null);
			int ans = 0, n = grid.length;
			while (!deque.isEmpty()) {
				Node cur = deque.poll();
				if (cur == null) {
					if (!deque.isEmpty()) {
						deque.offer(null);
					}
					ans++;
				} else {
					int x = cur.x, y = cur.y, status = cur.status;
					if (x == n - 1 && y == n - 1 && status == 0) {
						return ans;
					}
					String key = x + ":" + y + ":" + status;
					if (visited.contains(key)) {
						continue;
					}
					visited.add(key);
					if (canRight(x, y, status, grid)) {
						deque.offer(new Node(x, y + 1, status));
					}
					if (canDown(x, y, status, grid)) {
						deque.offer(new Node(x + 1, y, status));
					}
					if (status == 0 && canRotate(x, y, grid)) {
						deque.offer(new Node(x + 1, y - 1, 1));
					}
					if (status == 1 && canRev(x, y, grid)) {
						deque.offer(new Node(x - 1, y + 1, 0));
					}
				}
			}
			return -1;
		}

		private boolean canRight(int x, int y, int status, int[][] grid) {
			if (status == 0) {
				if (y + 1 < grid.length && grid[x][y + 1] == 0) {
					return true;
				}
			} else {
				if (y + 1 < grid.length && grid[x - 1][y + 1] == 0 && grid[x][y + 1] == 0) {
					return true;
				}
			}
			return false;
		}

		private boolean canDown(int x, int y, int status, int[][] grid) {
			if (status == 0) {
				if (x + 1 < grid.length && grid[x + 1][y] == 0 && grid[x + 1][y - 1] == 0) {
					return true;
				}
			} else {
				if (x + 1 < grid.length && grid[x + 1][y] == 0) {
					return true;
				}
			}
			return false;
		}

		private boolean canRotate(int x, int y, int[][] grid) {
			int n = grid.length;
			if (x + 1 < n && grid[x + 1][y] == 0 && grid[x + 1][y - 1] == 0) {
				return true;
			}
			return false;
		}

		private boolean canRev(int x, int y, int[][] grid) {
			int n = grid.length;
			if (y + 1 < n && grid[x][y + 1] == 0 && grid[x - 1][y + 1] == 0) {
				return true;
			}
			return false;
		}
	}
}
