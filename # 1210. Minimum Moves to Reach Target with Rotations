package problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashSet;
import java.util.Set;

public class Question1210 {
	class Solution {
		class Node {
			int x, y, status;

			Node(int x, int y, int status) {
				this.x = x;
				this.y = y;
				this.status = status;
			}
		}

		public int minimumMoves(int[][] grid) {
			int n = grid.length;
			Set<String> visited = new HashSet<>();
			Deque<Node> deque = new ArrayDeque<>();
			deque.offer(new Node(0, 1, 0));
			int ans = 0, levelNum = 1, curNum = 0;
			while (!deque.isEmpty()) {
				if (curNum == levelNum) {
					curNum = 0;
					levelNum = deque.size();
					ans++;
				}
				Node cur = deque.poll();
				curNum++;
				int x = cur.x, y = cur.y, status = cur.status;
				if (x == n - 1 && y == n - 1 && status == 0) {
					return ans;
				}
				String key = x + ":" + y + ":" + status;
				if (visited.contains(key)) {
					continue;
				}
				visited.add(key);
				if (canRight(x, y, status, grid)) {
					deque.offer(new Node(x, y + 1, status));
				}
				if (canDown(x, y, status, grid)) {
					deque.offer(new Node(x + 1, y, status));
				}
				if (canRotate(x, y, status, grid)) {
					deque.offer(new Node(x + 1, y - 1, 1));
				}
				if (canReverse(x, y, status, grid)) {
					deque.offer(new Node(x - 1, y + 1, 0));
				}
			}
			return -1;
		}

		private boolean canRight(int x, int y, int status, int[][] grid) {
			if (status == 0) {
				if (y + 1 < grid.length && grid[x][y + 1] == 0) {
					return true;
				}
			} else {
				if (y + 1 < grid.length && grid[x - 1][y + 1] == 0 && grid[x][y + 1] == 0) {
					return true;
				}
			}
			return false;
		}

		private boolean canDown(int x, int y, int status, int[][] grid) {
			if (status == 0) {
				if (x + 1 < grid.length && grid[x + 1][y - 1] == 0 && grid[x + 1][y] == 0) {
					return true;
				}
			} else {
				if (x + 1 < grid.length && grid[x + 1][y] == 0) {
					return true;
				}
			}
			return false;
		}

		private boolean canRotate(int x, int y, int status, int[][] grid) {
			if (status == 1) {
				return false;
			}
			int n = grid.length;
			if (x + 1 < n && grid[x + 1][y] == 0 && grid[x + 1][y - 1] == 0) {
				return true;
			}
			return false;
		}

		private boolean canReverse(int x, int y, int status, int[][] grid) {
			if (status == 0) {
				return false;
			}
			int n = grid.length;
			if (y + 1 < n && grid[x][y + 1] == 0 && grid[x - 1][y + 1] == 0) {
				return true;
			}
			return false;
		}
	}
}
