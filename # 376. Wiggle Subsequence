package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question376 {
	class Solution {
		public int wiggleMaxLength(int[] nums) {
			Deque<Integer> stack = new ArrayDeque<>();
			stack.offer(nums[0]);
			boolean up = false;
			for (int i = 1; i < nums.length; i++) {
				if (nums[i] == stack.peekLast()) {
					continue;
				}
				if (stack.size() == 1) {
					up = stack.peekLast() > nums[i];
					stack.offerLast(nums[i]);
				} else if (stack.peekLast() > nums[i]) {
					if (up) {
						stack.pollLast();
						stack.offer(nums[i]);
					} else {
						stack.offer(nums[i]);
						up = true;
					}
				} else {
					if (up) {
						stack.offer(nums[i]);
						up = false;
					} else {
						stack.pollLast();
						stack.offer(nums[i]);
					}
				}
			}
			return stack.size();
		}
	}
}


from typing import List


class Solution1:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        ups = []
        downs = []
        for i in range(len(nums)):
            up = 1
            down = 1
            for j in range(i):
                if nums[i] > nums[j]:
                    up = max(up, 1 + downs[j])
                elif nums[i] < nums[j]:
                    down = max(down, 1 + ups[j])
            ups.append(up)
            downs.append(down)
        return max(max(ups), max(downs))


class Solution2:
    def wiggleMaxLength(self, nums: List[int]) -> int:
        up = 1
        down = 1
        
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                up = down + 1
            elif nums[i] < nums[i - 1]:
                down = up + 1
        return max(up, down)
 
