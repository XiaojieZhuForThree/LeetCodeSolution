#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
	int minOperations(vector<int>& nums) {
		sort(nums.begin(), nums.end());
		vector<int> temp;
		temp.push_back(nums[0]);
		for (int i = 1; i < nums.size(); i++) {
			if (nums[i] != nums[i - 1]) {
				temp.push_back(nums[i]);
			}
		}

		int add = nums.size() - 1;
		int mn = INT_MAX;
		for (int i = 0; i < temp.size(); i++) {
			int lo = i;
			int hi = temp.size() - 1;
			while (hi - lo > 1) {
				int mid = (lo + hi) / 2;
				if (temp[mid] <= temp[i] + add) {
					lo = mid;
				}
				else {
					hi = mid - 1;
				}
			}
			if (temp[hi] <= temp[i] + add) {
				int diff = hi - i;
				mn = std::min(mn, add - diff);
			}
			else {
				int diff = lo - i;
				mn = std::min(mn, add - diff);
			}
		}

		return mn;
	}
};


#include <vector>
#include <algorithm>
#include <set>
using std::vector;

class Solution {
public:
    int minOperations(vector<int>& nums) {
        std::set<int> s(nums.begin(), nums.end());
        vector<int> v;
        for (int i : s) v.push_back(i);
        int n = size(nums);
        int l = 0, ans = n;
        for (int r = 0; r < size(v); r++) {
            while (l < r && v[r] - v[l] > n - 1) l++;
            ans = std::min(ans, n - (r - l + 1));
        }
        return ans;
    }
};
