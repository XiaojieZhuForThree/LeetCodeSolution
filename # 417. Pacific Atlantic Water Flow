package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Question417 {
	class Solution {
		public List<List<Integer>> pacificAtlantic(int[][] matrix) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
				return List.of();
			}
			int m = matrix.length, n = matrix[0].length;
			boolean[][] canPac = new boolean[m][n];
			boolean[][] canAlt = new boolean[m][n];
			Arrays.fill(canPac[0], true);
			Arrays.fill(canAlt[m - 1], true);
			for (int i = 0; i < m; i++) {
				canPac[i][0] = true;
				canAlt[i][n - 1] = true;
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (canPac[i][j]) {
						dfs(canPac, matrix, i, j);
					}
					if (canAlt[i][j]) {
						dfs(canAlt, matrix, i, j);
					}
				}
			}
			List<List<Integer>> ans = new ArrayList<>();
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (canPac[i][j] && canAlt[i][j]) {
						ans.add(List.of(i, j));
					}
				}
			}
			return ans;
		}

		private void dfs(boolean[][] canReach, int[][] matrix, int i, int j) {
			if (i + 1 < matrix.length && !canReach[i + 1][j] && matrix[i][j] <= matrix[i + 1][j]) {
				canReach[i + 1][j] = true;
				dfs(canReach, matrix, i + 1, j);
			}
			if (j + 1 < matrix[0].length && !canReach[i][j + 1] && matrix[i][j] <= matrix[i][j + 1]) {
				canReach[i][j + 1] = true;
				dfs(canReach, matrix, i, j + 1);
			}
			if (i - 1 >= 0 && !canReach[i - 1][j] && matrix[i][j] <= matrix[i - 1][j]) {
				canReach[i - 1][j] = true;
				dfs(canReach, matrix, i - 1, j);
			}
			if (j - 1 >= 0 && !canReach[i][j - 1] && matrix[i][j] <= matrix[i][j - 1]) {
				canReach[i][j - 1] = true;
				dfs(canReach, matrix, i, j - 1);
			}
			return;
		}
	}
}


from collections import deque
from typing import List


class Solution:
    def pacificAtlantic(self, heights: List[List[int]]) -> List[List[int]]:
        canP = self.getP(heights)
        canA = self.getA(heights)
        return canP.intersection(canA)

    def getP(self, heights):
        m = len(heights)
        n = len(heights[0])
        ans = set()
        visited = [[0 for i in range(n)] for i in range(m)]
        queue = deque([])
        for i in range(m):
            ans.add((i, 0))
            queue.append((i, 0))
            visited[i][0] = 1
        for i in range(n):
            ans.add((0, i))
            queue.append((0, i))
            visited[0][i] = 1
        while queue:
            for i in range(len(queue), 0, -1):
                x, y = queue.popleft()
                for d in [[0, 1], [1, 0], [0, -1], [-1, 0]]:
                    nx = x + d[0]
                    ny = y + d[1]
                    if nx < 0 or ny < 0 or nx >= m or ny >= n or visited[nx][ny] or heights[x][y] > heights[nx][ny]:
                        continue
                    ans.add((nx, ny))
                    queue.append((nx, ny))
                    visited[nx][ny] = 1
        return ans

    def getA(self, heights):
        m = len(heights)
        n = len(heights[0])
        ans = set()
        visited = [[0 for i in range(n)] for i in range(m)]
        queue = deque([])
        for i in range(m-1, -1, -1):
            ans.add((i, n - 1))
            queue.append((i, n - 1))
            visited[i][n - 1] = 1
        for i in range(n - 1, -1, -1):
            ans.add((m - 1, i))
            queue.append((m - 1, i))
            visited[m - 1][i] = 1
        while queue:
            for i in range(len(queue), 0, -1):
                x, y = queue.popleft()
                for d in [[0, 1], [1, 0], [0, -1], [-1, 0]]:
                    nx = x + d[0]
                    ny = y + d[1]
                    if nx < 0 or ny < 0 or nx >= m or ny >= n or visited[nx][ny] or heights[x][y] > heights[nx][ny]:
                        continue
                    ans.add((nx, ny))
                    queue.append((nx, ny))
                    visited[nx][ny] = 1
        return ans
