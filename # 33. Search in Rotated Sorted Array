class Solution {
	private int findPiv(int[] nums) {
		int left = 0, right = nums.length;
		while (left < right) {
			int mid = (left + right) / 2;
			if (mid > 0 && nums[mid - 1] > nums[mid]) {
				return mid;
			} else if (nums[mid] <= nums[nums.length - 1]) {
				right = mid;
			} else {
				left = mid + 1;
			}
		}
		return 0;
	}

	private int binSearch(int[] nums, int target, int left, int right) {
		if (left < 0 || right > nums.length) {
			return -1;
		}
		if (left == right) {
			if (nums[left] == target) {
				return left;
			}
			return -1;
		}
		while (left < right) {
			int mid = (left + right) / 2;
			if (nums[mid] == target) {
				return mid;
			} else if (nums[mid] < target) {
				left = mid + 1;
			} else {
				right = mid;
			}
		}
		return -1;
	}

	public int search(int[] nums, int target) {
		if (nums.length == 0) {
			return -1;
		}
		int piv = findPiv(nums);
		int ans = binSearch(nums, target, 0, piv);
		if (ans == -1) {
			ans = binSearch(nums, target, piv, nums.length);
		}
		return ans;
	}
}
