class Solution {
	private int findPiv(int[] nums) {
		int left = 0, right = nums.length;
		while (left < right) {
			int mid = (left + right) / 2;
			if (mid > 0 && nums[mid - 1] > nums[mid]) {
				return mid;
			} else if (nums[mid] <= nums[nums.length - 1]) {
				right = mid;
			} else {
				left = mid + 1;
			}
		}
		return 0;
	}

	private int binSearch(int[] nums, int target, int left, int right) {
		if (left < 0 || right > nums.length) {
			return -1;
		}
		if (left == right) {
			if (nums[left] == target) {
				return left;
			}
			return -1;
		}
		while (left < right) {
			int mid = (left + right) / 2;
			if (nums[mid] == target) {
				return mid;
			} else if (nums[mid] < target) {
				left = mid + 1;
			} else {
				right = mid;
			}
		}
		return -1;
	}

	public int search(int[] nums, int target) {
		if (nums.length == 0) {
			return -1;
		}
		int piv = findPiv(nums);
		int ans = binSearch(nums, target, 0, piv);
		if (ans == -1) {
			ans = binSearch(nums, target, piv, nums.length);
		}
		return ans;
	}
}


class Solution {
    public int search(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] == target) {
                return mid;
            }
            if (nums[left] <= nums[mid]) {
                if (target < nums[mid] && target >= nums[left]) {
                    right = mid -1;
                } else {
                    left = mid + 1;
                }
            } else {
                if (target > nums[mid] && target <= nums[right]) {
                    left = mid + 1;
                } else {
                    right = mid - 1;
                }
            }
        }
        return -1;
    }
}


#include <vector>
using std::vector;

class Solution {
public:
	int search(vector<int>& nums, int target) {
		if (nums.empty()) return -1;
		int p = findPiv(nums);
		if (p == -1) return bs(nums, 0, size(nums) - 1, target);
		int l = bs(nums, 0, p - 1, target), r = bs(nums, p, size(nums) - 1, target);
		if (l != -1) return l;
		return r;
	}
private:
	int findPiv(vector<int>& nums) {
		int l = 0, r = size(nums) - 1;
		while (l <= r) {
			int m = l + (r - l) / 2;
			if (m > 0 && m < size(nums) && nums[m] < nums[m - 1]) return m;
			if (nums[m] >= nums[0]) l = m + 1;
			else r = m - 1;
		}
		return -1;
	}
	int bs(vector<int>& nums, int l, int r, int target) {
		while (l < r) {
			int m = l + (r - l) / 2;
			if (nums[m] == target) return m;
			else if (nums[m] < target) l = m + 1;
			else r = m;
		}
		return nums[l] == target ? l : -1;
	}
};
