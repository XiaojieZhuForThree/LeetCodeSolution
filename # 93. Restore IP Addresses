class Solution {
    public List<String> restoreIpAddresses(String s) {
        List<String> ans = new ArrayList<>();
        int len = s.length();
        for (int i = 1; i < 4 && i < len-2; i++){
            for (int j = i + 1; j < i + 4 && j < len-1; j++){
                for (int k = j + 1; k < j + 4 && k < len; k++){
                    String s1 = s.substring(0, i);
                    String s2 = s.substring(i, j);
                    String s3 = s.substring(j, k);
                    String s4 = s.substring(k, len);
                    if (isValid(s1) && isValid(s2) && isValid(s3) && isValid(s4)){
                        ans.add(s1 + "." + s2 + "." + s3 + "." + s4);
                    }
                }
            }
        }
        return ans;
    }
    private boolean isValid(String s){
        if (s.length() > 3 || s.length() == 0 || (s.charAt(0) == '0' && s.length() > 1) || Integer.parseInt(s) > 255){
            return false;
        }
        return true;
    }
}


#include <string>
#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:
	vector<string> restoreIpAddresses(string s) {
		unordered_set<string> ans;
		dfs(s, "", ans, 0, 0);
		vector<string> res(ans.begin(), ans.end());
		return res;
	}
private:
	void dfs(string& s, string cur, unordered_set<string>& ans, int pos, int dots) {
		if (dots == 3) {
			if (pos >= s.size() || pos < s.size() - 3) return;
			string piece = s.substr(pos, s.size() - pos);
			if (piece.size() > 1 && piece[0] == '0') return;
			int last_num = stoi(piece);
			if (last_num > 255) return;
			ans.insert(cur + piece);
		}
		else {
			for (int i = 1; i <= 3 && pos + i < s.size(); i++) {
				string piece = s.substr(pos, i);
				if (piece.size() > 1 && piece[0] == '0') continue;
				int cur_num = stoi(piece);
				if (cur_num > 255) continue;
				dfs(s, cur + s.substr(pos, i) + ".", ans, pos + i, dots + 1);
			}
		}
	}
};
