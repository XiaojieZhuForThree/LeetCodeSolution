import heapq
from typing import List


class Solution:
    def mostBooked(self, n: int, meetings: List[List[int]]) -> int:
        free = [i for i in range(n)]
        occupied = []

        nums = [0 for i in range(n)]

        heapq.heapify(free)
        heapq.heapify(occupied)
        meetings.sort()

        for meeting in meetings:
            while occupied and occupied[0][0] <= meeting[0]:
                heapq.heappush(free, heapq.heappop(occupied)[1])
            if free:
                reserved = heapq.heappop(free)
                heapq.heappush(occupied, (meeting[1], reserved))
                nums[reserved] += 1
            else:
                start, reserved = heapq.heappop(occupied)
                duration = meeting[1] - meeting[0]
                heapq.heappush(occupied, (start + duration, reserved))
                nums[reserved] += 1
        return nums.index(max(nums))


#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& meetings) {
        int ans[101] = {};
        sort(meetings.begin(), meetings.end());
        priority_queue<int, vector<int>, greater<int>> free;
        priority_queue<pair<long, int>, vector<pair<long, int>>, greater<pair<long, int>>> occupied;
        for (int i = 0; i < n; i++) {
            free.push(i);
        }
        for (vector<int>& m : meetings) {
            int s = m[0], e = m[1];
            while (!occupied.empty() && occupied.top().first <= s) {
                free.push(occupied.top().second);
                occupied.pop();
            }
            if (!free.empty()) {
                int reserved = free.top();
                free.pop();
                occupied.push({ e, reserved });
                ans[reserved]++;
            }
            else {
                pair<long, int> cur = occupied.top();
                occupied.pop();
                int reserved = cur.second;
                long end = cur.first + e - s;
                occupied.push({ end, reserved });
                ans[reserved]++;
            }
        }

        int res = 0, max = ans[0];

        for (int i = 1; i < n; i++) {
            if (ans[i] > max) {
                max = ans[i];
                res = i;
            }
        }
        return res;
    }
};


#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>

using std::vector;

class Solution {
public:
    int mostBooked(int n, vector<vector<int>>& meetings) {
        int ans[101] = {};
        sort(meetings.begin(), meetings.end());
        std::priority_queue<int, vector<int>, std::greater<int>> free;
        std::priority_queue<std::pair<long, int>, vector<std::pair<long, int>>, std::greater<std::pair<long, int>>> occupied;
        for (int i = 0; i < n; i++) {
            free.push(i);
        }
        for (vector<int>& m : meetings) {
            int s = m[0], e = m[1];
            while (!occupied.empty() && occupied.top().first <= s) {
                free.push(occupied.top().second);
                occupied.pop();
            }
            if (!free.empty()) {
                int reserved = free.top();
                free.pop();
                occupied.push({ e, reserved });
                ans[reserved]++;
            }
            else {
                std::pair<long, int> cur = occupied.top();
                occupied.pop();
                int reserved = cur.second;
                long end = cur.first + e - s;
                occupied.push({ end, reserved });
                ans[reserved]++;
            }
        }

        int res = 0, max = ans[0];

        for (int i = 1; i < n; i++) {
            if (ans[i] > max) {
                max = ans[i];
                res = i;
            }
        }
        return res;
    }
};
