package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.Iterator;

public class Question284 {
	// Java Iterator interface reference:
	// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html

	class PeekingIterator implements Iterator<Integer> {
		Iterator<Integer> iterator;
		Deque<Integer> stack;

		public PeekingIterator(Iterator<Integer> iterator) {
			// initialize any member here.
			this.iterator = iterator;
			this.stack = new ArrayDeque<>();
		}

		// Returns the next element in the iteration without advancing the iterator.
		public Integer peek() {
			if (stack.isEmpty()) {
				stack.offerLast(iterator.next());
			}
			return stack.peekLast();
		}

		// hasNext() and next() should behave the same as in the Iterator interface.
		// Override them if needed.
		@Override
		public Integer next() {
			if (!stack.isEmpty()) {
				return stack.pollLast();
			}
			return iterator.next();
		}

		@Override
		public boolean hasNext() {
			return !stack.isEmpty() || iterator.hasNext();
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Sun Apr 24 19:26:12 2022

@author: xiaoj
"""

# Below is the interface for Iterator, which is already defined for you.
#
# class Iterator:
#     def __init__(self, nums):
#         """
#         Initializes an iterator object to the beginning of a list.
#         :type nums: List[int]
#         """
#
#     def hasNext(self):
#         """
#         Returns true if the iteration has more elements.
#         :rtype: bool
#         """
#
#     def next(self):
#         """
#         Returns the next element in the iteration.
#         :rtype: int
#         """

class PeekingIterator:
    def __init__(self, iterator):
        """
        Initialize your data structure here.
        :type iterator: Iterator
        """
        self.iterator = iterator
        self.p = -1

    def peek(self):
        """
        Returns the next element in the iteration without advancing the iterator.
        :rtype: int
        """
        if self.p != -1:
            return self.p
        self.p = self.iterator.next()
        return self.p

    def next(self):
        """
        :rtype: int
        """
        if self.p != -1:
            ans = self.p
            self.p = -1
            return ans
        return self.iterator.next()

    def hasNext(self):
        """
        :rtype: bool
        """
        return self.p != -1 or self.iterator.hasNext()
        

# Your PeekingIterator object will be instantiated and called as such:
# iter = PeekingIterator(Iterator(nums))
# while iter.hasNext():
#     val = iter.peek()   # Get the next element but not advance the iterator.
#     iter.next()         # Should return the same value as [val].
