class Solution {
    public String crackSafe(int n, int k) {
        int keys = (int)Math.pow(k, n);
        StringBuilder sb = new StringBuilder();
        Set<String> set = new HashSet<>();
        for (int i = 0; i < n; i++) {
            sb.append('0');
        }
        set.add(sb.toString());
        if (dfs(set, sb, keys, n, k)) {
            return sb.toString();
        }
        return "";
    }
    private boolean dfs(Set<String> set, StringBuilder sb, int keys, int n, int k) {
        if (set.size() == keys) {
            return true;
        }
        String pre = sb.substring(sb.length()-n + 1, sb.length());
        for (char c = '0'; c < '0' + k; c++) {
            String key = pre + c;
            if (!set.contains(key)) {
                sb.append(c);
                set.add(key);
                if (dfs(set, sb, keys, n, k)) {
                    return true;
                }
                set.remove(key);
                sb.deleteCharAt(sb.length()-1);
            }
        }
        return false;
    }
}
