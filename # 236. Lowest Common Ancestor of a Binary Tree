package com.leetcode.problems;

import com.leetcode.model.TreeNode;

public class Question236 {
	class Solution {
		TreeNode ans = null;

		public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
			dfs(root, p, q);
			return ans;
		}

		private boolean[] dfs(TreeNode node, TreeNode p, TreeNode q) {
			if (node == null)
				return new boolean[2];
			boolean[] left = dfs(node.left, p, q), right = dfs(node.right, p, q);
			boolean[] rec = new boolean[2];
			rec[0] = left[0] || right[0] || node.val == p.val;
			rec[1] = left[1] || right[1] || node.val == q.val;
			if (rec[0] && rec[1] && ans == null)
				ans = node;
			return rec;
		}
	}
}


from data.TreeNode import TreeNode


class Solution1:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def dfs(node):
            if not node:
                return [False, False, None]
            lef = dfs(node.left)
            rig = dfs(node.right)
            cur = []
            cur.append(lef[0] or rig[0] or node == p)
            cur.append(lef[1] or rig[1] or node == q)
            if lef[2]:
                cur.append(lef[2])
            elif rig[2]:
                cur.append(rig[2])
            elif cur[0] and cur[1]:
                cur.append(node)
            else:
                cur.append(None)
            return cur
        return dfs(root)[2]


class Solution2:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        def dfs(node):
            if not node:
                return None
            if node == p or node == q:
                return node
            l = dfs(node.left)
            r = dfs(node.right)
            if l and r:
                return node
            return l if l else r
        return dfs(root)

