package com.leetcode.problems;

import java.util.Arrays;

public class Question34 {
	class Solution1 {
		public int[] searchRange(int[] nums, int target) {
			if (nums == null || nums.length == 0) {
				return new int[] { -1, -1 };
			}
			int left = findLeft(nums, target);
			int right = findRight(nums, target);
			return new int[] { left, right };
		}

		private final int findLeft(int[] nums, int target) {
			int position = -1;
			int left = 0, right = nums.length - 1;
			while (left < right) {
				int middle = left + (right - left) / 2;
				if (nums[middle] == target) {
					if (middle > 0 && nums[middle - 1] == target) {
						right = middle - 1;
					} else {
						return middle;
					}
				} else if (nums[middle] < target) {
					left = middle + 1;
				} else {
					right = middle;
				}
			}
			if (nums[left] == target) {
				position = left;
			}
			return position;
		}

		private final int findRight(int[] nums, int target) {
			int position = -1;
			int left = 0, right = nums.length - 1;
			while (left < right) {
				int middle = left + (right - left) / 2;
				if (nums[middle] == target) {
					if (middle < nums.length - 1 && nums[middle + 1] == target) {
						left = middle + 1;
					} else {
						return middle;
					}
				} else if (nums[middle] < target) {
					left = left + 1;
				} else {
					right = middle;
				}
			}
			if (nums[right] == target) {
				position = right;
			}
			return position;
		}
	}

	class Solution2 {
		public int[] searchRange(int[] nums, int target) {
			int[] ans = new int[2];
			Arrays.fill(ans, -1);
			for (int i = 0; i < nums.length; i++) {
				if (nums[i] == target) {
					ans[0] = i;
					break;
				}
			}
			for (int i = nums.length - 1; i >= 0; i--) {
				if (nums[i] == target) {
					ans[1] = i;
					break;
				}
			}
			return ans;
		}
	}
}
