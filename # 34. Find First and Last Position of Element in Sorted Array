class Solution {
	public int[] searchRange(int[] nums, int target) {
		int l = 0, r = nums.length;
		while (l < r) {
			int mid = (l + r) / 2;
			if (nums[mid] == target) {
				int lt = mid, rt = mid;
				while (lt >= 0 && nums[lt] == target) {
					lt--;
				}
				while (rt < nums.length && nums[rt] == target) {
					rt++;
				}
				return new int[] { lt + 1, rt - 1 };
			} else if (nums[mid] < target) {
				l = mid + 1;
			} else {
				r = mid;
			}
		}
		return new int[] { -1, -1 };
	}
}



class Solution {
    public int[] searchRange(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return new int[]{-1, -1};
        }
        int left = 0, right = nums.length;
        int index1 = -1, index2 = -1;
        while (left < right) {
            int mid = (left + right) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid;
            } else {
                if (mid - 1 >= 0 && nums[mid - 1] == target) {
                    right = mid;
                } else {
                    index1 = mid;
                    break;
                }
            }
        }
        left = 0; right = nums.length;
        while (left < right) {
            int mid = (left + right) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid;
            } else {
                if (mid + 1 <  nums.length && nums[mid + 1] == target) {
                    left = mid + 1;
                } else {
                    index2 = mid;
                    break;
                }
            }
        }
        return new int[] {index1, index2};
    }
}
