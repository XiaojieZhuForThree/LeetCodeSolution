package com.leetcode.problems;

public class Question198 {
	class Solution1 {
		public int rob(int[] nums) {
			if (nums == null || nums.length == 0) {
				return 0;
			}
			int[] dp = new int[nums.length + 1];
			dp[1] = nums[0];
			for (int i = 2; i <= nums.length; i++) {
				dp[i] = Math.max(dp[i - 1], dp[i - 2] + nums[i - 1]);
			}
			int ans = 0;
			for (int i : dp) {
				ans = Math.max(ans, i);
			}
			return ans;
		}
	}

	class Solution2 {
		public int rob(int[] nums) {
			if (nums == null || nums.length == 0) {
				return 0;
			}
			int take = 0, noTake = 0;
			for (int i : nums) {
				int temp = noTake;
				noTake = Math.max(noTake, take);
				take = temp + i;
			}
			return Math.max(take, noTake);
		}
	}

	class Solution3 {
		public int rob(int[] nums) {
			if (nums == null || nums.length == 0) {
				return 0;
			}

			int n = nums.length;
			if (n == 1) {
				return nums[0];
			}
			nums[1] = Math.max(nums[0], nums[1]);
			for (int i = 2; i < n; i++) {
				nums[i] = Math.max(nums[i] + nums[i - 2], nums[i - 1]);
			}
			return Math.max(nums[n - 1], nums[n - 2]);
		}
	}
}


#include <vector>
using namespace std;

class Solution {
public:
    int rob(vector<int>& nums) {
        if (nums.size() < 2) return nums[0];
        int n = nums.size();
        nums[1] = max(nums[0], nums[1]);
        for (int i = 2; i < nums.size(); i++) {
            nums[i] = max(nums[i - 1], nums[i] + nums[i - 2]);
        }
        return max(nums[n - 1], nums[n - 2]);
    }
};


#include <vector>
using std::vector;

class Solution {
public:
	int rob(vector<int>& nums) {
		if (size(nums) == 1) return nums[0];
		nums[1] = std::max(nums[0], nums[1]);
		for (int i = 2; i < size(nums); i++) {
			nums[i] = std::max(nums[i] + nums[i - 2], nums[i - 1]);
		}
		return std::max(nums[size(nums) - 1], nums[size(nums) - 2]);
	}
};
