package com.leetcode.problems;

import com.leetcode.api.TreeNode;

public class Question623 {
	class Solution {
		public TreeNode addOneRow(TreeNode root, int v, int d) {
			if (d == 1) {
				TreeNode node = new TreeNode(v);
				node.left = root;
				return node;
			}
			dfs(root, 1, v, d);
			return root;
		}

		private void dfs(TreeNode node, int cur, int v, int d) {
			if (node == null) {
				return;
			}
			if (cur == d - 1) {
				TreeNode left = node.left, right = node.right;
				node.left = new TreeNode(v);
				node.right = new TreeNode(v);
				node.left.left = left;
				node.right.right = right;
			} else {
				dfs(node.left, cur + 1, v, d);
				dfs(node.right, cur + 1, v, d);
			}
		}
	}
}


#include "TreeNode.h"
#include <deque>
using namespace std;

class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if (depth == 1) {
            TreeNode* node = new TreeNode(val);
            node->left = root;
            return node;
        }
        else {
            deque<TreeNode*> queue;
            queue.push_back(root);
            int start = 1;
            while (start < depth - 1) {
                for (int i = queue.size(); i > 0; i--) {
                    TreeNode* cur = queue.front();
                    queue.pop_front();
                    if (cur->left) queue.push_back(cur->left);
                    if (cur->right) queue.push_back(cur->right);
                }
                start++;
            }
            while (!queue.empty()) {
                TreeNode* cur = queue.front();
                queue.pop_front();
                TreeNode* nl = new TreeNode(val);
                TreeNode* nr = new TreeNode(val);
                nl->left = cur->left;
                nr->right = cur->right;
                cur->left = nl;
                cur->right = nr;
            }
            return root;
        }
    }
};


#include "TreeNode.h"

class Solution {
public:
    TreeNode* addOneRow(TreeNode* root, int val, int depth) {
        if (depth == 1) {
            TreeNode* n = new TreeNode(val);
            n->left = root;
            return n;
        }
        helper(root, 1, val, depth);
        return root;
    }
private:
    void helper(TreeNode* node, int cur, int val, int depth) {
        if (!node || cur >= depth) return;
        if (cur == depth - 1) {
            TreeNode* l = new TreeNode(val), * r = new TreeNode(val);
            l->left = node->left;
            r->right = node->right;
            node->left = l;
            node->right = r;
            return;
        }
        helper(node->left, cur + 1, val, depth);
        helper(node->right, cur + 1, val, depth);
    }
};
