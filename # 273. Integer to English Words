class Solution {
    public String numberToWords(int num) { 
        if (num == 0) return "Zero";
        return helper(num, 0).trim();
    }
    
    public String helper(int num, int index) {
        String[] strs = {"Billion", "Million", "Thousand", "Hundred", "Ninety", "Eighty", "Seventy",
                        "Sixty", "Fifty", "Forty", "Thirty", "Twenty", "Nineteen", "Eighteen",
                        "Seventeen", "Sixteen", "Fifteen", "Fourteen", "Thirteen", "Twelve", "Eleven",
                        "Ten", "Nine", "Eight", "Seven", "Six", "Five", "Four", "Three", "Two", "One"};
        int[] nums = {1000000000, 1000000, 1000, 100, 90, 80, 70, 60, 50, 40, 30, 20, 19, 18, 17,
                     16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1};
        
        StringBuilder build = new StringBuilder();
        
        for (int i = index; i < nums.length; i++) {
            if (num / nums[i] > 0) {
                if (num >= 100) 
                    build.append(helper(num / nums[i], i + 1));
                build.append(strs[i]);
                build.append(" ");
                num = num % nums[i];
            } 

        }

        return build.toString();
    }
}



class Solution {
            
    String[] nums = new String[] {"Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", 
                                     "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", 
                                     "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
    String[] tens = new String[] {"", "", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        
    public String less100(int num) {
            if (num < 20) {
                return nums[num];
            }
            StringBuilder sb = new StringBuilder();
            sb.append(tens[num / 10]);
            if (num % 10 != 0) {
                sb.append(" ");
                sb.append(nums[num % 10]);
            }
            return sb.toString().trim();
        }
    
    public String numberToWords(int num) {
        if (num < 100) return less100(num);
        StringBuilder ans = new StringBuilder();
        if (num >= 1000000000) {
            ans.append(numberToWords(num / 1000000000) + " Billion ");
            num %= 1000000000;
        }
        if (num >= 1000000) {
            ans.append(numberToWords(num / 1000000) + " Million ");
            num %= 1000000;            
        }
        if (num >= 1000) {
            ans.append(numberToWords(num / 1000) + " Thousand ");
            num %= 1000;            
        }
        if (num >= 100) {
            ans.append(numberToWords(num / 100) + " Hundred ");
            num %= 100;            
        }
        if (num != 0) {
            ans.append(less100(num));
        }
        return ans.toString().trim();
    }
}


class Solution {
    public String numberToWords(int num) {
        if (num == 0) {
            return "Zero";
        }
        String[] decs = new String[]{"Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen"};
        String[] singles = new String[]{"One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten"};
        String[] bigger = new String[] {"Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety"};
        List<String> sb = new ArrayList();
        if (num >= 1000000000) {
            sb.add(numberToWords(num / 1000000000));
            sb.add("Billion");
            num %= 1000000000;
        } if (num >= 1000000) {
            sb.add(numberToWords(num / 1000000));
            sb.add("Million");
            num %= 1000000;
        } if (num >= 1000) {
            sb.add(numberToWords(num / 1000));
            sb.add("Thousand");
            num %= 1000;
        } if (num >= 100) {
            sb.add(numberToWords(num / 100));
            sb.add("Hundred");
            num %= 100;
        } if (num >= 20) {
            sb.add(bigger[(num / 10) - 2]);
            if (num % 10 != 0) {
                sb.add(numberToWords(num % 10));                
            }
        } else if (num > 10) {
            sb.add(decs[num-11]);
        } else if (num > 0) {
            sb.add(singles[num - 1]);
        }
        return String.join(" ", sb);
    }
}



#include <string>
#include <vector>
using std::string;

class Solution {
public:
    string numberToWords(int num) {
        if (num == 0) return "Zero";
        std::vector<string> decs = { "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
        std::vector<string> singles = { "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten" };
        std::vector<string> bigger = { "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };
        std::vector<string> v;
        if (num >= 1000000000) {
            v.push_back(numberToWords(num / 1000000000));
            v.push_back("Billion");
            num %= 1000000000;
        } if (num >= 1000000) {
            v.push_back(numberToWords(num / 1000000));
            v.push_back("Million");
            num %= 1000000;
        } if (num >= 1000) {
            v.push_back(numberToWords(num / 1000));
            v.push_back("Thousand");
            num %= 1000;
        } if (num >= 100) {
            v.push_back(numberToWords(num / 100));
            v.push_back("Hundred");
            num %= 100;
        } if (num >= 20) {
            v.push_back(bigger[(num / 10) - 2]);
            if (num % 10 != 0) {
                v.push_back(numberToWords(num % 10));
            }
        }
        else if (num > 10) {
            v.push_back(decs[num - 11]);
        }
        else if (num > 0) {
            v.push_back(singles[num - 1]);
        }
        string ans;
        for (int i = 0; i < size(v) - 1; i++) {
            ans += v[i];
            ans += ' ';
        }
        ans += v[size(v) - 1];
        return ans;
    }
};
