package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Stack;

import com.leetcode.api.TreeNode;

public class Question971 {
	class Solution1 {
		public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
			List<Integer> ans = new ArrayList<>();
			if (root == null) {
				return ans;
			}
			Stack<TreeNode> stack = new Stack<>();
			stack.push(root);
			int i = 0;
			while (!stack.isEmpty()) {
				TreeNode node = stack.pop();
				if (node.val != voyage[i++]) {
					return Arrays.asList(-1);
				}
				if (node.right != null && node.right.val == voyage[i]) {
					if (node.left != null) {
						ans.add(node.val);
						stack.add(node.left);
						stack.add(node.right);
					} else {
						stack.add(node.right);
					}
				} else {
					if (node.right != null) {
						stack.add(node.right);
					}
					if (node.left != null) {
						stack.add(node.left);
					}
				}
			}
			return ans;
		}
	}

	class Solution2 {
		List<Integer> ans = new ArrayList<>();
		int index = 0;

		public List<Integer> flipMatchVoyage(TreeNode root, int[] voyage) {
			dfs(root, voyage);
			if (!ans.isEmpty() && ans.get(0) == -1) {
				return List.of(-1);
			}
			return ans;
		}

		private void dfs(TreeNode node, int[] voyage) {
			if (node == null) {
				return;
			}
			if (node.val != voyage[index]) {
				ans.clear();
				ans.add(-1);
			} else if (node.left != null && node.left.val != voyage[index + 1]) {
				index++;
				ans.add(node.val);
				dfs(node.right, voyage);
				dfs(node.left, voyage);
			} else {
				index++;
				dfs(node.left, voyage);
				dfs(node.right, voyage);
			}

		}
	}
}
