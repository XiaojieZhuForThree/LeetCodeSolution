package problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.TreeMap;

public class Question347 {
	class Solution1 {
		public int[] topKFrequent(int[] nums, int k) {
			int[] ans = new int[k];
			Map<Integer, Integer> freq = new HashMap<>();
			for (int i : nums) {
				freq.put(i, freq.getOrDefault(i, 0) + 1);
			}
			List<Integer>[] list = new List[nums.length + 1];
			for (int key : freq.keySet()) {
				int f = freq.get(key);
				if (list[f] == null) {
					list[f] = new ArrayList<>();
				}
				list[f].add(key);
			}
			int j = 0;
			for (int i = nums.length; i >= 0; i--) {
				if (list[i] != null) {
					for (int m : list[i]) {
						if (j == k) {
							return ans;
						}
						ans[j++] = m;
					}
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public int[] topKFrequent(int[] nums, int k) {
			int[] ans = new int[k];
			Map<Integer, Integer> freq = new HashMap<>();
			for (int i : nums) {
				freq.put(i, freq.getOrDefault(i, 0) + 1);
			}
			TreeMap<Integer, List<Integer>> bucket = new TreeMap<>((a, b) -> b - a);
			for (int key : freq.keySet()) {
				int f = freq.get(key);
				bucket.putIfAbsent(f, new ArrayList<>());
				bucket.get(f).add(key);
			}
			int t = 0;
			for (int i : bucket.keySet()) {
				for (int j : bucket.get(i)) {
					if (t == k) {
						return ans;
					}
					ans[t++] = j;
				}
			}
			return ans;
		}
	}

	class Solution3 {
		public int[] topKFrequent(int[] nums, int k) {
			int[] ans = new int[k];
			Map<Integer, Integer> freq = new HashMap<>();
			for (int i : nums) {
				freq.put(i, freq.getOrDefault(i, 0) + 1);
			}
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> freq.get(a) - freq.get(b));

			for (int i : freq.keySet()) {

				pq.offer(i);
				if (pq.size() > k) {
					pq.poll();
				}
			}
			int j = 0;
			while (!pq.isEmpty()) {
				ans[j++] = pq.poll();
			}
			return ans;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Sat Apr  9 11:52:57 2022

@author: xiaoj
"""
from typing import List
from collections import Counter
import heapq

class Solution:
    def topKFrequent(self, nums: List[int], k: int) -> List[int]:
        _map = Counter(nums)
        queue = []
        heapq.heapify(queue)
        for key, val in _map.items():
            heapq.heappush(queue, (val, key))
            if len(queue) > k:
                heapq.heappop(queue)
        ans = []
        for i in queue:
            ans.append(i[1])
        return ans


#include <vector>
#include <unordered_map>
using namespace std;

class Solution {
public:
	vector<int> topKFrequent(vector<int>& nums, int k) {
		unordered_map<int, int> map;
		int bound = 0;
		for (int i : nums) {
			map[i]++;
			bound = max(bound, map[i]);
		}
		vector<vector<int>> c(bound + 1);
		for (auto& p : map) c[p.second].push_back(p.first);
		vector<int> ans;
		int i = 0;
		while (i < k) {
			for (int j = bound; j >= 0; j--) {
				if (c[j].empty()) continue;
				for (int t = 0; t < size(c[j]); t++) {
					if (i == k) break;
					ans.push_back(c[j][t]);
					i++;
				}
				if (i == k) break;
			}
		}
		return ans;
	}
};
