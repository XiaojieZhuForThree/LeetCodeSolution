class Solution {
    public boolean canCross(int[] stones) {
        int N = stones.length;
        boolean[][] dp = new boolean[N][N+1];
        dp[0][1] = true;
        
        for (int i = 1; i < N; i++) {
            for (int j = 0; j < i; j++) {
                int diff = stones[i] - stones[j];
                if (diff < 0 || diff > N || !dp[j][diff]) {
                    continue;
                }
                dp[i][diff] = true;
                if (diff - 1 >= 0) {
                    dp[i][diff - 1] = true;
                }
                if (diff + 1 <= N) {
                    dp[i][diff + 1] = true;
                }
                if (i == N - 1) {
                    return true;
                }
            }
        }
        return false;
    }
}


class Solution {
    public boolean canCross(int[] stones) {
        if (stones == null || stones.length == 0) {
            return true;
        }
        Map<Integer, HashSet<Integer>> map = new HashMap<Integer, HashSet<Integer>>();
        map.put(0, new HashSet<Integer>());
        map.get(0).add(1);
        for (int i = 1; i < stones.length; i++) {
            map.put(stones[i], new HashSet<Integer>());
        }
        for (int i = 0; i < stones.length - 1; i++) {
            int stone = stones[i];
            for (int step : map.get(stone)) {
                int reach = stone + step;
                if (reach == stones[stones.length-1]) {
                    return true;
                }
                if (map.containsKey(reach)) {
                    Set<Integer> set = map.get(reach);
                    set.add(step);
                    if (step - 1 > 0) {
                        set.add(step - 1);
                    }
                    set.add(step + 1);
                }
            }
        }
        return false;
    }
}
