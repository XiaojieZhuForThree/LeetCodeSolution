#include <vector>
#include <algorithm>
using namespace std;

class UF {
private:
	vector<int>parent;
	vector<int>rank;
public:
	UF(int n) {
		parent = vector<int>(n, 0);
		rank = vector<int>(n, 1);
		for (int i = 0; i < n; i++) parent[i] = i;
	}
	int find(int x) {
		if (x == parent[x]) return x;
		return parent[x] = find(parent[x]);
	}
	void merge(int x, int y) {
		if (rank[x] > rank[y]) {
			parent[y] = x;
			rank[x] += rank[y];
		}
		else {
			parent[x] = y;
			rank[y] += rank[x];
		}
	}
	bool is_connected(int x, int y) {
		return find(x) == find(y);
	}
};

class Solution {
public:
	vector<bool> distanceLimitedPathsExist(int n, vector<vector<int>>& nums, vector<vector<int>>& q) {
		UF uf(n);
		sort(nums.begin(), nums.end(), [&](auto& a, auto& b) {
			return a[2] < b[2];
			});
		for (int i = 0; i < q.size(); i++) {
			q[i].push_back(i);
		}
		sort(q.begin(), q.end(), [&](auto& a, auto& b) {
			return a[2] < b[2];
			});
		int i = 0;
		int X = nums.size();
		vector<bool> ans(q.size());
		for (auto it : q) {
			while (i < X && nums[i][2] < it[2]) {
				int p1 = uf.find(nums[i][0]);
				int p2 = uf.find(nums[i][1]);
				if (p1 != p2) uf.merge(p1, p2);
				i++;
			}
			ans[it[3]] = uf.is_connected(it[0], it[1]);
		}
		return ans;
	}
};
