package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Question1329 {
	class Solution {
		public int[][] diagonalSort(int[][] mat) {
			int m = mat.length, n = mat[0].length;
			List<Integer> list = new ArrayList<>();
			for (int i = n - 1; i >= 0; i--) {
				list.clear();
				int x = 0, y = i;
				while (x < m && y < n) {
					list.add(mat[x++][y++]);
				}
				Collections.sort(list);
				x = 0;
				y = i;
				for (int j = 0; j < list.size(); j++) {
					mat[x++][y++] = list.get(j);
				}
			}
			for (int i = 1; i < m; i++) {
				list.clear();
				int x = i, y = 0;
				while (x < m && y < n) {
					list.add(mat[x++][y++]);
				}
				Collections.sort(list);
				x = i;
				y = 0;
				for (int j = 0; j < list.size(); j++) {
					mat[x++][y++] = list.get(j);
				}
			}
			return mat;
		}
	}
}


from typing import List


class Solution:
    def diagonalSort(self, mat: List[List[int]]) -> List[List[int]]:
        m = len(mat)
        n = len(mat[0])
        for i in range(n):
            self.process(mat, 0, i)
        for i in range(1, m):
            self.process(mat, i, 0)
        return mat
    
    def process(self, mat, i, j):
        container = []
        m = len(mat)
        n = len(mat[0])
        x = i
        y = j
        while x < m and y < n:
            container.append(mat[x][y])
            x += 1
            y += 1
        container.sort()
        x = i
        y = j
        while x < m and y < n:
            mat[x][y] = container.pop(0)
            x += 1
            y += 1
        
