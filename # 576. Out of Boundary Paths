package com.leetcode.problems;

public class Question576 {
	public class Solution {
		public int findPaths(int m, int n, int N, int i, int j) {
			if (N <= 0)
				return 0;

			final int MOD = 1000000007;
			int[][] count = new int[m][n];
			count[i][j] = 1;
			int result = 0;

			int[][] dirs = { { -1, 0 }, { 1, 0 }, { 0, -1 }, { 0, 1 } };

			for (int step = 0; step < N; step++) {
				int[][] temp = new int[m][n];
				for (int r = 0; r < m; r++) {
					for (int c = 0; c < n; c++) {
						for (int[] d : dirs) {
							int nr = r + d[0];
							int nc = c + d[1];
							if (nr < 0 || nr >= m || nc < 0 || nc >= n) {
								result = (result + count[r][c]) % MOD;
							} else {
								temp[nr][nc] = (temp[nr][nc] + count[r][c]) % MOD;
							}
						}
					}
				}
				count = temp;
			}

			return result;
		}
	}
}


class Solution:
    def findPaths(self, m: int, n: int, maxMove: int, startRow: int, startColumn: int) -> int:
        seen = {}
        def dfs(x, y, cur):
            key = str([x, y, cur])
            if key in seen:
                return seen[key]
            ans = 0
            if x < 0 or x >= m or y < 0 or y >= n:
                if cur >= 0:
                    ans = 1
                else:
                    ans = 0
            elif cur < 0:
                ans = 0
            else:
                for d in [[1, 0], [-1, 0], [0, 1], [0, -1]]:
                    ans += dfs(x + d[0], y + d[1], cur - 1)
            seen[key] = ans % 1_000_000_007
            return seen[key]
        return dfs(startRow, startColumn, maxMove)



#include <vector>

class Solution {
public:
	std::vector<std::pair<int, int>> dirs = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
	std::vector<std::vector<std::vector<long long>>> dp;
	long long mod = 1000000007;

	int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
		dp = std::vector<std::vector<std::vector<long long>>>(m + 1, std::vector<std::vector<long long>>(n + 1, std::vector<long long>(maxMove + 1, -1)));
		return dfs(m, n, maxMove, startRow, startColumn);
	}
private:
	long long dfs(int m, int n, int cur, int r, int c) {
		if (r < 0 || r >= m || c < 0 || c >= n) return 1;
		if (cur == 0) return 0;
		if (dp[r][c][cur] != -1) return dp[r][c][cur];
		long long ans = 0;
		for (auto& p : dirs) {
			ans += dfs(m, n, cur - 1, r + p.first, c + p.second);
			ans %= mod;
		}
		dp[r][c][cur] = ans;
		return ans;
	}
};
