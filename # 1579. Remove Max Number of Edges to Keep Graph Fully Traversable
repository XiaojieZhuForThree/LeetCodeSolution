#include <unordered_map>
#include <algorithm>
using namespace std;

struct UF {
	unordered_map<int, int> parA, parB, cntA, cntB;
	UF(int n) {
		for (int i = 1; i <= n; i++) {
			parA[i] = i;
			parB[i] = i;
			cntA[i] = 1;
			cntB[i] = 1;
		}
	}
	int find(unordered_map<int, int>& par, int i) {
		if (par[i] == i) return i;
		return par[i] = find(par, par[i]);
	}
	void merge(unordered_map<int, int>& par, unordered_map<int, int>& cnt, int i, int j) {
		int pi = find(par, i), pj = find(par, j);
		if (pi == pj) return;
		if (pi < pj) {
			par[pj] = pi;
			cnt[pi] += cnt[pj];
		}
		else {
			par[pi] = pj;
			cnt[pj] += cnt[pi];
		}
	}
};

class Solution {
public:
	int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
		sort(edges.begin(), edges.end(), [](auto& a, auto& b) {
			return a[0] > b[0];
			});
		UF uf(n);
		int ans = 0;
		for (auto& e : edges) {
			int t = e[0], i = e[1], j = e[2];
			if (t == 3) {
				if (uf.find(uf.parA, i) == uf.find(uf.parA, j) && uf.find(uf.parB, i) == uf.find(uf.parB, j)) ans++;
				else {
					if (uf.find(uf.parA, i) != uf.find(uf.parA, j)) uf.merge(uf.parA, uf.cntA, i, j);
					if (uf.find(uf.parB, i) != uf.find(uf.parB, j)) uf.merge(uf.parB, uf.cntB, i, j);
				}
			}
			else if (t == 2) {
				if (uf.find(uf.parB, i) == uf.find(uf.parB, j)) ans++;
				else uf.merge(uf.parB, uf.cntB, i, j);
			}
			else {
				if (uf.find(uf.parA, i) == uf.find(uf.parA, j)) ans++;
				else uf.merge(uf.parA, uf.cntA, i, j);
			}
		}
		if (uf.cntA[1] < n || uf.cntB[1] < n) return -1;
		return ans;
	}
};
