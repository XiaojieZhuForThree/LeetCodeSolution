#include <unordered_map>
#include <vector>
#include <algorithm>
using std::vector;

struct UF {
    std::unordered_map<int, int> par;
    vector<int> checked;
    UF(int n) {
        for (int i = 1; i <= n; i++) par[i] = i;
        checked.resize(n, false);
    }
    int find(int a) {
        if (par[a] == a) return a;
        par[a] = find(par[a]);
        return par[a];
    }
    void merge(int a, int b) {
        checked[a - 1] = true;
        checked[b - 1] = true;
        int pa = find(a), pb = find(b);
        par[pb] = pa;
    }
    bool need(int a, int b) {
        return find(a) != find(b);
    }
    bool allChecked() {
        for (int i = 0; i < size(checked); i++) {
            if (find(i + 1) != find(1)) return false;
        }
        return true;
    }
};
class Solution {
public:
    int maxNumEdgesToRemove(int n, vector<vector<int>>& edges) {
        UF a(n), b(n);
        int ans = 0;
        sort(edges.begin(), edges.end(), [](vector<int>& a, vector<int>& b) {
            return a[0] > b[0];
            });
        for (auto& e : edges) {
            if (e[0] == 1) {
                if (!a.need(e[1], e[2])) ans++;
                else a.merge(e[1], e[2]);
            }
            else if (e[0] == 2) {
                if (!b.need(e[1], e[2])) ans++;
                else b.merge(e[1], e[2]);
            }
            else {
                if (!a.need(e[1], e[2]) && !b.need(e[1], e[2])) ans++;
                else {
                    a.merge(e[1], e[2]);
                    b.merge(e[1], e[2]);
                }
            }
        }
        if (a.allChecked() && b.allChecked()) return ans;
        return -1;
    }
};
