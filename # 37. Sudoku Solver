package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question37 {
	class Solution {
		List<Set<Integer>> rows = new ArrayList<>();
		List<Set<Integer>> cols = new ArrayList<>();
		List<Set<Integer>> sqrs = new ArrayList<>();

		public void solveSudoku(char[][] board) {
			int[][] digs = new int[9][9];
			for (int i = 0; i < board.length; i++) {
				for (int j = 0; j < board[0].length; j++) {
					if (board[i][j] == '.')
						continue;
					digs[i][j] = board[i][j] - '0';
				}
			}

			for (int i = 0; i < 9; i++) {
				Set<Integer> set = new HashSet<>();
				for (int j : digs[i]) {
					if (j == 0)
						continue;
					set.add(j);
				}
				rows.add(set);
			}

			for (int i = 0; i < 9; i++) {
				Set<Integer> set = new HashSet<>();
				for (int j = 0; j < 9; j++) {
					if (digs[j][i] == 0)
						continue;
					set.add(digs[j][i]);
				}
				cols.add(set);
			}

			for (int i = 0; i < 9; i += 3) {
				for (int j = 0; j < 9; j += 3) {
					Set<Integer> set = new HashSet<>();
					for (int m = i; m < i + 3; m++) {
						for (int n = j; n < j + 3; n++) {
							if (digs[m][n] == 0)
								continue;
							set.add(digs[m][n]);
						}
					}
					sqrs.add(set);
				}
			}
			dfs(digs);
			for (int i = 0; i < 9; i++) {
				for (int j = 0; j < 9; j++) {
					if (board[i][j] == '.')
						board[i][j] = (char) ((int) '0' + digs[i][j]);
				}
			}
			return;
		}

		private boolean dfs(int[][] digs) {
			boolean allFilled = true;
			for (int i = 0; i < 9; i++) {
				for (int j = 0; j < 9; j++) {
					if (digs[i][j] != 0)
						continue;
					allFilled = false;
					for (int k = 1; k <= 9; k++) {
						if (rows.get(i).contains(k) || cols.get(j).contains(k)
								|| sqrs.get((i / 3) * 3 + (j / 3)).contains(k))
							continue;
						digs[i][j] = k;
						rows.get(i).add(k);
						cols.get(j).add(k);
						sqrs.get((i / 3) * 3 + (j / 3)).add(k);
						if (dfs(digs))
							return true;
						rows.get(i).remove(k);
						cols.get(j).remove(k);
						sqrs.get((i / 3) * 3 + (j / 3)).remove(k);
						digs[i][j] = 0;
					}
					if (digs[i][j] == 0)
						return false;
				}
			}
			return allFilled;
		}
	}
}
