#include<string>
#include <vector>

using std::string;

class Solution {
public:
    int strangePrinter(string s) {
        int n = size(s);
        std::vector<std::vector<int>> dp(n, std::vector<int>(n, 100));
        for (int i = 0; i < n; i++) dp[i][i] = 1;
        for (int t = 2; t <= n; t++) {
            for (int i = 0; i + t <= n; i++) {
                int j = i + t - 1;
                dp[i][j] = 1 + dp[i + 1][j];
                for (int k = i + 1; k <= j; k++) {
                    if (s[k] == s[i]) dp[i][j] = std::min(dp[i][j], dp[i][k - 1] + (k + 1 > j ? 0 : dp[k + 1][j]));
                }
            }
        }
        return dp[0][n - 1];
    }
};


#include<string>
#include <vector>
using std::string;
using std::vector;

class Solution {
public:
    int strangePrinter(string s) {
        int n = size(s);
        vector<vector<int>> dp(n, vector<int>(n, 100));
        for (int i = 0; i < n; i++) dp[i][i] = 1;
        for (int t = 2; t <= n; t++) {
            for (int i = 0; i + t <= n; i++) {
                int j = i + t - 1;
                dp[i][j] = 1 + dp[i + 1][j];
                for (int k = i + 1; k <= j; k++) {
                    if (s[k] == s[i]) dp[i][j] = std::min(dp[i][j], dp[i][k - 1] + (k + 1 > j ? 0 : dp[k + 1][j]));
                }
            }
        }
        return dp[0][n - 1];
    }
};
