package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question721 {
	class Solution {
		public List<List<String>> accountsMerge(List<List<String>> accounts) {
			int[] pars = new int[accounts.size()];

			Map<Integer, String> map = new HashMap<>();
			Map<String, Integer> records = new HashMap<>();
			Map<Integer, List<String>> groups = new HashMap<>();

			List<List<String>> ans = new ArrayList<>();
			for (int i = 0; i < pars.length; i++)
				pars[i] = i;
			for (int i = 0; i < accounts.size(); i++) {
				List<String> acc = accounts.get(i);
				map.put(i, acc.get(0));
				for (int j = 1; j < acc.size(); j++) {
					String em = acc.get(j);
					if (records.containsKey(em)) {
						int par1 = getPar(pars, i), par2 = getPar(pars, records.get(em));
						pars[par1] = par2;
					} else {
						records.put(em, i);
					}
				}
			}

			for (String record : records.keySet()) {
				int ppl = getPar(pars, records.get(record));
				groups.putIfAbsent(ppl, new ArrayList<>());
				groups.get(ppl).add(record);
			}
			for (int ppl : groups.keySet()) {
				List<String> list = new ArrayList<>();
				list.add(map.get(ppl));
				Collections.sort(groups.get(ppl));
				list.addAll(groups.get(ppl));
				ans.add(list);
			}
			return ans;
		}

		private int getPar(int[] pars, int i) {
			if (pars[i] != i) {
				pars[i] = getPar(pars, pars[i]);
			}
			return pars[i];
		}
	}
}
