package com.leetcode.problems;

import java.util.Arrays;

public class Question188 {
	class Solution {
		public int maxProfit(int k, int[] prices) {
			if (k > prices.length / 2) {
				return getMaxProfit(prices);
			}
			int[] buys = new int[k + 1], sells = new int[k + 1];
			Arrays.fill(buys, Integer.MIN_VALUE);
			for (int price : prices) {
				for (int i = 1; i <= k; i++) {
					buys[i] = Math.max(buys[i], sells[i - 1] - price);
					sells[i] = Math.max(sells[i], buys[i] + price);
				}
			}
			return sells[k];
		}

		private int getMaxProfit(int[] prices) {
			int val = 0;
			for (int i = 1; i < prices.length; i++) {
				if (prices[i] > prices[i - 1]) {
					val += prices[i] - prices[i - 1];
				}
			}
			return val;
		}
	}

	class Solution2 {
		Integer[][] dp;

		public int maxProfit(int k, int[] prices) {
			if (k == 0) {
				return 0;
			}
			if (prices == null || prices.length == 0) {
				return 0;
			}
			int n = prices.length;
			if (k > n / 2) {
				return getMaxProfit(prices, n - 1);
			}
			dp = new Integer[n][k + 1];
			return helper(prices, n - 1, k);
		}

		private int helper(int[] prices, int i, int k) {
			if (i <= 0 || k <= 0) {
				return 0;
			}

			if (dp[i][k] != null) {
				return dp[i][k];
			}
			int val = helper(prices, i - 1, k);
			for (int j = i - 1; j >= 0; j--) {
				if (prices[j] < prices[i]) {
					val = Math.max(val, helper(prices, j - 1, k - 1) + prices[i] - prices[j]);
				}
			}
			dp[i][k] = val;
			return val;
		}

		private int getMaxProfit(int[] prices, int i) {
			int val = 0;
			int sell = prices[0];
			for (int j = 1; j <= i; j++) {
				if (prices[j] > prices[j - 1]) {
					continue;
				}
				val += prices[j - 1] - sell;
				sell = prices[j];
			}
			val += prices[i] - sell;
			return val;
		}
	}
}
