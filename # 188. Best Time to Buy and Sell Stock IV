package com.leetcode.problems;

public class Question188 {
	class Solution1 {
		public int maxProfit(int k, int[] prices) {
			if (k > prices.length / 2) {
				return maxP(prices);
			}
			int[][] hold = new int[prices.length][k + 1];
			int[][] unhold = new int[prices.length][k + 1];
			hold[0][0] = -prices[0];
			for (int i = 1; i < prices.length; i++)
				hold[i][0] = Math.max(hold[i - 1][0], -prices[i]);
			for (int j = 1; j <= k; j++)
				hold[0][j] = -prices[0];
			for (int i = 1; i < prices.length; i++) {
				for (int j = 1; j <= k; j++) {
					hold[i][j] = Math.max(unhold[i - 1][j] - prices[i], hold[i - 1][j]);
					unhold[i][j] = Math.max(hold[i - 1][j - 1] + prices[i], unhold[i - 1][j]);
				}
			}
			return Math.max(hold[prices.length - 1][k], unhold[prices.length - 1][k]);
		}

		public int maxP(int[] prices) {
			int res = 0;
			for (int i = 0; i < prices.length; i++) {
				if (i > 0 && prices[i] > prices[i - 1]) {
					res += prices[i] - prices[i - 1];
				}
			}
			return res;
		}
	}

	class Solution2 {
		Integer[][] dp;

		public int maxProfit(int k, int[] prices) {
			if (k == 0) {
				return 0;
			}
			if (prices == null || prices.length == 0) {
				return 0;
			}
			int n = prices.length;
			if (k > n / 2) {
				return getMaxProfit(prices, n - 1);
			}
			dp = new Integer[n][k + 1];
			return helper(prices, n - 1, k);
		}

		private int helper(int[] prices, int i, int k) {
			if (i <= 0 || k <= 0) {
				return 0;
			}

			if (dp[i][k] != null) {
				return dp[i][k];
			}
			int val = helper(prices, i - 1, k);
			for (int j = i - 1; j >= 0; j--) {
				if (prices[j] < prices[i]) {
					val = Math.max(val, helper(prices, j - 1, k - 1) + prices[i] - prices[j]);
				}
			}
			dp[i][k] = val;
			return val;
		}

		private int getMaxProfit(int[] prices, int i) {
			int val = 0;
			int sell = prices[0];
			for (int j = 1; j <= i; j++) {
				if (prices[j] > prices[j - 1]) {
					continue;
				}
				val += prices[j - 1] - sell;
				sell = prices[j];
			}
			val += prices[i] - sell;
			return val;
		}
	}
}
