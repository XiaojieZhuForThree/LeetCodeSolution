package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Queue;

public class Question821 {
	class Solution1 {
		public int[] shortestToChar(String s, char c) {
			Queue<Integer> queue = new ArrayDeque<>();
			for (int i = 0; i < s.length(); i++) {
				if (s.charAt(i) == c) {
					queue.offer(i);
				}
			}
			int left = -1, right = queue.poll();
			int[] ans = new int[s.length()];
			for (int i = 0; i < s.length(); i++) {
				char ch = s.charAt(i);
				if (ch == c) {
					ans[i] = 0;
					left = i;
					if (!queue.isEmpty()) {
						right = queue.poll();
					} else {
						right = -1;
					}
				} else {
					if (left == -1) {
						ans[i] = right - i;
					} else if (right == -1) {
						ans[i] = i - left;
					} else {
						ans[i] = Math.min(i - left, right - i);
					}
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public int[] shortestToChar(String s, char c) {
			int pos = -1;
			int[] ans = new int[s.length()];
			for (int i = 0; i < s.length(); i++) {
				char ch = s.charAt(i);
				if (ch == c) {
					ans[i] = 0;
					pos = i;
				} else {
					if (pos == -1) {
						ans[i] = Integer.MAX_VALUE;
					} else {
						ans[i] = i - pos;
					}
				}
			}
			pos = -1;
			for (int i = s.length() - 1; i >= 0; i--) {
				char ch = s.charAt(i);
				if (ch == c) {
					ans[i] = 0;
					pos = i;
				} else {
					if (pos == -1) {
						continue;
					} else {
						ans[i] = Math.min(ans[i], pos - i);
					}
				}
			}
			return ans;
		}
	}
}
