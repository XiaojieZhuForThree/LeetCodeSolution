package com.leetcode.problems;

public class Question1706 {
	class Solution {
		public int[] findBall(int[][] grid) {
			int n = grid[0].length;
			int[] ans = new int[grid[0].length];
			for (int i = 0; i < n; i++) {
				ans[i] = dfs(grid, 0, i);
			}
			return ans;
		}

		private int dfs(int[][] grid, int row, int col) {
			int m = grid.length, n = grid[0].length;
			if (row == m - 1) {
				if (grid[row][col] == 1) {
					if (col + 1 == n)
						return -1;
					if (grid[row][col + 1] == -1)
						return -1;
					return col + 1;
				} else {
					if (col - 1 < 0)
						return -1;
					if (grid[row][col - 1] == 1)
						return -1;
					return col - 1;
				}
			}
			if (grid[row][col] == 1) {
				if (col + 1 == n)
					return -1;
				if (grid[row][col + 1] == -1)
					return -1;
				return dfs(grid, row + 1, col + 1);
			} else {
				if (col - 1 < 0)
					return -1;
				if (grid[row][col - 1] == 1)
					return -1;
				return dfs(grid, row + 1, col - 1);
			}
		}
	}
}


#include <vector>
#include <deque>
using namespace std;

class Solution {
public:
	struct ball {
		int idx;
		int x;
		int y;
	};
	vector<int> findBall(vector<vector<int>>& grid) {
		int m = grid.size(), n = grid[0].size();
		vector<int> ans(n, -1);
		deque<ball> queue;
		for (int i = 0; i < n; i++) queue.push_back({ i, 0, i });
		while (!queue.empty()) {
			for (int i = queue.size(); i > 0; i--) {
				ball cur = queue.front();
				queue.pop_front();
				int idx = cur.idx, x = cur.x, y = cur.y;
				if (x == m) ans[idx] = y;
				else if (isStuck(cur, grid)) continue;
				else {
					if (grid[x][y] == 1) queue.push_back({ idx, x + 1, y + 1 });
					else queue.push_back({ idx, x + 1, y - 1 });
				}
			}
		}
		return ans;
	}
private:
	bool isStuck(ball& ball, vector<vector<int>>& grid) {
		int m = grid.size(), n = grid[0].size();
		int x = ball.x, y = ball.y;
		if (y < 0 || y >= n) return true;
		if (grid[x][y] == 1) {
			if (y + 1 >= n || grid[x][y + 1] == -1) return true;
		}
		if (grid[x][y] == -1) {
			if (y - 1 < 0 || grid[x][y - 1] == 1) return true;
		}
		return false;
	}
};
