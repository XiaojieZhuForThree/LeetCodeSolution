package com.leetcode.problems;

public class Question1706 {
	class Solution {
		public int[] findBall(int[][] grid) {
			int n = grid[0].length;
			int[] ans = new int[grid[0].length];
			for (int i = 0; i < n; i++) {
				ans[i] = dfs(grid, 0, i);
			}
			return ans;
		}

		private int dfs(int[][] grid, int row, int col) {
			int m = grid.length, n = grid[0].length;
			if (row == m - 1) {
				if (grid[row][col] == 1) {
					if (col + 1 == n)
						return -1;
					if (grid[row][col + 1] == -1)
						return -1;
					return col + 1;
				} else {
					if (col - 1 < 0)
						return -1;
					if (grid[row][col - 1] == 1)
						return -1;
					return col - 1;
				}
			}
			if (grid[row][col] == 1) {
				if (col + 1 == n)
					return -1;
				if (grid[row][col + 1] == -1)
					return -1;
				return dfs(grid, row + 1, col + 1);
			} else {
				if (col - 1 < 0)
					return -1;
				if (grid[row][col - 1] == 1)
					return -1;
				return dfs(grid, row + 1, col - 1);
			}
		}
	}
}
