package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question329 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
		Map<Integer, Integer> map = new HashMap<>();

		public int longestIncreasingPath(int[][] matrix) {
			int ans = 0;
			for (int i = 0; i < matrix.length; i++) {
				for (int j = 0; j < matrix[0].length; j++) {
					ans = Math.max(ans, dfs(matrix, i, j));
				}
			}
			return ans;
		}

		private int dfs(int[][] matrix, int i, int j) {
			if (i < 0 || i >= matrix.length || j < 0 || j >= matrix[0].length) {
				return 0;
			}
			if (map.containsKey(i * matrix[0].length + j)) {
				return map.get(i * matrix[0].length + j);
			}
			int ans = 1;
			for (int[] dir : dirs) {
				int ni = dir[0] + i;
				int nj = dir[1] + j;
				if (ni < 0 || ni >= matrix.length || nj < 0 || nj >= matrix[0].length) {
					continue;
				}
				if (matrix[ni][nj] <= matrix[i][j]) {
					continue;
				}
				int oldVal = matrix[i][j];
				matrix[i][j] = Integer.MIN_VALUE;
				ans = Math.max(ans, 1 + dfs(matrix, ni, nj));
				matrix[i][j] = oldVal;
			}
			map.put(i * matrix[0].length + j, ans);
			return ans;
		}
	}
}


from typing import List


class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        longest = 0
        depthMap = {}
        m = len(matrix)
        n = len(matrix[0])
        def findDepth(row, col):
            if (row, col) in depthMap:
                return depthMap[(row, col)]
            maxDepth = 1
            num = matrix[row][col]
            for i, j in ((row, col+1), (row+1, col), (row, col-1), (row-1, col)):
                if 0 <= i < m and 0 <= j < n and matrix[i][j] > num:
                    maxDepth = max(maxDepth, findDepth(i, j)+1)
            depthMap[(row, col)] = maxDepth
            return maxDepth
                
        for i in range(m):
            for j in range(n):
                longest = max(longest, findDepth(i, j))
        return longest        
