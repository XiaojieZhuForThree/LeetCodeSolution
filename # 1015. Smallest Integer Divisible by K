package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question1015 {
	class Solution1 {
		public int smallestRepunitDivByK(int K) {
			int remainder = 1;
			for (int i = 1; i <= K; i++) {
				if (remainder % K == 0) {
					return i;
				}
				remainder %= K;
				remainder = remainder * 10 + 1;
			}
			return -1;
		}
	}

	class Solution2 {
		public int smallestRepunitDivByK(int K) {
			Set<Integer> seen = new HashSet<>();
			int remainder = 1, len = 1;
			while (!seen.contains(remainder)) {
				if (remainder % K == 0) {
					return len;
				}
				seen.add(remainder);
				remainder = (remainder % K) * 10 + 1;
				len++;
			}
			return -1;
		}
	}
}


class Solution {
public:
    int smallestRepunitDivByK(int k) {
        unordered_set<int> seen;
        int n = 1, len = 1;
        while (n % k != 0) {
            n = (n % k) * 10 + 1;
            len++;
            if (seen.count(n)) return -1;
            seen.insert(n);
        }
        return len;
    }
};
