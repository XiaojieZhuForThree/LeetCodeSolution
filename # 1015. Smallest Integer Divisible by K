package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question1015 {
	class Solution1 {
		public int smallestRepunitDivByK(int K) {
			if (K % 2 == 0 || K % 5 == 0)
				return -1;
			int r = 0;
			for (int N = 1; N <= K; ++N) {
				r = (r * 10 + 1) % K;
				if (r == 0)
					return N;
			}
			return -1;
		}
	}

	class Solution2 {
		public int smallestRepunitDivByK(int K) {
			Set<Integer> seen = new HashSet<>();
			int i = 1, len = 1, remainder = -1;
			while (!seen.contains(remainder)) {
				seen.add(remainder);
				remainder = i % K;
				if (remainder == 0) {
					return len;
				}
				len++;
				i = remainder * 10 + 1;
			}
			return -1;
		}
	}

	class Solution3 {
		public int smallestRepunitDivByK(int K) {
			int val = 1;
			for (int i = 1; i <= K; i++) {
				if (val % K == 0) {
					return i;
				}
				val = (val % K) * 10 + 1;
			}
			return -1;
		}
	}
}
