package problems;

public class Question1106 {
	class Solution {
		public boolean parseBoolExpr(String expression) {
			if (expression.equals("t")) {
				return true;
			}
			if (expression.equals("f")) {
				return false;
			}
			char c = expression.charAt(0);
			if (c == '!') {
				int i = 2;
				int complete = 1;
				while (complete != 0) {
					if (expression.charAt(i) == '(') {
						complete++;
					} else if (expression.charAt(i) == ')') {
						complete--;
					}
					i++;
				}
				return !parseBoolExpr(expression.substring(2, i - 1));
			}
			if (c == '|') {
				int complete = 0;
				int s = 2, j = 2;
				boolean val = false;
				while (j < expression.length()) {
					if (expression.charAt(j) == ',' && complete == 0) {
						String exp = expression.substring(s, j);
						val |= parseBoolExpr(exp);
						s = j + 1;
					} else if (expression.charAt(j) == '(') {
						complete++;
					} else if (expression.charAt(j) == ')') {
						complete--;
					}
					j++;
				}
				val |= parseBoolExpr(expression.substring(s, j - 1));
				return val;
			}
			if (c == '&') {
				int complete = 0;
				int s = 2, j = 2;
				boolean val = true;
				while (j < expression.length()) {
					if (expression.charAt(j) == ',' && complete == 0) {
						String exp = expression.substring(s, j);
						val &= parseBoolExpr(exp);
						s = j + 1;
					} else if (expression.charAt(j) == '(') {
						complete++;
					} else if (expression.charAt(j) == ')') {
						complete--;
					}
					j++;
				}
				val &= parseBoolExpr(expression.substring(s, j - 1));
				return val;
			}
			return false;
		}
	}
}


#include <string>
using std::string;

class Solution {
public:
    bool parseBoolExpr(string A) {
        if (A == "t") return true;
        if (A == "f") return false;
        string s = helper(A.substr(1, size(A) - 1));
        if (A[0] == '!') return !(parseBoolExpr(s));
        if (A[0] == '&') {
            bool base = true;
            int l = 0, r = 0, c = 0;
            while (r < size(s)) {
                if (s[r] == '(') c++;
                else if (s[r] == ')') c--;
                if (s[r] == ',' && c == 0) {
                    string cur = s.substr(l, r - l);
                    base &= parseBoolExpr(cur);
                    l = r + 1;
                }
                r++;
            }
            string cur = s.substr(l, r - l);
            base &= parseBoolExpr(cur);
            return base;
        }
        else {
            bool base = false;
            int l = 0, r = 0, c = 0;
            while (r < size(s)) {
                if (s[r] == '(') c++;
                else if (s[r] == ')') c--;
                if (s[r] == ',' && c == 0) {
                    string cur = s.substr(l, r - l);
                    base |= parseBoolExpr(cur);
                    l = r + 1;
                }
                r++;
            }
            string cur = s.substr(l, r - l);
            base |= parseBoolExpr(cur);
            return base;

        }
    }

private:
    string helper(string s) {
        int cnt = 0;
        for (int i = 0; i < size(s); i++) {
            if (s[i] == '(') cnt++;
            else if (s[i] == ')') cnt--;
            if (cnt == 0)
                return s.substr(1, i - 1);
        }
        return s.substr(1, size(s) - 2);
    }
};
