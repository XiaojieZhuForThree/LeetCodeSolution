import java.util.*;

class Solution {
	List<List<Integer>> ans = new ArrayList<>();

	private void getAns(int n, int k, int m, List<Integer> cur) {
		if (cur.size() == k) {
			ans.add(new ArrayList<Integer>(cur));
			return;
		}
		for (int i = m + 1; i <= n; i++) {
			cur.add(i);
			getAns(n, k, i, cur);
			cur.remove(cur.size() - 1);
		}
	}

	public List<List<Integer>> combine(int n, int k) {
		getAns(n, k, 0, new ArrayList<Integer>());
		return new ArrayList<>(ans);
	}
}


#include <vector>
#include <unordered_set>
using std::vector;

class Solution {
public:
	vector<vector<int>> combine(int n, int k) {
		vector<vector<int>> ans;
		vector<int> cur;
		std::unordered_set<int> seen;
		for (int i = 1; i <= n; i++) {
			cur.push_back(i);
			seen.insert(i);
			dfs(n, i, k, ans, cur, seen);
			seen.erase(i);
			cur.pop_back();
		}
		return ans;
	}

private:
	void dfs(int n, int i, int k, vector<vector<int>>& ans, vector<int>& cur, std::unordered_set<int>& seen) {
		if (size(cur) == k) {
			ans.push_back(vector<int>(cur));
			return;
		}
		for (int j = i + 1; j <= n; j++) {
			if (seen.count(j)) continue;
			seen.insert(j);
			cur.push_back(j);
			dfs(n, j, k, ans, cur, seen);
			cur.pop_back();
			seen.erase(j);
		}
	}
};
