package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question1029 {
	class Solution1 {
		public int twoCitySchedCost(int[][] costs) {
			PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (Integer.compare(a[0] - a[1], b[0] - b[1])));
			for (int[] cost : costs) {
				pq.offer(cost);
			}
			int val = 0;
			for (int i = 0; i < costs.length / 2; i++) {
				val += pq.poll()[0];
			}
			while (!pq.isEmpty()) {
				val += pq.poll()[1];
			}
			return val;
		}
	}

	class Solution2 {
		public int twoCitySchedCost(int[][] costs) {
			int n = costs.length / 2;
			int[][] dp = new int[n + 1][n + 1];
			for (int i = 1; i <= n; i++) {
				dp[i][0] = dp[i - 1][0] + costs[i - 1][0];
				dp[0][i] = dp[0][i - 1] + costs[i - 1][1];
			}
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= n; j++) {
					dp[i][j] = Math.min(dp[i][j - 1] + costs[i + j - 1][1], dp[i - 1][j] + costs[i + j - 1][0]);
				}
			}
			return dp[n][n];
		}
	}
}
