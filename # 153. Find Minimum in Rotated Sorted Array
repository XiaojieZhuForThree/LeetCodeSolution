package com.leetcode.problems;

public class Question153 {
	class Solution1 {
		public int findMin(int[] nums) {
			if (nums == null || nums.length == 0)
				return -1;
			int n = nums.length;
			if (n == 1)
				return nums[0];
			if (nums[0] < nums[n - 1])
				return nums[0];
			return binarySearch(nums, 0, n - 1);
		}

		private int binarySearch(int[] nums, int l, int r) {
			if (l == r)
				return nums[l];
			if (r == l + 1)
				return Math.min(nums[l], nums[r]);
			int m = l + (r - l) / 2;
			if (nums[m - 1] > nums[m] && nums[m + 1] > nums[m])
				return nums[m];
			return Math.min(binarySearch(nums, l, m - 1), binarySearch(nums, m + 1, r));
		}
	}
	
	class Solution2 {
	    public int findMin(int[] nums) {
	        int n = nums.length;
	        int l = 0, r = n - 1;
	        while (l < r) {
	            int m = l + (r - l) / 2;
	            if (nums[m] > nums[r]) l = m + 1;
	            else r = m;
	        }
	        return nums[l];
	    }
	}
}
