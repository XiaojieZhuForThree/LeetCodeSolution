class Solution {
public:
    ListNode* middleNode(ListNode* head) {
        ListNode *slow = head, *fast = head;
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }
        return slow;
    }
};

package com.leetcode.problems;

import com.leetcode.data.ListNode;

public class Problem876 {
	class Solution {
		public ListNode middleNode(ListNode head) {
			ListNode slow = head, fast = head;
			while (fast != null && fast.next != null) {
				slow = slow.next;
				fast = fast.next.next;
			}
			return slow;
		}
	}
}


#include "ListNode.h"

class Solution {
public:
	ListNode* middleNode(ListNode* head) {
		ListNode* s = head;
		ListNode* f = head;
		while (f && f->next) {
			s = s->next;
			f = f->next->next;
		}
		return s;
	}
};


#include "ListNode.h"

class Solution {
public:
	ListNode* middleNode(ListNode* head) {
		ListNode* s = head, * f = head;
		while (f && f->next) {
			s = s->next;
			f = f->next->next;
		}
		return s;
	}
};
