class Solution {
    public int[] assignBikes(int[][] workers, int[][] bikes) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                if (o1[0] != o2[0]) {
                    return o1[0] - o2[0];
                } else if (o1[1] != o2[1]) {
                    return o1[1] - o2[1];
                }
                return o1[2] - o2[2];
            }
        });
        for (int i = 0; i < workers.length; i++) {
            for (int j = 0; j < bikes.length; j++) {
                int man = Math.abs(workers[i][0]-bikes[j][0]) + Math.abs(workers[i][1]-bikes[j][1]);
                pq.offer(new int[]{man, i, j});
            }
        }
        int[] ans = new int[workers.length];
        int n = 0;
        Set<Integer> takenWorkers = new HashSet<>(), takenBikes = new HashSet<>();
        while (n < workers.length) {
            while (!checkValid(pq.peek(), takenWorkers, takenBikes)) {
                pq.poll();
            }
            int[] pair = pq.poll();
            ans[pair[1]] = pair[2];
            takenWorkers.add(pair[1]);
            takenBikes.add(pair[2]);
            n++;
        }
        return ans;
    }
    private boolean checkValid(int[] check, Set<Integer> takenWorkers, Set<Integer> takenBikes) {
        return !takenWorkers.contains(check[1]) && !takenBikes.contains(check[2]);
    }
}
