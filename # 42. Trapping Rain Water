class Solution {
    public int trap(int[] height) {
        int lo = 0;
        int hi = height.length - 1;
        int res = 0;
        int maxlo = 0;
        int maxhi = 0;
        
        while (lo < hi) {
            if (height[lo] < height[hi]) {
                if (height[lo] >= maxlo)  
                    maxlo = height[lo];
                else res += (maxlo - height[lo]);
                lo++;
            } else {
                if (height[hi] >= maxhi) 
                    maxhi = height[hi];
                else res += (maxhi - height[hi]);
                hi--;
            }
        }
        return res;
    }
}


class Solution {
    public int trap(int[] height) {
        if (height.length < 2) {
            return 0;
        }
        int max = Integer.MIN_VALUE;
        int maxIndex = -1;
        for (int i = 0; i < height.length; i++) {
            if (height[i] > max) {
                max = height[i];
                maxIndex = i;
            }
        }
        int leftMax = height[0];
        int water = 0;
        for (int i = 1; i < maxIndex; i++) {
            if (height[i] > leftMax) {
                leftMax = height[i];
            } else {
                water += leftMax - height[i];
            }
        }
        int rightMax = height[height.length-1];
        for (int j = height.length-2; j > maxIndex; j--) {
            if (height[j] > rightMax) {
                rightMax = height[j];
            } else {
                water += rightMax - height[j];
            }
        }
        return water;
    }
}
