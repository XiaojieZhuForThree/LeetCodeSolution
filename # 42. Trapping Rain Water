package com.leetcode.problems;

public class Question42 {
	class Solution {
		public int trap(int[] height) {
			if (height == null || height.length < 3)
				return 0;
			int[] dp = new int[height.length];
			int max = height[0];
			for (int i = 1; i < height.length - 1; i++) {
				if (height[i] < max)
					dp[i] = max - height[i];
				else
					max = height[i];
			}
			max = height[height.length - 1];
			int ans = 0;
			for (int i = height.length - 2; i > 0; i--) {
				if (height[i] < max) {
					dp[i] = Math.min(dp[i], max - height[i]);
					ans += dp[i];
				} else
					max = height[i];
			}
			return ans;
		}
	}
}


#include <vector> 

using namespace std;

class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0, n = height.size();
        int cur = height[0];
        vector<int> lm;
        for (int i = 0; i < n; i++) {
            lm.push_back(cur);
            cur = max(cur, height[i]);
        }
        cur = 0;
        for (int i = n - 1; i >= 0; i--) {
            if (height[i] < min(cur, lm[i])) ans += min(cur, lm[i]) - height[i];
            cur = max(cur, height[i]);
        }
        return ans;
    }
};


#include <vector>

using std::vector;

class Solution {
public:
    int trap(vector<int>& height) {
        int n = size(height), ans = 0;
        vector<int> a(n, 0);
        int h = height[0];
        for (int i = 1; i < n - 1; i++) {
            if (height[i] <= h) a[i] = h - height[i];
            else {
                a[i] = 0;
                h = height[i];
            }
        }
        h = height[n - 1];
        for (int i = n - 2; i > 0; i--) {
            if (height[i] <= h) a[i] = std::min(a[i], h - height[i]);
            else {
                a[i] = 0;
                h = height[i];
            }
        }
        for (int i : a) ans += i;
        return ans;
    }
};
