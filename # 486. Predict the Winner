class Solution {
    public boolean PredictTheWinner(int[] nums) {
        if (nums.length < 3) {
            return true;
        }
        int i = nums.length;
        int[][] dp = new int[i][i];
        return helper(nums, 0, i-1, dp) >= Math.min(helper(nums, 1, i-1, dp), helper(nums, 0, i-2, dp));
    }
        int helper(int[] nums, int l, int r, int[][] dp) {
            if (dp[l][r] != 0) {
                return dp[l][r];
            }
            if (l == r) {
                dp[l][r] = nums[l];
            } else if (l == r - 1) {
                dp[l][r] = Math.max(nums[l], nums[r]);
            } else {
                int val1 = nums[l] + Math.min(helper(nums, l + 2, r, dp), helper(nums, l + 1, r - 1, dp));
                int val2 = nums[r] + Math.min(helper(nums, l, r - 2, dp), helper(nums, l + 1, r - 1, dp));
                dp[l][r] = Math.max(val1, val2);             
            } 
            return dp[l][r];
        }
}


#include <vector>
#include <numeric>
using std::vector;

class Solution {
public:
	bool PredictTheWinner(vector<int>& nums) {
		int n = size(nums);
		vector<vector<int>> dp(n, vector<int>(n, -1));
		int tot = std::accumulate(nums.begin(), nums.end(), 0);
		int target = tot % 2 == 1 ? 1 + tot / 2 : tot / 2;
		return helper(nums, dp, 0, n - 1, tot) >= target;
	}
private:
	int helper(vector<int>& nums, vector<vector<int>>& dp, int l, int r, int tot) {
		if (l > r) return 0;
		if (dp[l][r] != -1) return dp[l][r];
		int ans1 = nums[l] + tot - nums[l] - helper(nums, dp, l + 1, r, tot - nums[l]);
		int ans2 = nums[r] + tot - nums[r] - helper(nums, dp, l, r - 1, tot - nums[r]);
		dp[l][r] = std::max(ans1, ans2);
		return dp[l][r];
	}
};
