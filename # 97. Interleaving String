package com.leetcode.problems;

public class Question97 {
	class Solution {
		public boolean isInterleave(String s1, String s2, String s3) {
			if (s3.length() != s1.length() + s2.length())
				return false;
			if (s1.isEmpty())
				return s2.equals(s3);
			if (s2.isEmpty())
				return s1.equals(s3);
			boolean[][] dp = new boolean[s1.length() + 1][s2.length() + 1];
			dp[0][0] = true;
			for (int i = 1; i <= s1.length(); i++)
				dp[i][0] = dp[i - 1][0] && s1.charAt(i - 1) == s3.charAt(i - 1);
			for (int i = 1; i <= s2.length(); i++)
				dp[0][i] = dp[0][i - 1] && s2.charAt(i - 1) == s3.charAt(i - 1);
			for (int i = 1; i <= s1.length(); i++) {
				for (int j = 1; j <= s2.length(); j++) {
					char c = s3.charAt(i + j - 1);
					if (s1.charAt(i - 1) == c && dp[i - 1][j])
						dp[i][j] = true;
					else if (s2.charAt(j - 1) == c && dp[i][j - 1])
						dp[i][j] = true;
				}
			}
			return dp[s1.length()][s2.length()];
		}
	}
}


class Solution:
    def isInterleave(self, s1: str, s2: str, s3: str) -> bool:
        _map = {}

        def dfs(i, j, k):
            if k == len(s3):
                ans = i == len(s1) and j == len(s2)
                _map[(i, j, k)] = ans
                return ans
            if (i, j, k) in _map:
                return _map[(i, j, k)]
            key = (i, j, k)
            ans = False
            c = s3[k]
            c1 = '' if i == len(s1) else s1[i]
            c2 = '' if j == len(s2) else s2[j]
            if c1 != c and c2 != c:
                ans = False
            elif c1 != c:
                ans = dfs(i, j + 1, k + 1)
            elif c2 != c:
                ans = dfs(i + 1, j, k + 1)
            else:
                ans = dfs(i + 1, j, k + 1) or dfs(i, j + 1, k + 1)
            _map[key] = ans
            return ans

        return dfs(0, 0, 0)


#include <string>
#include <vector>
using std::string;

class Solution {
public:
	bool isInterleave(string s1, string s2, string s3) {
		if (size(s3) != size(s1) + size(s2)) return false;
		std::vector<std::vector<bool>> dp(size(s1) + 1, std::vector<bool>(size(s2) + 1, false));
		dp[0][0] = true;
		for (int i = 1; i <= size(s3); i++) {
			for (int j = 0; j <= std::min(int(size(s1)), i); j++) {
				int k = i - j;
				if (k > size(s2)) continue;
				if (j > 0 && s1[j - 1] == s3[i - 1]) dp[j][k] = dp[j][k] || dp[j - 1][k];
				if (k > 0 && s2[k - 1] == s3[i - 1]) dp[j][k] = dp[j][k] || dp[j][k - 1];
			}
		}
		return dp[size(s1)][size(s2)];
	}
};
