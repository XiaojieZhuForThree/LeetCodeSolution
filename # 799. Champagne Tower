package com.leetcode.problems;

public class Question799 {
	class Solution {
		public double champagneTower(int poured, int query_row, int query_glass) {
			double[][] dp = new double[query_row + 1][query_row + 1];
			dp[0][0] = poured;
			for (int i = 1; i <= query_row; i++) {
				for (int j = 0; j <= i; j++) {
					if (j > 0 && dp[i - 1][j - 1] > 1.0) {
						dp[i][j] += (dp[i - 1][j - 1] - 1.0) / 2;
					}
					if (j <= i && dp[i - 1][j] > 1.0) {
						dp[i][j] += (dp[i - 1][j] - 1.0) / 2;
					}
				}
			}
			return dp[query_row][query_glass] >= 1.0 ? 1.0 : dp[query_row][query_glass];
		}
	}
}


class Solution:
    def champagneTower(self, poured: int, query_row: int, query_glass: int) -> float:
        dp = []
        dp.append([poured])
        for i in range(1, 100):
            dp.append([])
            for j in range(i + 1):
                cur = 0
                if j < i and dp[i - 1][j] > 1:
                    cur += (dp[i - 1][j] - 1) / 2
                if j > 0 and dp[i - 1][j - 1] > 1:
                    cur += (dp[i - 1][j - 1] - 1) / 2
                dp[i].append(cur)
        return 1.0 if dp[query_row][query_glass] >= 1 else dp[query_row][query_glass]
                    
