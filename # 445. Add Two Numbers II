package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

import com.leetcode.api.ListNode;

public class Question445 {
	class Solution {
		public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
			Deque<ListNode> queue1 = new ArrayDeque<>(), queue2 = new ArrayDeque<>();
			while (l1 != null) {
				queue1.offer(l1);
				l1 = l1.next;
			}
			while (l2 != null) {
				queue2.offer(l2);
				l2 = l2.next;
			}
			ListNode cur = null, next = null;
			int carry = 0;
			while (!queue1.isEmpty() || !queue2.isEmpty()) {
				int val1 = queue1.isEmpty() ? 0 : queue1.pollLast().val;
				int val2 = queue2.isEmpty() ? 0 : queue2.pollLast().val;
				int sum = val1 + val2 + carry;
				int val = sum % 10;
				carry = sum / 10;
				cur = new ListNode(val);
				cur.next = next;
				next = cur;
			}
			if (carry != 0) {
				cur = new ListNode(carry);
				cur.next = next;
			}
			return cur;
		}
	}
}


#include "ListNode.h"
#include <vector>

class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		std::vector<ListNode*> v1, v2;
		while (l1) {
			v1.push_back(l1);
			l1 = l1->next;
		}
		while (l2) {
			v2.push_back(l2);
			l2 = l2->next;
		}
		int car = 0;
		int i = size(v1) - 1, j = size(v2) - 1;
		ListNode* node = new ListNode();
		while (i >= 0 || j >= 0 || car > 0) {
			int cur = car;
			if (i >= 0) cur += v1[i--]->val;
			if (j >= 0) cur += v2[j--]->val;
			node->val = cur % 10;
			car = cur / 10;
			ListNode* head = new ListNode();
			head->next = node;
			node = head;
		}
		return node->next;
	}
};
