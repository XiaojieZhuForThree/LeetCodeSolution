#include <unordered_set>
using namespace std;

class Solution {
public:
	vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
		int n = size(graph);
		vector<int> vc(n, 0);
		unordered_set<int> visited;
		for (int i = 0; i < n; i++) {
			visited.clear();
			dfs(graph, vc, visited, i);
		}
		vector<int> ans;
		for (int i = 0; i < n; i++) {
			if (vc[i] == 2) ans.push_back(i);
		}
		return ans;
	}
private:
	int dfs(vector<vector<int>>& graph, vector<int>& vc, unordered_set<int>& visited, int cur) {
		if (vc[cur] != 0) return vc[cur];
		visited.insert(cur);
		for (int j : graph[cur]) {
			if (visited.count(j)) {
				vc[cur] = 1;
				return 1;
			}
			if (dfs(graph, vc, visited, j) == 1) {
				vc[cur] = 1;
				return 1;
			}
		}
		vc[cur] = 2;
		visited.erase(cur);
		return 2;
	}
};
