#include <vector>
#include <unordered_map>
#include <deque>
#include <algorithm>

using std::vector;

class Solution {
public:
    vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
        std::unordered_map<int, int> ind;
        std::unordered_map<int, vector<int>> v;
        int n = size(graph);
        for (int i = 0; i < n; i++) {
            auto& g = graph[i];
            for (int j : g) {
                v[j].push_back(i);
                ind[i]++;
            }
        }
        std::deque<int> q;
        vector<int> ans;
        for (int i = 0; i < n; i++) {
            if (!ind.count(i)) q.push_back(i);
        }
        while (!q.empty()) {
            int i = q.front();
            q.pop_front();
            ans.push_back(i);
            for (int j : v[i]) {
                ind[j]--;
                if (ind[j] == 0) q.push_back(j);
            }
        }
        sort(ans.begin(), ans.end());
        return ans;
    }
};
