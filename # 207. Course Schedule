package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question207 {
	class Solution {
		public boolean canFinish(int numCourses, int[][] prerequisites) {
			List<List<Integer>> graph = buildGraph(numCourses, prerequisites);
			for (int i = 0; i < numCourses; i++) {
				if (!containsNoLoop(i, graph, new int[numCourses])) {
					return false;
				}
			}
			return true;
		}

		private final List<List<Integer>> buildGraph(int numCourses, int[][] prerequisites) {
			List<List<Integer>> graph = new ArrayList<>();
			for (int i = 0; i < numCourses; i++) {
				graph.add(new ArrayList<>());
			}
			for (int[] relation : prerequisites) {
				int course = relation[0];
				int pre = relation[1];
				graph.get(pre).add(course);
			}
			return graph;
		}

		private final boolean containsNoLoop(int node, List<List<Integer>> graph, int[] status) {
			status[node] = 1;
			for (int neighbor : graph.get(node)) {
				if (status[neighbor] == 0) {
					if (!containsNoLoop(neighbor, graph, status)) {
						return false;
					}
				} else if (status[neighbor] == 1) {
					return false;
				}
			}
			status[node] = 2;
			return true;
		}
	}
}
