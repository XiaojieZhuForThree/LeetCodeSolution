package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Queue;

public class Question207 {
	class Solution1 {
		public boolean canFinish(int numCourses, int[][] prerequisites) {
			List<List<Integer>> graph = buildGraph(numCourses, prerequisites);
			for (int i = 0; i < numCourses; i++) {
				if (!containsNoLoop(i, graph, new int[numCourses])) {
					return false;
				}
			}
			return true;
		}

		private final List<List<Integer>> buildGraph(int numCourses, int[][] prerequisites) {
			List<List<Integer>> graph = new ArrayList<>();
			for (int i = 0; i < numCourses; i++) {
				graph.add(new ArrayList<>());
			}
			for (int[] relation : prerequisites) {
				int course = relation[0];
				int pre = relation[1];
				graph.get(pre).add(course);
			}
			return graph;
		}

		private final boolean containsNoLoop(int node, List<List<Integer>> graph, int[] status) {
			status[node] = 1;
			for (int neighbor : graph.get(node)) {
				if (status[neighbor] == 0) {
					if (!containsNoLoop(neighbor, graph, status)) {
						return false;
					}
				} else if (status[neighbor] == 1) {
					return false;
				}
			}
			status[node] = 2;
			return true;
		}
	}

	class Solution2 {
		int[] indegrees;
		Map<Integer, List<Integer>> courseRelations;
		int numCourses;

		public boolean canFinish(int numCourses, int[][] prerequisites) {
			initializeData(numCourses, prerequisites);
			populateCourseRelations(prerequisites);
			return isTopologicalStructure();
		}

		private final void initializeData(int numCourses, int[][] prerequisites) {
			this.indegrees = new int[numCourses];
			this.courseRelations = new HashMap<>();
			this.numCourses = numCourses;
		}

		private final void populateCourseRelations(int[][] prerequisites) {
			for (int[] relation : prerequisites) {
				updateCourseRelation(relation);
			}
		}

		private final void updateCourseRelation(int[] relation) {
			int course = relation[0];
			int pre = relation[1];
			indegrees[course]++;
			courseRelations.putIfAbsent(pre, new ArrayList<>());
			courseRelations.get(pre).add(course);
		}

		private final boolean isTopologicalStructure() {
			List<Integer> listOfCourses = new ArrayList<>();
			Queue<Integer> freeCourses = new ArrayDeque<>();
			initializeFreeCourses(freeCourses);
			populateListOfCourses(listOfCourses, freeCourses);
			return listOfCourses.size() == numCourses;
		}

		private final void initializeFreeCourses(Queue<Integer> freeCourses) {
			for (int i = 0; i < numCourses; i++) {
				if (indegrees[i] == 0) {
					freeCourses.offer(i);
				}
			}
		}

		private final void populateListOfCourses(List<Integer> listOfCourses, Queue<Integer> freeCourses) {
			while (!freeCourses.isEmpty()) {
				int course = freeCourses.poll();
				listOfCourses.add(course);
				updateFreeCourses(course, freeCourses);
			}
		}

		private final void updateFreeCourses(int course, Queue<Integer> freeCourses) {
			if (!courseRelations.containsKey(course)) {
				return;
			}
			List<Integer> subCourses = courseRelations.get(course);
			for (int sub : subCourses) {
				indegrees[sub]--;
				if (indegrees[sub] == 0) {
					freeCourses.offer(sub);
				}
			}
		}

	}

}
