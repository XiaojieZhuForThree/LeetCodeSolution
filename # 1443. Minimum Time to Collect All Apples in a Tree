package problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question1443 {
	class Solution {
		Set<String> set = new HashSet<>();

		public int minTime(int n, int[][] edges, List<Boolean> hasApple) {
			List<List<Integer>> graph = new ArrayList<>();
			for (int i = 0; i < n; i++) {
				graph.add(new ArrayList<>());
			}
			for (int[] edge : edges) {
				int i = edge[0], j = edge[1];
				graph.get(i).add(j);
				graph.get(j).add(i);
			}
			dfs(graph, n, 0, new HashSet<>(), hasApple, new boolean[n]);
			return set.size() * 2;
		}

		private void dfs(List<List<Integer>> graph, int n, int i, Set<String> path, List<Boolean> hasApple,
				boolean[] visited) {
			if (hasApple.get(i)) {
				set.addAll(path);
			}
			visited[i] = true;
			for (int j : graph.get(i)) {
				if (!visited[j]) {
					path.add(i + "-" + j);
					dfs(graph, n, j, path, hasApple, visited);
					path.remove(i + "-" + j);
				}
			}
		}
	}
}
