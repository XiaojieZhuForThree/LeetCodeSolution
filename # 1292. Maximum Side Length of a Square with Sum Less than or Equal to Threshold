package com.leetcode.problems;

public class Question1292 {
	class Solution {
		public int maxSideLength(int[][] mat, int threshold) {
			processMatData(mat);
			int m = mat.length, n = mat[0].length;
			for (int side = Math.min(m, n); side >= 0; side--) {
				if (containsSquareLessThanThreshold(mat, threshold, side)) {
					return side;
				}
			}
			return 0;
		}

		private final void processMatData(int[][] mat) {
			int m = mat.length, n = mat[0].length;
			for (int j = 0; j < n; j++) {
				for (int i = 1; i < m; i++) {
					mat[i][j] += mat[i - 1][j];
				}
			}
			return;
		}

		private final boolean containsSquareLessThanThreshold(int[][] mat, int threshold, int side) {
			int m = mat.length, n = mat[0].length;
			for (int i = 0; i <= m - side; i++) {
				int sum = calculateSum(mat, i, 0, side);
				if (sum <= threshold) {
					return true;
				}
				for (int j = 1; j <= n - side; j++) {
					sum -= mat[i + side - 1][j - 1] - (i == 0 ? 0 : mat[i - 1][j - 1]);
					sum += mat[i + side - 1][j + side - 1] - (i == 0 ? 0 : mat[i - 1][j + side - 1]);
					if (sum <= threshold) {
						return true;
					}
				}
			}
			return false;
		}

		private final int calculateSum(int[][] mat, int i, int j, int side) {
			int sum = 0;
			for (int k = j; k < j + side; k++) {
				sum += mat[i + side - 1][k] - (i == 0 ? 0 : mat[i - 1][k]);
			}
			return sum;
		}
	}
}
