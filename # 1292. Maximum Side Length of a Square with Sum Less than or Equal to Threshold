package com.leetcode.problems;

public class Question1292 {
	class Solution {
		public int maxSideLength(int[][] mat, int threshold) {
			processMatData(mat);
			int m = mat.length, n = mat[0].length;
			for (int side = Math.min(m, n); side > 0; side--) {
				if (containsSquareLessThanThreshold(mat, threshold, side)) {
					return side;
				}
			}
			return 0;
		}

		private final void processMatData(int[][] mat) {
			int m = mat.length, n = mat[0].length;
			for (int i = 0; i < m; i++) {
				for (int j = 1; j < n; j++) {
					mat[i][j] += mat[i][j - 1];
				}
			}
			for (int j = 0; j < n; j++) {
				for (int i = 1; i < m; i++) {
					mat[i][j] += mat[i - 1][j];
				}
			}
			return;
		}

		private final boolean containsSquareLessThanThreshold(int[][] mat, int threshold, int side) {
			int m = mat.length, n = mat[0].length;
			for (int i = 0; i <= m - side; i++) {
				for (int j = 0; j <= n - side; j++) {
					int sum = calculateSum(mat, i, j, side);
					if (sum <= threshold) {
						return true;
					}
				}
			}
			return false;
		}

		private final int calculateSum(int[][] mat, int i, int j, int side) {
			int downI = i + side - 1;
			int downJ = j + side - 1;
			int sum = mat[downI][downJ] - (j <= 0 ? 0 : mat[downI][j - 1]);
			int sub = i == 0 ? 0 : (mat[i - 1][downJ] - (j == 0 ? 0 : mat[i - 1][j - 1]));
			return sum - sub;
		}
	}
}
