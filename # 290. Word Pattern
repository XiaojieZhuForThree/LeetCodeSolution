class Solution {
    public boolean wordPattern(String pattern, String s) {
        if (pattern == null || pattern.length() == 0) return false;
        if (s == null || s.length() == 0) return false;
        String[] words = s.split(" ");
        if (words.length != pattern.length()) return false;
        Map<Character, String> map1 = new HashMap<>();
        Map<String, Character> map2 = new HashMap<>();
        for (int i = 0; i < pattern.length(); i++) {
            char key = pattern.charAt(i);
            if (map1.containsKey(key)) {
                if (!map1.get(key).equals(words[i])) return false;
            } else if (map2.containsKey(words[i])) {
                if (map2.get(words[i]) != key) return false;
            }else {
                map1.put(key, words[i]);
                map2.put(words[i], key);
            }
        }
        return true;
    }
}


#include <string>
#include <unordered_map>
using namespace std;

class Solution {
public:
	bool wordPattern(string pattern, string s) {
		unordered_map<char, string> c2w;
		unordered_map<string, char> w2c;
		int l = 0, r = 0;
		int ptr = 0;
		while (l < s.length()) {
			while (r < s.length() && s[r] != ' ') r++;
			string w = s.substr(l, r - l);
			char p = pattern[ptr];
			if (c2w.count(p) && c2w[p] != w) return false;
			else if (w2c.count(w) && w2c[w] != p) return false;
			c2w[p] = w;
			w2c[w] = p;
			l = r + 1;
			r = l + 1;
			ptr++;
		}
		return ptr == pattern.length();
	}
};
