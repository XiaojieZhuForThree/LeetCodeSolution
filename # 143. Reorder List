/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public void reorderList(ListNode head) {
        if (head == null || head.next == null){
            return;
        }
        ListNode prev = null, slow = head, fast = head, l1 = head;
        while (fast != null && fast.next != null){
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        prev.next = null;
        ListNode l2 = reverse(slow);
        merge(l1, l2);
    }
    ListNode reverse(ListNode head){
        ListNode prev = null, curr = head, next = null;
        while (curr != null){
            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }
        return prev;
    }
    void merge(ListNode l1, ListNode l2){
        while (l1 != null){
            ListNode n1 = l1.next, n2 = l2.next;
            l1.next = l2;
            if (n1 == null) break;
            l2.next = n1;
            l1 = n1;
            l2 = n2;
        }
    }
}




package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

import com.leetcode.api.ListNode;

public class Question143 {
	class Solution {
		public void reorderList(ListNode head) {
			if (head == null) {
				return;
			}
			List<ListNode> container = convertListNodeToList(head);
			helper(container, 0, container.size() - 1);
			return;
		}

		private final List<ListNode> convertListNodeToList(ListNode node) {
			List<ListNode> container = new ArrayList<>();
			while (node != null) {
				container.add(node);
				node = node.next;
			}
			return container;
		}

		private ListNode helper(List<ListNode> container, int i, int j) {
			if (i > j) {
				return null;
			}
			if (i == j) {
				ListNode curHead = container.get(i);
				curHead.next = null;
				return container.get(i);
			}
			ListNode curHead = container.get(i);
			ListNode curNext = container.get(j);
			curHead.next = curNext;
			curNext.next = helper(container, i + 1, j - 1);
			return curHead;
		}
	}
}

#include "ListNode.h"
#include <deque>

class Solution {
public:
    void reorderList(ListNode* head) {
        std::deque<ListNode*> v;
        while (head) {
            v.push_back(head);
            head = head->next;
        }
        bool s = true;
        ListNode* d = new ListNode(-1);
        while (!v.empty()) {
            if (s) {
                ListNode* cur = v.front();
                d->next = cur;
                v.pop_front();
            }
            else {
                ListNode* cur = v.back();
                d->next = cur;
                v.pop_back();
            }
            s = !s;
            d = d->next;
        }
        d->next = nullptr;
    }
};

