package com.leetcode.problems;

public class Question123 {
	class Solution {
		public int maxProfit(int[] prices) {
			if (prices == null || prices.length == 0) {
				return 0;
			}
			int n = prices.length;
			int maxProfit = 0;
			int oneTransactionProfit = 0;
			int minBuyPrice = prices[0];
			int bestBuyValue = -prices[0];
			for (int i = 1; i < n; i++) {
				int sellPrice = prices[i];
				int curTwoTransactionProfit = sellPrice + bestBuyValue;
				int curOneTransactionProfit = sellPrice - minBuyPrice;
				bestBuyValue = Math.max(bestBuyValue, oneTransactionProfit - sellPrice);
				oneTransactionProfit = Math.max(oneTransactionProfit, curOneTransactionProfit);
				minBuyPrice = Math.min(minBuyPrice, sellPrice);
				int curProfit = Math.max(curOneTransactionProfit, curTwoTransactionProfit);
				maxProfit = Math.max(maxProfit, curProfit);
			}
			return maxProfit;
		}
	}
}
