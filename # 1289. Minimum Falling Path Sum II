package problems;

import java.util.PriorityQueue;

public class Question1289 {
	class Solution1 {
		public int minFallingPathSum(int[][] arr) {
			int n = arr.length;
			int[][] dp = new int[n + 1][n + 1];
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= n; j++) {
					int val = Integer.MAX_VALUE;
					for (int m = 1; m <= n; m++) {
						if (m == j) {
							continue;
						}
						val = Math.min(val, dp[i - 1][m] + arr[i - 1][j - 1]);
					}
					dp[i][j] = val;
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int i = 1; i <= n; i++) {
				ans = Math.min(ans, dp[n][i]);
			}
			return ans;
		}
	}

	class Solution2 {
		public int minFallingPathSum(int[][] arr) {
			int n = arr.length;
			int[][] dp = new int[n][n];
			dp[0] = arr[0];
			for (int i = 1; i < n; i++) {
				dp[i - 1] = getMin(dp[i - 1]);
				for (int j = 0; j < n; j++) {
					dp[i][j] = dp[i - 1][j] + arr[i][j];
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int i : dp[n - 1]) {
				ans = Math.min(ans, i);
			}
			return ans;
		}

		private int[] getMin(int[] arr) {
			int n = arr.length;
			int[] ans = new int[n];
			ans[0] = Integer.MAX_VALUE;
			int min = arr[0];
			for (int i = 1; i < n; i++) {
				ans[i] = min;
				min = Math.min(min, arr[i]);
			}
			min = arr[n - 1];
			for (int i = n - 2; i >= 0; i--) {
				ans[i] = Math.min(ans[i], min);
				min = Math.min(min, arr[i]);
			}
			return ans;
		}
	}

	class Solution3 {
		public int minFallingPathSum(int[][] arr) {
			PriorityQueue<Integer> pq = new PriorityQueue<>();
			for (int i : arr[0]) {
				pq.offer(i);
			}
			for (int i = 1; i < arr.length; i++) {
				int small1 = pq.poll(), small2 = pq.poll();
				pq.clear();
				for (int j = 0; j < arr.length; j++) {
					arr[i][j] += small1 == arr[i - 1][j] ? small2 : small1;
					pq.offer(arr[i][j]);
				}
			}
			return pq.poll();
		}
	}
}
