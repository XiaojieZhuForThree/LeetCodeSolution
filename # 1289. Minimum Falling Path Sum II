import java.util.PriorityQueue;

public class Question1289 {
	class Solution1 {
		public int minFallingPathSum(int[][] arr) {
			int n = arr.length;
			int[][] dp = new int[n + 1][n + 1];
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= n; j++) {
					int val = Integer.MAX_VALUE;
					for (int m = 1; m <= n; m++) {
						if (m == j) {
							continue;
						}
						val = Math.min(val, dp[i - 1][m] + arr[i - 1][j - 1]);
					}
					dp[i][j] = val;
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int i = 1; i <= n; i++) {
				ans = Math.min(ans, dp[n][i]);
			}
			return ans;
		}
	}

	class Solution2 {
		public int minFallingPathSum(int[][] arr) {
			int n = arr.length;
			int[][] dp = new int[n][n];
			for (int i = 0; i < n; i++) {
				dp[0][i] = arr[0][i];
			}
			for (int i = 1; i < n; i++) {
				dp[i - 1] = getPrev(dp[i - 1]);
				for (int j = 0; j < n; j++) {
					dp[i][j] = dp[i - 1][j] + arr[i][j];
				}
			}
			int ans = Integer.MAX_VALUE;
			for (int i = 0; i < n; i++) {
				ans = Math.min(ans, dp[n - 1][i]);
			}
			return ans;
		}

		private int[] getPrev(int[] row) {
			int[] ans = new int[row.length];
			ans[0] = Integer.MAX_VALUE;
			int min = row[0];
			for (int i = 1; i < row.length; i++) {
				ans[i] = min;
				min = Math.min(min, row[i]);
			}
			min = row[row.length - 1];
			for (int i = row.length - 2; i >= 0; i--) {
				ans[i] = Math.min(ans[i], min);
				min = Math.min(min, row[i]);
			}
			return ans;
		}
	}

	class Solution3 {
		public int minFallingPathSum(int[][] arr) {
			int n = arr.length;
			PriorityQueue<Integer> pq = new PriorityQueue<>();
			for (int i = 0; i < n; i++) {
				pq.offer(arr[0][i]);
				if (pq.size() > 2) {
					int i1 = pq.poll(), i2 = pq.poll(), i3 = pq.poll();
					pq.offer(i1);
					pq.offer(i2);
				}
			}
			for (int i = 1; i < n; i++) {
				int s1 = pq.poll(), s2 = pq.poll();
				for (int j = 0; j < n; j++) {
					if (arr[i - 1][j] == s1) {
						arr[i][j] += s2;
					} else {
						arr[i][j] += s1;
					}
					pq.offer(arr[i][j]);
					if (pq.size() > 2) {
						int i1 = pq.poll(), i2 = pq.poll(), i3 = pq.poll();
						pq.offer(i1);
						pq.offer(i2);
					}
				}
			}
			return pq.poll();
		}
	}
}
