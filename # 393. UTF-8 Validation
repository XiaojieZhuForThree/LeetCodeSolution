class Solution {
    
    public boolean validUtf8(int[] data) {
        for (int i = 0; i < data.length; i++) {
            int len = len(data[i]);
            if (len < 0) continue;
            if (len == 0 || len >= 4) return false;
            if (i + len >= data.length) return false;
            for (int j = i + 1; j <= i + len; j++) {
                if (((data[j] >> 7) & 1) != 1 || ((data[j] >> 6) & 1) != 0) return false;
            }
            i = i + len;
        }
        return true;
    }
    
    private int len(int data) {
        int bitIndex = 7;
        while (bitIndex >= 0 && ((data >> bitIndex) & 1) != 0) {
            bitIndex--;
        }
        return 7 - bitIndex - 1;
    }
    
}


# include <vector>
# include <string>
# include <bitset>

using namespace std;

class Solution {
public:
    bool validUtf8(vector<int>& data) {
        return helper(data, 0);
    }
private:
    bool helper(vector<int>& data, int idx) {
        if (idx >= data.size()) return true;
        string cur = bitset<8>(data[idx]).to_string();
        if (cur[0] == '0') return helper(data, idx + 1);
        else if (cur.substr(0, 3) == "110") {
            return isValid(data, idx + 1, 1) && helper(data, idx + 2);
        }
        else if (cur.substr(0, 4) == "1110") {
            return isValid(data, idx + 1, 2) && helper(data, idx + 3);
        }
        else if (cur.substr(0, 5) == "11110") {
            return isValid(data, idx + 1, 3) && helper(data, idx + 4);
        }
        else {
            return false;
        }
    }
    bool isValid(vector<int>& data, int idx, int nxt) {
        for (int i = 0; i < nxt; i++) {
            int j = idx + i;
            if (j >= data.size()) return false;
            string cur = bitset<8>(data[j]).to_string();
            if (cur.substr(0, 2) != "10") return false;
        }
        return true;
    }
};
