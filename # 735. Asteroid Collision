package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question735 {
	class Solution {
		public int[] asteroidCollision(int[] A) {
			if (A == null || A.length == 0)
				return new int[0];
			Deque<Integer> stack = new ArrayDeque<>();
			for (int i : A) {
				if (stack.isEmpty())
					stack.offer(i);
				else if (i >= 0)
					stack.offer(i);
				else {
					boolean exploded = false;
					while (!stack.isEmpty() && !exploded) {
						int prev = stack.peekLast();
						if (prev < 0)
							break;
						else if (prev + i == 0) {
							stack.pollLast();
							exploded = true;
						} else if (prev + i > 0)
							exploded = true;
						else
							stack.pollLast();
					}
					if (!exploded)
						stack.offerLast(i);
				}
			}
			int[] ans = new int[stack.size()];
			int index = 0;
			for (int i : stack)
				ans[index++] = i;
			return ans;
		}
	}
}


#include <vector>
#include <deque>

using std::vector;
using std::deque;

class Solution {
public:
	vector<int> asteroidCollision(vector<int>& asteroids) {
		deque<int> q;
		for (int i : asteroids) {
			if (i > 0) q.push_back(i);
			else {
				while (!q.empty() && q.back() > 0 && q.back() + i < 0) {
					q.pop_back();
				}
				if (q.empty() || q.back() < 0) q.push_back(i);
				else if (q.back() + i == 0) q.pop_back();
			}
		}
		vector<int> ans;
		for (int i : q) ans.push_back(i);
		return ans;

	}
};
