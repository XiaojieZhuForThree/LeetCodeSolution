package com.leetcode.problems;

public class Question74 {
	class Solution1 {
		public boolean searchMatrix(int[][] matrix, int target) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
				return false;
			}
			int m = matrix.length, n = matrix[0].length;
			int left = 0, right = m * n - 1;
			while (left <= right) {
				int mid = left + (right - left) / 2;
				int x = mid / n, y = mid % n;
				if (matrix[x][y] == target) {
					return true;
				} else if (matrix[x][y] < target) {
					left = mid + 1;
				} else {
					right = mid - 1;
				}
			}
			return false;
		}
	}

	class Solution2 {
		public boolean searchMatrix(int[][] matrix, int target) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
				return false;
			}
			int m = matrix.length, n = matrix[0].length;
			int x = 0, y = n - 1;
			while (x < m && matrix[x][y] < target) {
				x++;
			}
			if (x >= m) {
				return false;
			}
			while (y >= 0 && matrix[x][y] > target) {
				y--;
			}
			return y >= 0 && matrix[x][y] == target;
		}
	}
}
