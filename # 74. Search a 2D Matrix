package com.leetcode.problems;

public class Question74 {
	class Solution1 {
		public boolean searchMatrix(int[][] matrix, int target) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
				return false;
			}
			int m = matrix.length, n = matrix[0].length;
			int left = 0, right = m * n - 1;
			while (left <= right) {
				int mid = left + (right - left) / 2;
				int x = mid / n, y = mid % n;
				if (matrix[x][y] == target) {
					return true;
				} else if (matrix[x][y] < target) {
					left = mid + 1;
				} else {
					right = mid - 1;
				}
			}
			return false;
		}
	}

	class Solution2 {
		public boolean searchMatrix(int[][] matrix, int target) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0) {
				return false;
			}
			int m = matrix.length, n = matrix[0].length;
			int x = 0, y = n - 1;
			while (x < m && matrix[x][y] < target) {
				x++;
			}
			if (x >= m) {
				return false;
			}
			while (y >= 0 && matrix[x][y] > target) {
				y--;
			}
			return y >= 0 && matrix[x][y] == target;
		}
	}
}

class Solution:
    def searchMatrix(self, matrix: List[List[int]], target: int) -> bool:
        r = 0
        c = len(matrix[0]) - 1
        while r < len(matrix) and c >= 0:
            if matrix[r][c] == target:
                return True
            elif matrix[r][c] > target:
                c -= 1
            else:
                r += 1
        return False


#include <vector>
using std::vector;

class Solution {
public:
	bool searchMatrix(vector<vector<int>>& matrix, int target) {
		int row = findRow(matrix, target);
		if (row < 0) return false;
		int l = 0, r = size(matrix[0]) - 1;
		while (l < r) {
			int m = l + (r - l) / 2;
			if (matrix[row][m] == target) return true;
			else if (matrix[row][m] < target) l = m + 1;
			else r = m;
		}
		return matrix[row][l] == target;
	}
private:
	int findRow(vector<vector<int>>& matrix, int target) {
		int l = 0, r = size(matrix) - 1;
		while (l < r) {
			int m = l + (r - l) / 2;
			if (matrix[m][0] > target) r = m;
			else l = m + 1;
		}
		return matrix[l][0] <= target ? l : l - 1;
	}
};
