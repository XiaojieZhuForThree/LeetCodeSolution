package com.leetcode.problems;

public class Question63 {
	class Solution {
		public int uniquePathsWithObstacles(int[][] obstacleGrid) {
			int m = obstacleGrid.length;
			int n = obstacleGrid[0].length;
			int[][] dp = new int[m][n];
			if (obstacleGrid[0][0] == 0) {
				dp[0][0] = 1;
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (obstacleGrid[i][j] == 1) {
						continue;
					}
					if (j > 0) {
						dp[i][j] += dp[i][j - 1];
					}
					if (i > 0) {
						dp[i][j] += dp[i - 1][j];
					}
				}
			}
			return dp[m - 1][n - 1];
		}
	}
}


from typing import List


class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if obstacleGrid[0][0] == 0:
            obstacleGrid[0][0] = -1
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        for i in range(0, m):
            for j in range(0, n):
                if obstacleGrid[i][j] == 0:
                    if i - 1 >= 0 and obstacleGrid[i - 1][j] < 0:
                        obstacleGrid[i][j] += obstacleGrid[i - 1][j]
                    if j - 1 >= 0 and obstacleGrid[i][j - 1] < 0:
                        obstacleGrid[i][j] += obstacleGrid[i][j - 1]
        return -obstacleGrid[m - 1][n - 1] if obstacleGrid[m - 1][n - 1] < 0 else 0
