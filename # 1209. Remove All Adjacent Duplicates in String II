package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question1209 {
	class Solution1 {
		public String removeDuplicates(String s, int k) {
			Deque<Character> stack = new ArrayDeque<>();
			Deque<Integer> cnts = new ArrayDeque<>();
			int cnt = 0;
			for (char c : s.toCharArray()) {
				if (stack.isEmpty() || c != stack.peekLast()) {
					stack.offerLast(c);
					cnt = 1;
					cnts.offerLast(cnt);
				} else {
					cnt++;
					stack.offerLast(c);
					cnts.offerLast(cnt);
					if (cnt == k) {
						for (int i = cnt; i > 0; i--) {
							stack.pollLast();
							cnts.pollLast();
						}
						cnt = cnts.isEmpty() ? 0 : cnts.peekLast();
					}
				}
			}
			StringBuilder sb = new StringBuilder();
			for (char c : stack) {
				sb.append(c);
			}
			return sb.toString();
		}
	}

	class Solution2 {
		public String removeDuplicates(String s, int k) {
			int i = 0;
			int[] cnts = new int[s.length()];
			char[] chars = s.toCharArray();
			for (int j = 0; j < s.length(); j++, i++) {
				chars[i] = chars[j];
				if (i > 0 && chars[i - 1] == chars[j]) {
					cnts[i] = cnts[i - 1] + 1;
				} else {
					cnts[i] = 1;
				}
				if (cnts[i] == k) {
					i -= k;
				}
			}
			return new String(chars, 0, i);
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Thu May  5 22:19:07 2022

@author: xiaoj
"""


class Solution:
    def removeDuplicates(self, s: str, k: int) -> str:
        if not k or not s:
            return ''
        stack = []
        _counts = {}
        for i in range(len(s)):
            if not stack or s[stack[-1]] != s[i]:
                stack.append(i)
                _counts[i] = 1
            else:
                _counts[i] = _counts[stack[-1]] + 1
                stack.append(i)
                if _counts[i] == k:
                    for i in range(k):
                        stack.pop(-1)
        ans = ''
        for i in stack:
            ans += s[i]
        return ans
