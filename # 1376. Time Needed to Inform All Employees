package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question1376 {
	class Solution {
		public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
			Map<Integer, List<Integer>> subs = new HashMap<>();
			for (int i = 0; i < manager.length; i++) {
				subs.putIfAbsent(manager[i], new ArrayList<>());
				subs.get(manager[i]).add(i);
			}
			return dfs(subs, informTime, headID);
		}

		private int dfs(Map<Integer, List<Integer>> subs, int[] informTime, int man) {
			if (!subs.containsKey(man)) {
				return 0;
			}
			List<Integer> sub = subs.get(man);
			int ans = informTime[man];
			int expandTime = 0;
			for (int i : sub) {
				if (subs.containsKey(i)) {
					expandTime = Math.max(expandTime, dfs(subs, informTime, i));
				}
			}
			return ans + expandTime;
		}
	}
}

#include <unordered_map>
using namespace std;

class Solution {
public:
	int numOfMinutes(int n, int headID, vector<int>& manager, vector<int>& informTime) {
		unordered_map<int, vector<int>> m;
		int head = -1;
		for (int i = 0; i < n; i++) {
			if (manager[i] == -1) {
				head = i;
				continue;
			}
			m[manager[i]].push_back(i);
		}
		return dfs(m, informTime, head);
	}
private:
	int dfs(unordered_map<int, vector<int>>& m, vector<int>& informTime, int i) {
		if (m[i].empty()) return 0;
		int t = informTime[i], nxt = 0;
		for (int j : m[i]) {
			nxt = max(nxt, dfs(m, informTime, j));
		}
		return t + nxt;
	}
};
