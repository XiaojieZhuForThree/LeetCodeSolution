package com.leetcode.problems;

import java.util.Arrays;

public class Question435 {
	class Solution {
		public int eraseOverlapIntervals(int[][] intervals) {
			if (intervals == null || intervals.length == 0) {
				return 0;
			}
			processIntervals(intervals);
			return findEraseNumber(intervals);
		}

		private final void processIntervals(int[][] intervals) {
			Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
		}

		private final int findEraseNumber(int[][] intervals) {
			int[] initInterval = intervals[0];
			int right = initInterval[1];
			int delete = 0;
			for (int i = 1; i < intervals.length; i++) {
				int[] curInterval = intervals[i];
				delete += updateDelete(curInterval, right);
				right = updateRight(curInterval, right);
			}
			return delete;
		}

		private final int updateRight(int[] curInterval, int right) {
			if (curInterval[0] < right) {
				return Math.min(curInterval[1], right);
			}
			return curInterval[1];
		}

		private final int updateDelete(int[] curInterval, int right) {
			return curInterval[0] < right ? 1 : 0;
		}
	}
}


#include <algorithm>
#include <vector>

using std::vector;

class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        std::sort(intervals.begin(), intervals.end(), comp);
        int ans = 0, end = INT_MIN / 2;
        for (auto& i : intervals) {
            if (i[0] >= end) {
                ans++;
                end = i[1];
            }
            else end = std::min(end, i[1]);
        }
        return size(intervals) - ans;
    }

private:
    static bool comp(vector<int>& a, vector<int>& b) {
        if (a[0] == b[0]) return a[1] < b[1];
        return a[0] < b[0];
    }
};
