package com.leetcode.problems;

import java.util.Arrays;
import java.util.Comparator;

public class Question435 {
	class Solution {
		public int eraseOverlapIntervals(int[][] intervals) {
			if (intervals == null || intervals.length == 0) {
				return 0;
			}
			processIntervals(intervals);
			return findEraseNumber(intervals);
		}

		private final void processIntervals(int[][] intervals) {
			Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));
		}

		private final int findEraseNumber(int[][] intervals) {
			int[] initInterval = intervals[0];
			int right = initInterval[1];
			int delete = 0;
			for (int i = 1; i < intervals.length; i++) {
				int[] curInterval = intervals[i];
				delete += updateDelete(curInterval, right);
				right = updateRight(curInterval, right);
			}
			return delete;
		}

		private final int updateRight(int[] curInterval, int right) {
			if (curInterval[0] < right) {
				return Math.min(curInterval[1], right);
			}
			return curInterval[1];
		}

		private final int updateDelete(int[] curInterval, int right) {
			return curInterval[0] < right ? 1 : 0;
		}
	}
}
