class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        boolean[] visited = new boolean[rooms.size()];
        Queue<Integer> queue = new LinkedList<>();
        visited[0] = true;
        helper(rooms, 0, visited, queue);
        while (!queue.isEmpty()) {
            int i = queue.poll();
            helper(rooms, i, visited, queue);
        }
        boolean ans = true;
        for (boolean i : visited){
            ans &= i;
        }
        return ans;
    }
    
    public void helper(List<List<Integer>> rooms, int i, boolean[] visited, Queue<Integer> queue) {
        for (int j : rooms.get(i)) {
            if (!visited[j]) {
                visited[j] = true;
                queue.add(j);
            }
        }
    }
}


class Solution {
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        return helper(rooms, 0, new HashSet<>());
    }
    public boolean helper(List<List<Integer>> rooms, int key, Set<Integer> dfs) {
        dfs.add(key);
        for (int i : rooms.get(key)) {
            if (!dfs.contains(i)) {
                helper(rooms, i, dfs);
            }
        }
        return dfs.size() == rooms.size();
    }
}

class Solution{
    public boolean canVisitAllRooms(List<List<Integer>> rooms) {
        Stack<Integer> dfs = new Stack<>(); dfs.add(0);
        HashSet<Integer> seen = new HashSet<Integer>(); seen.add(0);
        while (!dfs.isEmpty()) {
            int i = dfs.pop();
            for (int j : rooms.get(i))
                if (!seen.contains(j)) {
                    dfs.add(j);
                    seen.add(j);
                    if (rooms.size() == seen.size()) return true;
                }
        }
        return rooms.size() == seen.size();
    }
}
