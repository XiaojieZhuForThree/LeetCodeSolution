package com.leetcode.problems;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question841 {
	class Solution {
		public boolean canVisitAllRooms(List<List<Integer>> rooms) {
			Set<Integer> keys = bfs(rooms);
			return canOpenAllRooms(keys, rooms);
		}

		private final Set<Integer> bfs(List<List<Integer>> rooms) {
			Set<Integer> keys = new HashSet<>();
			Set<Integer> visited = new HashSet<>();
			keys.add(0);
			visited.add(0);
			visit(visited, keys, rooms, 0);
			return keys;
		}

		private final void visit(Set<Integer> visited, Set<Integer> keys, List<List<Integer>> rooms, int i) {
			List<Integer> keysInRoom = rooms.get(i);
			for (int j : keysInRoom) {
				if (visited.contains(j)) {
					continue;
				}
				visited.add(j);
				keys.add(j);
				visit(visited, keys, rooms, j);
			}
			return;
		}

		private final boolean canOpenAllRooms(Set<Integer> keys, List<List<Integer>> rooms) {
			return keys.size() == rooms.size();
		}
	}
}
