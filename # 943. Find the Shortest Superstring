package problems;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;

public class Question943 {
	class Solution {
		public String shortestSuperstring(String[] A) {
			int n = A.length;
			int[][] graph = new int[n][n];

			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					graph[i][j] = getLength(A[i], A[j]);
					graph[j][i] = getLength(A[j], A[i]);
				}
			}

			int[][] dp = new int[1 << n][n];
			int[][] path = new int[1 << n][n];
			int last = -1, min = Integer.MAX_VALUE;

			for (int i = 1; i < (1 << n); i++) {
				Arrays.fill(dp[i], Integer.MAX_VALUE);
				for (int j = 0; j < n; j++) {
					if ((i & (1 << j)) > 0) {
						int prev = i - (1 << j);
						if (prev == 0) {
							dp[i][j] = A[j].length();
						} else {
							for (int k = 0; k < n; k++) {
								if (dp[prev][k] < Integer.MAX_VALUE && dp[prev][k] + graph[k][j] < dp[i][j]) {
									dp[i][j] = dp[prev][k] + graph[k][j];
									path[i][j] = k;
								}
							}
						}
					}
					if (i == (1 << n) - 1 && dp[i][j] < min) {
						min = dp[i][j];
						last = j;
					}
				}
			}
			StringBuilder sb = new StringBuilder();
			int cur = (1 << n) - 1;
			Deque<Integer> deque = new ArrayDeque<>();
			while (cur > 0) {
				deque.offer(last);
				int temp = cur;
				cur -= (1 << last);
				last = path[temp][last];
			}
			int i = deque.pollLast();
			sb.append(A[i]);
			while (!deque.isEmpty()) {
				int j = deque.pollLast();
				sb.append(A[j].substring(A[j].length() - graph[i][j]));
				i = j;
			}
			return sb.toString();
		}

		private int getLength(String a, String b) {
			for (int i = 1; i < a.length(); i++) {
				if (b.startsWith(a.substring(i))) {
					return b.length() - a.length() + i;
				}
			}
			return b.length();
		}
	}
}
