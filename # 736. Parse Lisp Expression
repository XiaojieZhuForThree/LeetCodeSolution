class Solution {
    public int evaluate(String expression) {
        if (expression == null || expression.length() == 0) {
            return 0;
        }
        return eval(expression, new HashMap<String, Integer>());
    }
    int eval(String exp, Map<String, Integer> assigned) {
        if (exp.charAt(0) != '(') {
            if (Character.isDigit(exp.charAt(0)) || exp.charAt(0) == '-') {
                return Integer.parseInt(exp);
            }
            return assigned.get(exp);
        }
        List<String> tokens;
        if (exp.startsWith("(mult")) {
            tokens = split(exp.substring(6, exp.length()-1));
        } else {
            tokens = split(exp.substring(5, exp.length()-1));
        }
        if (exp.startsWith("(add")) {
            return eval(tokens.get(0), assigned) + eval(tokens.get(1), assigned);
        } else if (exp.startsWith("(mult")) {
            return eval(tokens.get(0), assigned) * eval(tokens.get(1), assigned);
        } else {
            Map<String, Integer> map = new HashMap<>();
            map.putAll(assigned);
            for (int i = 0; i <= tokens.size()-2; i+= 2) {
                map.put(tokens.get(i), eval(tokens.get(i+1), map));
            }
            return eval(tokens.get(tokens.size()-1), map);
        }
    }
    List<String> split(String token) {
        int par = 0;
        StringBuilder sb = new StringBuilder();
        List<String> res = new ArrayList<>();
        for (char c : token.toCharArray()) {
            if (c == '(') {
                par ++;
            } else if (c == ')') {
                par --;
            } 
            if (par == 0 && c == ' ') {
                res.add(sb.toString());
                sb.setLength(0);
            } else {
                sb.append(c);
            }
        }
        if (sb.length() != 0) {
            res.add(sb.toString());
        }
        return res;
    }
}
