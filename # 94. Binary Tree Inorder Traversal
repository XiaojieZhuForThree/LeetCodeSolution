package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

import com.leetcode.api.TreeNode;

public class Question94 {
	class Solution1 {
		public List<Integer> inorderTraversal(TreeNode root) {
			List<Integer> ans = new ArrayList<>();
			inorder(root, ans);
			return ans;
		}

		private void inorder(TreeNode node, List<Integer> ans) {
			if (node == null) {
				return;
			}
			inorder(node.left, ans);
			ans.add(node.val);
			inorder(node.right, ans);
			return;
		}
	}

	class Solution2 {
		public List<Integer> inorderTraversal(TreeNode root) {
			Deque<TreeNode> stack = new ArrayDeque<>();
			TreeNode node = root;
			List<Integer> ans = new ArrayList<>();
			while (node != null) {
				stack.offerLast(node);
				node = node.left;
			}
			while (!stack.isEmpty()) {
				TreeNode cur = stack.pollLast();
				ans.add(cur.val);
				if (cur.right != null) {
					TreeNode trav = cur.right;
					while (trav != null) {
						stack.offerLast(trav);
						trav = trav.left;
					}
				}
			}
			return ans;
		}
	}
}
