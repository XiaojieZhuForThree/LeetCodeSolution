package com.leetcode.problems;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question399 {
	class Solution {
		class UnionFind {
			Map<String, String> parent;
			Map<String, Double> division;

			public UnionFind() {
				this.parent = new HashMap<>();
				this.division = new HashMap<>();
			}

			public boolean containsVariable(String s) {
				return parent.containsKey(s);
			}

			public String find(String s) {
				if (!containsVariable(s)) {
					parent.put(s, s);
					division.put(s, 1.0);
				}
				if (!parent.get(s).equals(s)) {
					String prevParent = parent.get(s);
					parent.put(s, find(prevParent));
					division.put(s, getDivision(s) * getDivision(prevParent));
				}
				return parent.get(s);
			}

			public double getDivision(String s) {
				return division.get(s);
			}

			public void union(String a, String b, double value) {
				String parentOfA = find(a);
				String parentOfB = find(b);
				parent.put(parentOfA, parentOfB);
				division.put(parentOfA, value * getDivision(b) / getDivision(a));
			}
		}

		public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
			UnionFind uf = new UnionFind();
			for (int i = 0; i < equations.size(); i++) {
				List<String> equation = equations.get(i);
				double value = values[i];
				uf.union(equation.get(0), equation.get(1), value);
			}
			double[] ans = new double[queries.size()];
			for (int i = 0; i < queries.size(); i++) {
				List<String> query = queries.get(i);
				String var1 = query.get(0), var2 = query.get(1);
				if (!uf.containsVariable(var1) || !uf.containsVariable(var2)) {
					ans[i] = -1.0;
				} else if (uf.find(var1) != uf.find(var2)) {
					ans[i] = -1.0;
				} else {
					double div1 = uf.getDivision(var1);
					double div2 = uf.getDivision(var2);
					ans[i] = div1 / div2;
				}
			}
			return ans;
		}
	}
}
