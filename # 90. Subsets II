package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class Question90 {
	class Solution1 {
		public List<List<Integer>> subsetsWithDup(int[] nums) {
			List<List<Integer>> ans = new ArrayList<>();
			if (nums == null || nums.length == 0)
				return ans;
			Arrays.sort(nums);
			List<List<Integer>> level = new ArrayList<>();
			level.add(List.of());
			ans.add(List.of());
			for (int i = 0; i < nums.length; i++) {
				List<List<Integer>> next = new ArrayList<>();
				for (List<Integer> list : level) {
					Set<Integer> added = new HashSet<>();
					for (int j = list.size() == 0 ? 0 : list.get(list.size() - 1) + 1; j < nums.length; j++) {
						if (added.contains(nums[j]))
							continue;
						List<Integer> generated = new ArrayList<>(list);
						generated.add(j);
						added.add(nums[j]);
						ans.add(getList(generated, nums));
						next.add(generated);
					}
				}
				level = next;
			}
			return ans;
		}

		private List<Integer> getList(List<Integer> generated, int[] nums) {
			return generated.stream().map(i -> nums[i]).collect(Collectors.toList());
		}
	}
	
	class Solution2 {
	    public List<List<Integer>> subsetsWithDup(int[] nums) {
	        List<List<Integer>> ans = new ArrayList<>();
	        List<Integer> sub = new ArrayList<>();
	        Arrays.sort(nums);
	        dfs(ans, sub, nums, 0);
	        return ans;
	    }
	    private void dfs(List<List<Integer>> ans, List<Integer> sub, int[] nums, int i) {
	        ans.add(new ArrayList<>(sub));
	        if (i == nums.length) return;
	        for (int j = i; j < nums.length; j++) {
	            if (j != i && nums[j] == nums[j - 1]) continue;
	            sub.add(nums[j]);
	            dfs(ans, sub, nums, j + 1);
	            sub.remove(sub.size() - 1);
	        }
			return;
		}
	}
}
