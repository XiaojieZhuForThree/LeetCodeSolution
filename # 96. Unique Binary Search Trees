class Solution {
    Map<Integer, Integer> map = new HashMap<>();
    public int numTrees(int n) {
        if ( n < 1 ) return 0;
        if (n == 1) return 1;
        return helper(n);
    }
    private int helper(int n) {
        if (map.containsKey(n)) return map.get(n);
        if (n == 0){
            return 1;
        }
        int ans = 0;
        for (int i = 1; i <= n; i++){
            ans += helper(i-1) * helper(n-i);
        }
        map.put(n, ans);
        return ans;
    }
}


class Solution {
    public int numTrees(int n) {
        int[] prev = new int[n+1];
        prev[0] = 1;
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= i; j++) {
                prev[i] += prev[j-1] * prev[i-j];
            }
        }
        return prev[n];
    }
}
