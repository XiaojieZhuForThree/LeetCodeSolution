package com.leetcode.problems;

public class Question1249 {
	class Solution {
		public String minRemoveToMakeValid(String s) {
			boolean[] removed = new boolean[s.length()];
			int bal = 0;
			for (int i = 0; i < s.length(); i++) {
				char c = s.charAt(i);
				if (c == '(') {
					bal++;
				} else if (c == ')') {
					if (bal == 0) {
						removed[i] = true;
					} else {
						bal--;
					}
				}
			}
			for (int i = s.length() - 1; i >= 0; i--) {
				if (bal == 0) {
					break;
				}
				char c = s.charAt(i);
				if (c == '(') {
					removed[i] = true;
					bal--;
				}
			}
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < s.length(); i++) {
				if (!removed[i]) {
					sb.append(s.charAt(i));
				}
			}
			return sb.toString();
		}
	}
}


#include <string>
#include <vector>

using std::string;

class Solution {
public:
    string minRemoveToMakeValid(string s) {
        int l = 0, r = 0;
        std::vector<bool> ban(size(s), false);
        for (int i = 0; i < size(s); i++) {
            if (s[i] == '(') l++;
            else if (s[i] == ')') {
                if (l > 0) l--;
                else ban[i] = true;
            }
        }
        for (int i = size(s) - 1; i >= 0; i--) {
            if (s[i] == ')') r++;
            else if (s[i] == '(') {
                if (r > 0) r--;
                else ban[i] = true;
            }
        }
        string ans;
        for (int i = 0; i < size(s); i++) {
            if (ban[i]) continue;
            ans += s[i];
        }
        return ans;
    }
};
