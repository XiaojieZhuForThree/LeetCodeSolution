package com.leetcode.problems;

public class Question1658 {
	class Solution {
		public int minOperations(int[] nums, int x) {
			int i = 0, j = nums.length - 1, currentSum = 0, result = Integer.MAX_VALUE;
			while (i < nums.length && currentSum + nums[i] <= x) {
				currentSum += nums[i++];
			}
			i--;
			if (currentSum == x) {
				result = i + 1;
			}
			while (j > i) {
				while (currentSum + nums[j] > x && i >= 0) {
					currentSum -= nums[i--];
				}
				if (currentSum + nums[j] <= x) {
					if (currentSum + nums[j] == x) {
						result = Math.min(result, i + nums.length - j + 1);
					}
					currentSum += nums[j--];
				} else if (i == -1)
					break;
			}
			return result != Integer.MAX_VALUE ? result : -1;
		}
	}
}


from typing import List


class Solution:
    def minOperations(self, nums: List[int], x: int) -> int:
        s = 0
        cnt = 0
        _map = {s: cnt}
        for i in range(len(nums) - 1, -1, -1):
            s += nums[i]
            cnt += 1
            _map[s] = cnt
        cur = 0
        ans = -1
        cnt = 0
        while cnt <= len(nums):
            if cur > x:
                break
            rem = x - cur
            if rem in _map:
                other = _map[rem]
                total = cnt + other
                if total <= len(nums):
                    if ans == -1:
                        ans = total
                    else:
                        ans = min(ans, total)
            if cnt < len(nums):
                cur += nums[cnt]
            cnt += 1
        return ans
