package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

import com.leetcode.api.Node;

public class Question589 {
	class Solution1 {
		public List<Integer> preorder(Node root) {
			List<Integer> ans = new ArrayList<>();
			preorder(ans, root);
			return ans;
		}

		private void preorder(List<Integer> ans, Node node) {
			if (node == null) {
				return;
			}
			ans.add(node.val);
			for (Node next : node.children) {
				preorder(ans, next);
			}
			return;
		}
	}

	class Solution2 {
		public List<Integer> preorder(Node root) {
			List<Integer> ans = new ArrayList<>();
			Deque<Node> stack = new ArrayDeque<>();
			if (root != null) {
				stack.offerLast(root);
			}
			while (!stack.isEmpty()) {
				Node node = stack.pollLast();
				ans.add(node.val);
				if (node.children == null || node.children.isEmpty()) {
					continue;
				}
				for (int i = node.children.size() - 1; i >= 0; i--) {
					stack.offerLast(node.children.get(i));
				}
			}
			return ans;
		}
	}
}
