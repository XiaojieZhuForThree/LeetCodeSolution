public class Solution {
    /**
     * @param words: a list of words
     * @return: a string which is correct order
     */
    public String alienOrder(String[] words) {
        // Write your code here
        if (words == null || words.length == 0) {
            return "";
        }
        Set<Character> set = new HashSet<>();
        Map<Character, List<Character>> map = new HashMap<>();
        for (String str : words) {
            for (char c : str.toCharArray()) {
                set.add(c);
            }
        }
        int[] indeg = new int[26];
        for (int i = 1; i < words.length; i++) {
            String prev = words[i-1], cur = words[i];
            for (int j = 0; j < prev.length() && j < cur.length(); j++) {
                if (prev.charAt(j) != cur.charAt(j)) {
                    if (!map.containsKey(prev.charAt(j))) {
                        map.put(prev.charAt(j), new ArrayList<>());
                    }
                    map.get(prev.charAt(j)).add(cur.charAt(j));
                    indeg[cur.charAt(j)-'a']++;
                    break;
                }
            }
        }
        PriorityQueue<Character> pq = new PriorityQueue<>();
        for (char c : set) {
            if (indeg[c-'a'] == 0) {
                pq.offer(c);
            }
        }
        StringBuilder sb = new StringBuilder();
        while (!pq.isEmpty()) {
            char c = pq.poll();
            sb.append(c);
            List<Character> list = map.get(c);
            if (list != null) {
                for (char n : list) {
                    indeg[n-'a']--;
                    if (indeg[n-'a'] == 0 ) {
                        pq.offer(n);
                    }
                }                
            }

        }
        return sb.length() == set.size() ? sb.toString() : "";
    }
}
