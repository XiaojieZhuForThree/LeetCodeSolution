class Solution {
    public double myPow(double x, int n) {
        if (n < 0) {
            x = 1 / x;
            n = -n;
        } 
        return helper(x, n);
    }
    
    private double helper(double x, int n) {
        if (x == 0) return 0;
        else if (n == 0) return 1;
        else if (n == 1) return x;
        else if (n % 2 == 0) {
            return helper(x * x, n / 2);
        } else {
            return x * helper(x * x, n / 2);
        }
    }
}


class Solution {
    public double myPow(double x, int n) {
        if (n == 0 || x == 1.0) return 1.0;
        if (x == -1.0) return n % 2 == 1 ? x : -x;
        double base = x;
        double prev = x;
        if (n > 0) {
            for(int i = 1; i < n; i++) {
                x *= base;
                if (x == prev) {
                    break;
                }
                prev = x;
            }
            return x;
        } else {
            for (int i = -1; i > n; i--) {
                x *= base;
                if (x == prev) {
                    break;
                }
                prev = x;
            }
            return 1/x;
        }
    }
}

class Solution {
    public double myPow(double x, int n) {
        if (n == 0) return 1.0;
        if (n == Integer.MIN_VALUE) {
            x = x * x;
            n /= 2;
        }
        if (n < 0) {
            n = Math.abs(n);
            x = 1/x;
        }
        double half = myPow(x, n / 2);
        return n % 2 == 0 ? half * half : x * half * half;
    }
}


#include <cmath>

class Solution {
public:
	double myPow(double x, int n) {
		if (n == 0) return 1.0;
		if (n < 0) {
			n = abs(n);
			x = 1 / x;
		}
		if (n % 2 == 0) return myPow(x * x, n / 2);
		return x * myPow(x * x, n / 2);
	}
};
