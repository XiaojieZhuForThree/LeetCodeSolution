// brute force, dynamic programming, bad solution

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;

class Solution {
	Set<String> ans = new HashSet<>();
	Set<String> seen = new HashSet<>();
	int maxlength = 0;

	private void getAns(String s) {
		Stack<Character> parenth = new Stack<>();
		StringBuilder sb = new StringBuilder(s);
		boolean valid = true;
		for (int i = 0; i < sb.length(); i++) {
			if (sb.charAt(i) == '(') {
				parenth.push(sb.charAt(i));
			} else if (sb.charAt(i) == ')') {
				if (!parenth.isEmpty()) {
					parenth.pop();
				} else {
					valid = false;
					String check = new StringBuilder(sb).deleteCharAt(i).toString();
					if (!seen.contains(check)) {
						seen.add(check);
						getAns(check);
					}
				}
			}
		}
		if (parenth.isEmpty() && valid == true) {
			if (sb.length() > maxlength) {
				maxlength = sb.length();
				ans = new HashSet<>();
				ans.add(sb.toString());

			} else if (sb.length() == maxlength) {
				ans.add(sb.toString());
			}
		} else if (sb.length() > maxlength) {
			for (int i = 0; i < sb.length(); i++) {
				if (sb.charAt(i) == '(' || sb.charAt(i) == ')') {
					String next = new StringBuilder(sb).deleteCharAt(i).toString();
					if (!seen.contains(next)) {
						seen.add(next);
						getAns(next);
					}
				}
			}
		}
	}

	public List<String> removeInvalidParentheses(String s) {
		getAns(s);
		return new ArrayList<>(ans);
	}
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
a better solution: use dfs method and memoization

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.Stack;

class Solution {
	Set<String> ans = new HashSet<>(), seen = new HashSet<>();

	private boolean isValid(String s) {
		int count = 0;
		for (int i = 0; i < s.length(); i++) {
			if (s.charAt(i) == '(') {
				count++;
			} else if (s.charAt(i) == ')') {
				if (count == 0)
					return false;
				else
					count--;
			}
		}
		return count == 0;
	}

	private void getAns(String s, int start, int l, int r) {
		StringBuilder sb = new StringBuilder(s);
		if (l == 0 && r == 0 && isValid(s)) {
			ans.add(s);
		} else if (r > 0) {
			for (int i = start; i < sb.length(); i++) {
				if (sb.charAt(i) == ')') {
					String check = new StringBuilder(sb).deleteCharAt(i).toString();
					if (!seen.contains(check)) {
						getAns(check, i, l, r - 1);
					}
				}
			}
		} else if (l > 0) {
			for (int i = start; i < sb.length(); i++) {
				if (sb.charAt(i) == '(') {
					String check = new StringBuilder(sb).deleteCharAt(i).toString();
					if (!seen.contains(check)) {
						getAns(check, i, l - 1, r);
					}
				}
			}
		}
	}

	public List<String> removeInvalidParentheses(String s) {
		if (isValid(s) == true) {
			ans.add(s);
		} else {
			int l = 0, r = 0;
			for (int i = 0; i < s.length(); i++) {
				if (s.charAt(i) == '(')
					l++;
				else if (s.charAt(i) == ')') {
					if (l == 0)
						r++;
					else
						l--;
				}
			}
			getAns(s, 0, l, r);
		}

		return new ArrayList<>(ans);
	}
}
