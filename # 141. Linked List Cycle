package com.leetcode.problems;

import com.leetcode.api.ListNode;

public class Question141 {
	public class Solution {
		public boolean hasCycle(ListNode head) {
			if (head == null || head.next == null) {
				return false;
			}
			ListNode slow = head, fast = head.next;
			while (fast != null && fast.next != null) {
				if (slow == fast) {
					return true;
				}
				slow = slow.next;
				fast = fast.next.next;
			}
			return false;
		}
	}
}


class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        if not head:
            return False
        slow = head
        fast = head.next
        while fast and fast.next:
            if slow == fast:
                return True
            slow = slow.next
            fast = fast.next.next
        return False


#include "ListNode.h"

class Solution {
public:
	bool hasCycle(ListNode* head) {
		if (!head) return false;
		ListNode* slow = head, * fast = head->next;
		while (fast && fast->next) {
			slow = slow->next;
			fast = fast->next->next;
			if (slow == fast) return true;
		}
		return false;
	}
};
