package com.leetcode.problems;

public class Question59 {
	class Solution {
		public int[][] generateMatrix(int n) {
			int[][] ans = new int[n][n];
			fillMat(ans, 0, n - 1, 1);
			return ans;
		}

		private void fillMat(int[][] ans, int l, int r, int cur) {
			if (l > r) {
				return;
			}
			for (int i = l; i <= r; i++) {
				ans[l][i] = cur++;
			}
			for (int i = l + 1; i <= r; i++) {
				ans[i][r] = cur++;
			}
			for (int i = r - 1; i >= l; i--) {
				ans[r][i] = cur++;
			}
			for (int i = r - 1; i > l; i--) {
				ans[i][l] = cur++;
			}
			fillMat(ans, l + 1, r - 1, cur);
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Tue Apr 12 19:58:10 2022

@author: xiaoj
"""
from typing import List


class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        ans = [[0 for i in range(n)] for i in range(n)]
        x = 0
        y = 0
        up = 0
        down = n - 1
        left = 0
        right = n - 1
        for i in range(1, n * n + 1):
            ans[x][y] = i
            if x == up:
                if y == right:
                    x += 1
                else:
                    y += 1
            elif y == right:
                if x == down:
                    y -= 1
                else:
                    x += 1
            elif x == down:
                if y == left:
                    x -= 1
                else:
                    y -= 1
            elif y == left:
                if x == up + 1:
                    y += 1
                    up += 1
                    down -= 1
                    left += 1
                    right -= 1
                else:
                    x -= 1
        return ans
