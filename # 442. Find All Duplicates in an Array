package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question442 {
	class Solution {
		public List<Integer> findDuplicates(int[] nums) {
			List<Integer> ans = new ArrayList<>();
			for (int i = 0; i < nums.length; i++) {
				int val = nums[i];
				if (val == i + 1) {
					continue;
				} else if (nums[val - 1] == 0) {
					nums[val - 1] = val;
					nums[i] = 0;
				} else if (nums[val - 1] == val) {
					ans.add(val);
					nums[i] = 0;
				} else {
					swap(nums, i, val - 1);
					i--;
				}
			}
			return ans;
		}

		private void swap(int[] nums, int i, int j) {
			int dummy = nums[i];
			nums[i] = nums[j];
			nums[j] = dummy;
		}
	}
}


#include <vector>

using std::vector;

class Solution {
public:
	vector<int> findDuplicates(vector<int>& nums) {
		vector<int> ans;
		for (int i = 0; i < size(nums); i++) {
			int c = abs(nums[i]);
			if (c == i + 1) continue;
			else {
				int t = nums[c - 1];
				if (abs(nums[c - 1]) == c) {
					nums[c - 1] = -c;
				}
				else {
					nums[c - 1] = c;
					nums[i] = t;
					i--;
				}
			}
		}
		for (int i : nums) {
			if (i < 0) ans.push_back(-i);
		}
		return ans;
	}
};
