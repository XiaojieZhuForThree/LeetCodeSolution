package com.leetcode.problems;

public class Question562 {
	class Solution {
		public int longestLine(int[][] M) {
			if (M == null || M.length == 0 || M[0].length == 0) {
				return 0;
			}
			int m = M.length, n = M[0].length;
			int[][] left = new int[m][n], up = new int[m][n], diag = new int[m][n], adiag = new int[m][n];
			int ans = 0;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (M[i][j] == 0) {
						continue;
					}
					int val1 = j > 0 ? left[i][j - 1] : 0;
					int val2 = i > 0 ? up[i - 1][j] : 0;
					int val3 = i > 0 && j > 0 ? diag[i - 1][j - 1] : 0;
					int val4 = i > 0 && j < n - 1 ? adiag[i - 1][j + 1] : 0;

					ans = Math.max(ans, 1 + Math.max(Math.max(val1, val2), Math.max(val3, val4)));

					left[i][j] = 1 + val1;
					up[i][j] = 1 + val2;
					diag[i][j] = 1 + val3;
					adiag[i][j] = 1 + val4;
				}
			}
			return ans;
		}
	}
}
