package com.leetcode.problems;

public class Question562 {
	class Solution {
		public int longestLine(int[][] mat) {
			if (mat == null || mat.length == 0 || mat[0].length == 0)
				return 0;
			int m = mat.length, n = mat[0].length;
			int[][] ups = new int[m][n], lefts = new int[m][n];
			int[][] diags = new int[m][n], antiDiags = new int[m][n];
			int maxLen = 0;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (mat[i][j] == 0)
						continue;
					int upLen = 1 + (i > 0 ? ups[i - 1][j] : 0);
					int leftLen = 1 + (j > 0 ? lefts[i][j - 1] : 0);
					int diagLen = 1 + (i > 0 && j > 0 ? diags[i - 1][j - 1] : 0);
					int antiDiagLen = 1 + (i > 0 && j < n - 1 ? antiDiags[i - 1][j + 1] : 0);
					maxLen = Math.max(maxLen, Math.max(Math.max(upLen, leftLen), Math.max(diagLen, antiDiagLen)));
					ups[i][j] = upLen;
					lefts[i][j] = leftLen;
					diags[i][j] = diagLen;
					antiDiags[i][j] = antiDiagLen;
				}
			}
			return maxLen;
		}
	}
}
