from typing import List


class Trie:
    def __init__(self):
        self.cnt = 0
        self.cd = [None for i in range(26)]

class Solution:
    def sumPrefixScores(self, words: List[str]) -> List[int]:
        root = Trie()
        for w in words:
            self.addWord(root, w)
        ans = []
        for w in words:
            ans.append(self.query(root, w))
        return ans
    
    def addWord(self, root, w):
        for c in w:
            idx = ord(c) - ord('a')
            if root.cd[idx] == None:
                root.cd[idx] = Trie()
            root.cd[idx].cnt += 1
            root = root.cd[idx]
            
    def query(self, root, w):
        ans = 0
        
        for c in w:
            idx = ord(c) - ord('a')
            if root.cd[idx] == None:
                break
            ans += root.cd[idx].cnt
            root = root.cd[idx]
        return ans


#include <vector>
#include <string>

using namespace std;

class Solution {
public:
    struct TrieNode {
        TrieNode() : cnt(0), cd(26, nullptr) {}
        int cnt;
        vector<TrieNode*> cd;
    };

    vector<int> sumPrefixScores(vector<string>& words) {
        TrieNode* root = new TrieNode();
        vector<int> ans;

        for (auto& w : words) addWord(root, w);
        for (auto& w : words) ans.push_back(query(root, w));

        return ans;
    }

private:
    void addWord(TrieNode* root, string& w) {
        for (char c : w) {
            int idx = c - 'a';
            if (!root->cd[idx]) {
                root->cd[idx] = new TrieNode();
            }
            root->cd[idx]->cnt++;
            root = root->cd[idx];
        }
    }
    int query(TrieNode* root, string& w) {
        int ans = 0;
        for (char c : w) {
            int idx = c - 'a';
            if (!root->cd[idx]) break;
            ans += root->cd[idx]->cnt;
            root = root->cd[idx];
        }
        return ans;
    }
};


#include <vector>
#include <string>
#include <unordered_map>

using std::vector;
using std::string;

struct Trie {
    int cnt = 0;
    std::unordered_map<char, Trie*> m;
};

class Solution {
public:
    vector<int> sumPrefixScores(vector<string>& words) {
        Trie trie;
        for (auto& w : words) {
            Trie* iteration = &trie;
            for (char c : w) {
                if (!iteration->m.count(c)) {
                    iteration->m[c] = new Trie();
                }
                iteration = iteration->m[c];
                iteration->cnt++;
            }
        }
        vector<int> ans;
        for (auto& w : words) {
            int cur = 0;
            Trie* iteration = &trie;
            for (char c : w) {
                iteration = iteration->m[c];
                cur += iteration->cnt;
            }
            ans.push_back(cur);
        }
        return ans;
    }
};
