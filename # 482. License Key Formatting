class Solution {
    public String licenseKeyFormatting(String S, int K) {
        String[] groups = S.split("-");
        StringBuilder sb = new StringBuilder();
        for (String i : groups){
            sb.append(i.toUpperCase());
            }
        if (sb.length()<=K) {
        	return sb.toString();
        }
        StringBuilder ans = new StringBuilder();
        int count = 0;
        for (int i = sb.length()-1; i >= 0; i--) {
        	if (count == K) {
        		ans.append('-');
        		ans.append(sb.charAt(i));
        		count = 1;
        	}
        	else {
        		ans.append(sb.charAt(i));
        		count ++;
        	}
        }
        return ans.reverse().toString();
    }
}


class Solution {
    public String licenseKeyFormatting(String S, int K) {
        Stack<Character> stack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        for (char c : S.toCharArray()) {
            if (c == '-') {
                continue;
            } else if ('a' <= c && c <= 'z') {
                stack.push(Character.toUpperCase(c));
            } else {
                stack.push(c);
            }
        }
        int seg = 0;
        while (!stack.isEmpty()) {
            if (seg == K) {
                sb.append('-');
                seg = 0;
            } else {
                sb.append(stack.pop());
                seg++;
            }
            
        }
        return sb.reverse().toString();
    }
}

class Solution {
    public String licenseKeyFormatting(String S, int K) {
        String t = S.toUpperCase().replaceAll("-","");
        StringBuilder sb = new StringBuilder();
        int count = K;
        for (int i = t.length()-1; i >= 0; i--) {
            char c = t.charAt(i);
            sb.append(c);
            count--;
            if(count == 0 && i > 0) {
                sb.append('-');
                count = K;
            }
        }
        return sb.reverse().toString();
    }
}
