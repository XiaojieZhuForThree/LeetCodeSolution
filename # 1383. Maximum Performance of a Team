package com.leetcode.problems;

import java.util.Arrays;
import java.util.PriorityQueue;

public class Question1383 {
	class Solution {
		public int maxPerformance(int n, int[] speed, int[] efficiency, int k) {
			int[][] ess = new int[n][2];
			for (int i = 0; i < n; ++i)
				ess[i] = new int[] { efficiency[i], speed[i] };
			Arrays.sort(ess, (a, b) -> b[0] - a[0]);
			PriorityQueue<Integer> pq = new PriorityQueue<>(k, (a, b) -> a - b);
			long res = 0, sumS = 0;
			for (int[] es : ess) {
				pq.add(es[1]);
				sumS = (sumS + es[1]);
				if (pq.size() > k)
					sumS -= pq.poll();
				res = Math.max(res, (sumS * es[0]));
			}
			return (int) (res % (long) (1e9 + 7));
		}
	}
}


# include <vector>
# include <queue>

using namespace std;
class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<int> idx;
        for (int i = 0; i < n; i++) idx.push_back(i);
        sort(idx.begin(), idx.end(), [&efficiency](int a, int b) {
            return efficiency[b] < efficiency[a];
            });
        priority_queue<int, vector<int>, greater<int>> pq;
        long sum = 0;
        long ans = 0;
        for (int i : idx) {
            sum += speed[i];
            pq.push(speed[i]);
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            long cand = (sum * efficiency[i]);
            ans = max(ans, cand);
        }
        return (int)(ans % (long)(1e9 + 7));
    }
};


# include <vector>
# include <queue>

using namespace std;

class Solution {
public:
    int maxPerformance(int n, vector<int>& speed, vector<int>& efficiency, int k) {
        vector<pair<int, int>> data;
        for (int i = 0; i < n; i++) data.push_back({ efficiency[i], speed[i] });
        sort(data.rbegin(), data.rend());

        priority_queue<int, vector<int>, greater<int>> pq;
        long sum = 0, ans = 0;
        const long mod = 1000000007;
        for (auto p : data) {
            sum += p.second;
            pq.push(p.second);
            if (pq.size() > k) {
                sum -= pq.top();
                pq.pop();
            }
            long cand = sum * p.first;
            ans = max(ans, cand);
        }
        return (int)(ans % mod);
    }
};
