package problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashSet;
import java.util.Set;

public class Question1263 {
	class Solution {
		private int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		public int minPushBox(char[][] grid) {
			int bx = 0, by = 0, px = 0, py = 0, tx = 0, ty = 0;
			int m = grid.length, n = grid[0].length;
			Set<Integer> boxSet = new HashSet<>();
			Set<Integer> playerSet = new HashSet<>();
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					char c = grid[i][j];
					if (c == 'B') {
						bx = i;
						by = j;
					} else if (c == 'S') {
						px = i;
						py = j;
					} else if (c == 'T') {
						tx = i;
						ty = j;
					}
				}
			}
			Deque<Position> queue = new ArrayDeque<>();
			Position pos = new Position(px, py, bx, by);
			queue.offer(pos);
			boxSet.add(bx * n + by);
			int ans = 0;
			while (!queue.isEmpty()) {
				ans++;
				for (int i = queue.size(); i > 0; i--) {
					pos = queue.poll();
					if (pos.bx == tx && pos.by == ty) {
						return --ans;
					}
					for (int[] dir : dirs) {
						bx = pos.bx + dir[0];
						by = pos.by + dir[1];
						px = pos.bx - dir[0];
						py = pos.by - dir[1];
						if (bx < 0 || bx >= m || by < 0 || by >= n) {
							continue;
						}
						if (px < 0 || px >= m || py < 0 || py >= n) {
							continue;
						}
						if (grid[px][py] != '#' && grid[bx][by] != '#'
								&& (boxSet.add(bx * n + by) || playerSet.add(px * n + py))
								&& canReach(grid, pos.px, pos.py, px, py, pos.bx, pos.by, m, n)) {
							queue.offer(new Position(pos.bx, pos.by, bx, by));
						}

					}
				}
			}
			return -1;
		}

		private boolean canReach(char[][] grid, int x1, int y1, int x2, int y2, int bx, int by, int m, int n) {
			Deque<Position> queue = new ArrayDeque<>();
			queue.offer(new Position(x1, y1, x2, y2));
			Set<Integer> set = new HashSet<>();
			set.add(x1 * n + y1);
			set.add(bx * n + by);

			while (!queue.isEmpty()) {
				Position pos = queue.poll();
				if (pos.px == x2 && pos.py == y2) {
					return true;
				}
				for (int[] dir : dirs) {
					int px = pos.px + dir[0];
					int py = pos.py + dir[1];
					if (px < 0 || px >= m || py < 0 || py >= n) {
						continue;
					}
					if (grid[px][py] != '#' && set.add(px * n + py)) {
						queue.offer(new Position(px, py, x2, y2));
					}
				}
			}
			return false;
		}

		class Position {
			public int px, py, bx, by;

			public Position(int px, int py, int bx, int by) {
				this.px = px;
				this.py = py;
				this.bx = bx;
				this.by = by;
			}
		}
	}
}
