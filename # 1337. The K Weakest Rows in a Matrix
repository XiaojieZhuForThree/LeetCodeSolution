package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question1337 {
	class Solution {
		public int[] kWeakestRows(int[][] mat, int k) {
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> getSoldiers(mat[a]) == getSoldiers(mat[b]) ? a - b
					: getSoldiers(mat[a]) - getSoldiers(mat[b]));
			for (int i = 0; i < mat.length; i++) {
				pq.offer(i);
			}
			int[] ans = new int[k];
			for (int i = 0; i < k; i++) {
				ans[i] = pq.poll();
			}
			return ans;
		}

		private int getSoldiers(int[] row) {
			for (int i = 0; i < row.length; i++) {
				if (row[i] == 0) {
					return i;
				}
			}
			return row.length;
		}
	}
}


class Solution:
    def kWeakestRows(self, mat: List[List[int]], k: int) -> List[int]:
        ans = []
        for i, m in enumerate(mat):
            ans.append((m.count(1), i))
        
        ans.sort()
        
        res = []
        for i in range(0, k):
            tup = ans[i]
            res.append(tup[1])
        return res
