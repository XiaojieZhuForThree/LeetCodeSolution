class Solution {
    public int totalFruit(int[] tree) {
        int ans = 0, a = Integer.MAX_VALUE, b = Integer.MAX_VALUE, count_b = 0, cur = 0;
        for (int f : tree) {
            if (f == a || f == b){
                cur++;
            }
            else {
                cur = count_b + 1;
            }
            if (f == b){
                count_b ++;
            }
            else {
                count_b = 1;
                a = b;
                b = f;
            }
            ans = Math.max(ans, cur);
        }
        return ans;
    }
}

class Solution {
    public int totalFruit(int[] tree) {
        int last = -1;
        int second = -1;
        int curMax = 0, lastCount = 0, max = 0;
        for (int fruit : tree) {
            if (fruit == last || fruit == second) {
                curMax ++;
            } else {
                curMax = lastCount + 1;
            } if (fruit == last) {
                lastCount++;
            } else{
                lastCount = 1;
                second = last;
                last = fruit;
            }
            max = Math.max(max, curMax);
        }
        return max;
    }
}

class Solution {
    public int totalFruit(int[] tree) {
        Map<Integer, Integer> map = new HashMap<>();
        int i = 0, j;
        int max = 0;
        for (j = 0; j < tree.length; j++) {
            map.put(tree[j], map.getOrDefault(tree[j], 0) + 1);
            if (map.size() > 2) {
                map.put(tree[i], map.get(tree[i])-1);
                if (map.get(tree[i])==0) {
                    map.remove(tree[i]);
                }
                i++;
            }
            max = Math.max(max, j - i + 1);
        }
        return max;
    }
}


#include <unordered_map>
using namespace std;

class Solution {
public:
	int totalFruit(vector<int>& fruits) {
		int l = 0, r = 0;
		unordered_map<int, int> map;
		int ans = 0;
		for (; r < size(fruits); r++) {
			map[fruits[r]]++;
			while (map.size() > 2) {
				map[fruits[l]]--;
				if (map[fruits[l]] == 0) map.erase(fruits[l]);
				l++;
			}
			ans = max(ans, r - l + 1);
		}
		return ans;
	}

};
