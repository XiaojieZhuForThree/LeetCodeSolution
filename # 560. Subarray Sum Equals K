import java.util.*;

//Given an array of integers and an integer k, you need to find the total number of continuous subarrays whose sum equals to k.
//
//Example 1:
//Input:nums = [1,1,1], k = 2
//Output: 2
//Note:
//The length of the array is in range [1, 20,000].
//The range of numbers in the array is [-1000, 1000] 
//and the range of the integer k is [-1e7, 1e7].

class Solution1 {
    public int subarraySum(int[] nums, int k) {
    	int res = 0;
        for (int i = 0; i < nums.length; i++) {
        	int ans = 0;
        	for (int j = i; j < nums.length; j++) {
        		ans += nums[j];
        		if (ans == k) res ++;
        	}
        }
        return res;
    }
}

class Solution2 {
	public int subarraySum(int[] nums, int k) {
		if (nums == null || nums.length == 0) {
			return 0;
		}

		Map<Integer, Integer> map = new HashMap<>();
		int prefixSum = 0, ans = 0;
		map.put(0, 1);
		for (int i = 0; i < nums.length; i++) {
			prefixSum += nums[i];
			ans += map.getOrDefault(prefixSum - k, 0);
			map.put(prefixSum, map.getOrDefault(prefixSum, 0) + 1);
		}
		return ans;
	}
}
