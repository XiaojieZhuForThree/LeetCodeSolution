package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.PriorityQueue;

public class Question853 {
	class Solution {
		public int carFleet(int target, int[] position, int[] speed) {
			for (int i = 0; i < position.length; i++)
				position[i] = target - position[i];
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> position[a] - position[b]);
			for (int i = 0; i < position.length; i++)
				pq.offer(i);
			Deque<Integer> stack = new ArrayDeque<>();
			while (!pq.isEmpty()) {
				int i = pq.poll();
				if (stack.isEmpty()) {
					stack.offerLast(i);
				} else {
					int j = stack.peekLast();
					if ((double) position[j] / speed[j] < (double) position[i] / speed[i])
						stack.offerLast(i);
				}
			}
			return stack.size();
		}
	}
}
