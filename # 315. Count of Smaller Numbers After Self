package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question315 {
	class Solution {
		int[] count;

		public List<Integer> countSmaller(int[] nums) {
			List<Integer> ans = new ArrayList<>();
			count = new int[nums.length];
			int[] pos = new int[nums.length];
			for (int i = 0; i < nums.length; i++) {
				pos[i] = i;
			}

			mergeSort(nums, pos, 0, nums.length - 1);
			for (int i : count) {
				ans.add(i);
			}
			return ans;
		}

		private void mergeSort(int[] nums, int[] pos, int l, int r) {
			if (l >= r) {
				return;
			}
			int mid = l + ((r - l) / 2);
			mergeSort(nums, pos, l, mid);
			mergeSort(nums, pos, mid + 1, r);
			merge(nums, pos, l, mid, r);
		}

		private void merge(int[] nums, int[] pos, int l, int mid, int r) {
			int val = 0;
			int[] newPos = new int[r - l + 1];
			int start = 0;
			int li = l, ri = mid + 1;
			while (li <= mid && ri <= r) {
				if (nums[pos[li]] > nums[pos[ri]]) {
					val++;
					newPos[start] = pos[ri++];
				} else {
					count[pos[li]] += val;
					newPos[start] = pos[li++];
				}
				start++;
			}
			for (; li <= mid; li++) {
				count[pos[li]] += val;
				newPos[start++] = pos[li];
			}
			for (; ri <= r; ri++) {
				newPos[start++] = pos[ri];
			}
			start = 0;
			for (; l <= r; l++) {
				pos[l] = newPos[start++];
			}
			return;
		}
	}
}
