class Solution {
    public List<Integer> countSmaller(int[] nums) {
        List<Integer> list = new ArrayList<>();
        if (nums == null || nums.length == 0) {
            return list;
        }
        Node root = new Node(nums[nums.length - 1]);
        list.add(0);
        for (int i = nums.length - 2; i >= 0; i--) {
            list.add(insertNode(root, nums[i]));
        }
        Collections.reverse(list);
        return list;
    }
    private int insertNode(Node root, int val) {
        int count = 0;
        while (root != null) {
            if (root.val >= val) {
                root.count++;
                if (root.left == null) {
                    root.left = new Node(val);
                    break;
                }else {
                    root = root.left;                    
                }
            } else {
                count += root.count;
                if (root.right == null) {
                    root.right = new Node(val);
                    break;
                } else {
                    root = root.right;
                }
            }
        }
        return count;
    }
    class Node {
        Node left;
        Node right;
        int count = 1;
        int val;
        public Node(int val) {
            this.val = val;
        }
    }
}
