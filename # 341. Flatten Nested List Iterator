package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.leetcode.api.NestedInteger;

public class Question341 {
	/**
	 * // This is the interface that allows for creating nested lists. // You should
	 * not implement it, or speculate about its implementation public interface
	 * NestedInteger {
	 *
	 * // @return true if this NestedInteger holds a single integer, rather than a
	 * nested list. public boolean isInteger();
	 *
	 * // @return the single integer that this NestedInteger holds, if it holds a
	 * single integer // Return null if this NestedInteger holds a nested list
	 * public Integer getInteger();
	 *
	 * // @return the nested list that this NestedInteger holds, if it holds a
	 * nested list // Return empty list if this NestedInteger holds a single integer
	 * public List<NestedInteger> getList(); }
	 */
	public class NestedIterator implements Iterator<Integer> {
		List<Integer> list;
		int ptr;

		public NestedIterator(List<NestedInteger> nestedList) {
			this.list = new ArrayList<>();

			for (NestedInteger ni : nestedList) {
				fillList(ni);
			}
			ptr = 0;
		}

		@Override
		public Integer next() {
			return list.get(ptr++);
		}

		@Override
		public boolean hasNext() {
			return ptr < list.size();
		}

		private void fillList(NestedInteger ni) {
			if (ni.isInteger()) {
				list.add(ni.getInteger());
			} else {
				for (NestedInteger next : ni.getList()) {
					fillList(next);
				}
			}
			return;
		}
	}

	/**
	 * Your NestedIterator object will be instantiated and called as such:
	 * NestedIterator i = new NestedIterator(nestedList); while (i.hasNext()) v[f()]
	 * = i.next();
	 */
}


# -*- coding: utf-8 -*-
"""
Created on Sat May  7 19:42:38 2022

@author: xiaoj
"""

# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
class NestedInteger:
    def isInteger(self) -> bool:
        """
        @return True if this NestedInteger holds a single integer, rather than a nested list.
        """

    def getInteger(self) -> int:
        """
        @return the single integer that this NestedInteger holds, if it holds a single integer
        Return None if this NestedInteger holds a nested list
        """

    def getList(self):
        """
        @return the nested list that this NestedInteger holds, if it holds a nested list
        Return None if this NestedInteger holds a single integer
        """

class NestedIterator:
    def __init__(self, nestedList: [NestedInteger]):
        self.flattened = []
        for ni in nestedList:
            self.flat(ni)
        self.ptr = 0
        
    def next(self) -> int:
        ans = self.flattened[self.ptr]
        self.ptr += 1
        return ans
        
    
    def hasNext(self) -> bool:
         return self.ptr < len(self.flattened)
        
    def flat(self, ni):
        if ni.getInteger() is not None:
            self.flattened.append(ni.getInteger())
            return
        for l in ni.getList():
            self.flat(l)
        

# Your NestedIterator object will be instantiated and called as such:
# i, v = NestedIterator(nestedList), []
# while i.hasNext(): v.append(i.next())


#include <vector>
#include "NestedInteger.h"
using std::vector;

class NestedIterator {
public:
    vector<int> nums;
    int ptr = 0;
    NestedIterator(vector<NestedInteger>& nestedList) {
        process(nums, nestedList);
    }

    int next() {
        return nums[ptr++];
    }

    bool hasNext() {
        return ptr < size(nums);
    }
private:
    void process(vector<int>& nums, vector<NestedInteger>& nestedList) {
        for (auto& ni : nestedList) {
            if (ni.isInteger()) nums.push_back(ni.getInteger());
            else process(nums, ni.getList());
        }
    }
};

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i(nestedList);
 * while (i.hasNext()) cout << i.next();
 */
