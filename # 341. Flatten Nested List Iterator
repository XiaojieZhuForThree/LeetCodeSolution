package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

import com.leetcode.api.NestedInteger;

public class Question341 {
	/**
	 * // This is the interface that allows for creating nested lists. // You should
	 * not implement it, or speculate about its implementation public interface
	 * NestedInteger {
	 *
	 * // @return true if this NestedInteger holds a single integer, rather than a
	 * nested list. public boolean isInteger();
	 *
	 * // @return the single integer that this NestedInteger holds, if it holds a
	 * single integer // Return null if this NestedInteger holds a nested list
	 * public Integer getInteger();
	 *
	 * // @return the nested list that this NestedInteger holds, if it holds a
	 * nested list // Return empty list if this NestedInteger holds a single integer
	 * public List<NestedInteger> getList(); }
	 */
	public class NestedIterator implements Iterator<Integer> {
		List<Integer> list;
		int ptr;

		public NestedIterator(List<NestedInteger> nestedList) {
			this.list = new ArrayList<>();

			for (NestedInteger ni : nestedList) {
				fillList(ni);
			}
			ptr = 0;
		}

		@Override
		public Integer next() {
			return list.get(ptr++);
		}

		@Override
		public boolean hasNext() {
			return ptr < list.size();
		}

		private void fillList(NestedInteger ni) {
			if (ni.isInteger()) {
				list.add(ni.getInteger());
			} else {
				for (NestedInteger next : ni.getList()) {
					fillList(next);
				}
			}
			return;
		}
	}

	/**
	 * Your NestedIterator object will be instantiated and called as such:
	 * NestedIterator i = new NestedIterator(nestedList); while (i.hasNext()) v[f()]
	 * = i.next();
	 */
}
