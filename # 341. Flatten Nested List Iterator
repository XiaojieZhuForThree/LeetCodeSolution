/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class NestedIterator implements Iterator<Integer> {
    List<NestedInteger> now;
    List<NestedInteger> then;
    public NestedIterator(List<NestedInteger> nestedList) {
        this.now = nestedList;
        this.then = new ArrayList<NestedInteger>();
    }

    @Override
    public Integer next() {
        NestedInteger object = now.remove(0);
        if (object.isInteger()) return object.getInteger();
        then = now;
        now = object.getList();
        now.next();
        now = then;
    }

    @Override
    public boolean hasNext() {
        if (now.size() == 0 && then.size() == 0) return false;
        else if (now.size() == 0){
            now = then;
            then = new ArrayList<NestedInteger>();
        }
        return true;
    }
}

/**
 * Your NestedIterator object will be instantiated and called as such:
 * NestedIterator i = new NestedIterator(nestedList);
 * while (i.hasNext()) v[f()] = i.next();
 */
