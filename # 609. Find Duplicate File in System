package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question609 {
	class Solution {
		public List<List<String>> findDuplicate(String[] paths) {
			Map<String, List<String>> map = new HashMap<>();
			for (String path : paths)
				processPath(path, map);
			return getGroups(map);
		}

		private void processPath(String path, Map<String, List<String>> map) {
			String[] elm = path.split(" ");
			String pre = elm[0];
			for (int i = 1; i < elm.length; i++) {
				String file = elm[i];
				String[] vals = file.split("\\(");
				String content = vals[1].substring(0, vals[1].length() - 1);
				map.putIfAbsent(content, new ArrayList<>());
				String fullFile = pre + "/" + vals[0];
				map.get(content).add(fullFile);
			}
			return;
		}

		private List<List<String>> getGroups(Map<String, List<String>> map) {
			List<List<String>> ans = new ArrayList<>();
			for (Map.Entry<String, List<String>> entry : map.entrySet()) {
				if (entry.getValue().size() > 1)
					ans.add(entry.getValue());
			}
			return ans;
		}
	}
}


#include <string>
#include <vector>
#include <unordered_map>

using namespace std;
class Solution {
public:
    vector<vector<string>> findDuplicate(vector<string>& paths) {
        unordered_map<string, vector<string>> map;
        for (auto& s : paths) {
            int split = s.find(' ');
            string dir = s.substr(0, split);
            string subs = s.substr(split + 1, s.size());
            int i = 0, j = 0;
            for (; j < subs.size(); j++) {
                if (subs[j] == ' ') {
                    string part = subs.substr(i, j - i);
                    vector<string> processed = process(part);
                    if (map.find(processed[1]) == map.end()) {
                        map[processed[1]] = {};
                    }
                    map[processed[1]].push_back(dir + "/" + processed[0]);
                    i = j + 1;
                }
            }
            vector<string> processed = process(subs.substr(i, j - i));
            if (map.find(processed[1]) == map.end()) {
                map[processed[1]] = {};
            }
            map[processed[1]].push_back(dir + "/" + processed[0]);
        }
        vector<vector<string>> ans;
        for (auto s : map) {
            if (s.second.size() > 1) ans.push_back(s.second);
        }
        return ans;
    }

private:
    vector<string> process(string s) {
        int split = s.find('(');
        string name = s.substr(0, split);
        string content = s.substr(split + 1, s.size() - split - 2);
        return { name, content };
    }
};
