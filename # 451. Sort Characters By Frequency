class Solution {
    public String frequencySort(String s) {
        StringBuilder sb = new StringBuilder();
        Map<Character, Integer> map = new HashMap<>();
        for (char i : s.toCharArray()) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        PriorityQueue<Character> pq = new PriorityQueue<>(new Comparator<Character>(){
            public int compare(Character i1, Character i2){
                return map.get(i2) - map.get(i1);
            }
        });
        for (char i : map.keySet()) {
            pq.add(i);
        }
        while (!pq.isEmpty()){
            char i = pq.remove();
            for (int j = 0; j < map.get(i); j++){
                sb.append(i);                
            }

        }
        return sb.toString();
    }
}


#include <string>
#include <unordered_map>
#include <queue>
using namespace std;

class Solution {
public:
	string frequencySort(string s) {
		unordered_map<char, int> map;
		for (char c : s) map[c]++;
		auto comp = [](pair<char, int>& a, pair<char, int>& b) -> bool { return a.second < b.second; };
		priority_queue<pair<char, int>, vector<pair<char, int>>, decltype(comp)> pq(comp);
		for (auto& p : map) pq.push(p);
		string ans;
		while (!pq.empty()) {
			auto& cur = pq.top();
			for (int i = 0; i < cur.second; i++) ans.push_back(cur.first);
			pq.pop();
		}
		return ans;
	}
};
