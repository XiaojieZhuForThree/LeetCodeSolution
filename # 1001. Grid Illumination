package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question1001 {
	class Solution {
		public int[] gridIllumination(int N, int[][] lamps, int[][] queries) {
			Map<Integer, Integer> rows = new HashMap<>();
			Map<Integer, Integer> cols = new HashMap<>();
			Map<Integer, Integer> uppers = new HashMap<>();
			Map<Integer, Integer> lowers = new HashMap<>();
			Map<Integer, Boolean> lightOn = new HashMap<>();
			int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 }, { 0, 0 }, { 1, 1 }, { 1, -1 },
					{ -1, 1 }, { -1, -1 } };
			for (int[] lamp : lamps) {
				int x = lamp[0], y = lamp[1];
				rows.put(x, rows.getOrDefault(x, 0) + 1);
				cols.put(y, cols.getOrDefault(y, 0) + 1);
				uppers.put(x + y, uppers.getOrDefault(x + y, 0) + 1);
				lowers.put(x - y, lowers.getOrDefault(x - y, 0) + 1);
				lightOn.put(x * N + y, true);
			}
			int[] ans = new int[queries.length];
			for (int i = 0; i < queries.length; i++) {
				int x = queries[i][0], y = queries[i][1];
				if (rows.getOrDefault(x, 0) > 0 || cols.getOrDefault(y, 0) > 0 || uppers.getOrDefault(x + y, 0) > 0
						|| lowers.getOrDefault(x - y, 0) > 0) {
					ans[i] = 1;
				}
				for (int[] dir : dirs) {
					int nx = x + dir[0], ny = y + dir[1];
					if (nx < 0 || nx >= N || ny < 0 || ny >= N) {
						continue;
					}
					if (!lightOn.getOrDefault(nx * N + ny, false)) {
						continue;
					}
					rows.put(nx, rows.getOrDefault(nx, 1) - 1);
					cols.put(ny, cols.getOrDefault(ny, 1) - 1);
					uppers.put(nx + ny, uppers.getOrDefault(nx + ny, 1) - 1);
					lowers.put(nx - ny, lowers.getOrDefault(nx - ny, 1) - 1);
					lightOn.put(nx * N + ny, false);
				}

			}
			return ans;
		}
	}
}
