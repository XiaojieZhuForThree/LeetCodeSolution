class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> beginSet = new HashSet<>();
        Set<String> endSet = new HashSet<>();
        beginSet.add(beginWord);
        endSet.add(endWord);
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)){
            return 0;
        }
        return search(beginSet, endSet, dict, 1);
    }
    private int search(Set<String> beginSet, Set<String> endSet, Set<String> dict, int count){
        if (beginSet.isEmpty() || endSet.isEmpty()){
            return 0;
        }
        count++;
        dict.removeAll(beginSet);
        Set<String> nextSet = new HashSet<>();
        for (String str : beginSet) {
            char[] chars = str.toCharArray();
            for (int i = 0; i < chars.length; i++) {
                char c = chars[i];
                for (char j = 'a'; j <= 'z'; j++) {
                    chars[i] = j;
                    String tmp = new String(chars);
                    if (!dict.contains(tmp)) {
                        continue;
                    }
                    if (endSet.contains(tmp)) {
                        return count;
                    }
                    nextSet.add(tmp);
                }
                chars[i] = c;
            }
        }
        return nextSet.size() > endSet.size() ? search(endSet, nextSet, dict, count) : search(nextSet, endSet, dict, count);
    }
}


class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Queue<String> start = new LinkedList<>();
        //Set<String> end = new HashSet<>();
        start.add(beginWord);
        //end.append(endWord);
        Set<String> dict = new HashSet<>(wordList);
        if (!dict.contains(endWord)) {
            return 0;
        }
        int ans = 0;
        while (dict.size() != 0 && start.size() != 0){
            ans++;
            dict.removeAll(start);
            int i = start.size()-1;
            for (; i >= 0; i--) {
                String word = start.poll();
                char[] chars = word.toCharArray();
                for (int j = 0; j < chars.length; j++){
                    char change = chars[j];
                    for (char c = 'a'; c <= 'z'; c++) {
                        chars[j] = c;
                        String form = new String(chars);
                        if (form.equals(endWord)){
                            return ans+1;
                        } else if (dict.contains(form)){
                            start.add(form);
                        }
                    }
                    chars[j] = change;
                }
            }
        }
        return 0;
    }
}
