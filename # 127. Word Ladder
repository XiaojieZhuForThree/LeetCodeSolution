package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.HashSet;
import java.util.List;
import java.util.Queue;
import java.util.Set;

public class Question127 {
	class Solution {
		public int ladderLength(String beginWord, String endWord, List<String> wordList) {
			Queue<String> queue = new ArrayDeque<>();
			Set<String> seen = new HashSet<>();
			queue.offer(beginWord);
			seen.add(beginWord);
			int step = 0;
			while (!queue.isEmpty()) {
				step++;
				for (int i = queue.size(); i > 0; i--) {
					String word = queue.poll();
					if (word.equals(endWord)) {
						return step;
					}
					for (String next : wordList) {
						if (!seen.contains(next) && diff(next, word) == 1) {
							seen.add(next);
							queue.offer(next);
						}
					}
				}
			}
			return 0;
		}

		private int diff(String a, String b) {
			int diff = 0;
			for (int i = 0; i < a.length(); i++) {
				if (a.charAt(i) != b.charAt(i)) {
					diff++;
				}
			}
			return diff;
		}
	}
}


class Solution:
    def ladderLength(self, beginWord: str, endWord: str, wordList: List[str]) -> int:
        seen = set(beginWord)
        ans = 1
        q = deque()
        q.append(beginWord)
        words = set(wordList)
        while q:
            level = set()
            for i in range(len(q), 0, -1):
                cur = q.popleft()
                if cur == endWord:
                    return ans
                for i in range(len(cur)):
                    for c in string.ascii_lowercase:
                        if c != cur[i]:
                            w = cur[:i] + c + cur[i+1:]
                            if w in words and w not in seen:
                                seen.add(w)
                                q.append(w)
            ans += 1
        return 0
