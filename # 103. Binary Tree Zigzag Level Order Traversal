/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) return ans;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean reverse = false;
        Deque<Integer> deque = new ArrayDeque<>();
        while (!queue.isEmpty()) {
            int length = queue.size(), count = 0;
            while (count < length) {
                TreeNode pop = queue.remove();
                if (reverse){
                    deque.addFirst(pop.val);
                } else {
                    deque.addLast(pop.val);
                }
                if (pop.left != null){
                    queue.add(pop.left);
                }
                if (pop.right != null) {
                    queue.add(pop.right);
                } 
                count++;
            }
            ans.add(new ArrayList<>(deque));
            deque.clear();
            reverse = !reverse;
        }
        return ans;
    }
}


#include <deque>
#include <vector>
#include "TreeNode.h"
using namespace std;

class Solution {
public:
	vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
		vector<vector<int>> ans;
		bool reversed = false;
		deque<TreeNode*> queue;
		if (root) queue.push_back(root);
		while (!queue.empty()) {
			vector<int> cur;
			for (int i = size(queue); i > 0; i--) {
				TreeNode* node = queue.front();
				queue.pop_front();
				cur.push_back(node->val);
				if (node->left)  queue.push_back(node->left);
				if (node->right)  queue.push_back(node->right);
			}
			ans.push_back(cur);
		}
		for (auto& row : ans) {
			if (reversed) reverse(row.begin(), row.end());
			reversed = !reversed;
		}
		return ans;
	}
};
