package com.leetcode.problems;

public class Question869 {
	class Solution {
		public boolean reorderedPowerOf2(int N) {
			if (N == 1) {
				return true;
			}
			int num = 1;
			for (int i = 0; i < 32; i++) {
				num *= 2;
				if (canMatch(num, N)) {
					return true;
				}
			}
			return false;
		}

		private boolean canMatch(int a, int b) {
			int[] digs = new int[10];
			while (a > 0) {
				digs[a % 10]++;
				a /= 10;
			}
			while (b > 0) {
				if (digs[b % 10] <= 0) {
					return false;
				}
				digs[b % 10]--;
				b /= 10;
			}
			for (int i : digs) {
				if (i != 0) {
					return false;
				}
			}
			return true;
		}
	}
}


class Solution:
    def reorderedPowerOf2(self, n: int) -> bool:
        cand = []
        i = 1
        l = len(str(n))
        ns = str(n)
        while len(str(i)) <= len(ns):
            if len(str(i)) == l:
                cand.append(str(i))
            i <<= 1
        for i in cand:
            if sorted(i) == sorted(ns):
                return True
        return False
