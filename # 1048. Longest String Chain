package com.leetcode.problems;

import java.util.Arrays;

public class Question1048 {
	class Solution {
		public int longestStrChain(String[] words) {
			Arrays.sort(words, (a, b) -> a.length() - b.length());
			int[] dp = new int[words.length];
			Arrays.fill(dp, 1);
			int ans = 1;
			for (int i = 0; i < words.length; i++) {
				for (int j = i - 1; j >= 0; j--) {
					if (isPred(words[i], words[j])) {
						dp[i] = Math.max(dp[i], dp[j] + 1);
						ans = Math.max(ans, dp[i]);
					}
				}
			}
			return ans;
		}

		private boolean isPred(String a, String b) {
			if (a.length() - 1 != b.length())
				return false;
			int ptr = 0;
			for (char c : a.toCharArray()) {
				if (c == b.charAt(ptr))
					ptr++;
				if (ptr == b.length())
					return true;
			}
			return ptr == b.length();
		}
	}
}
