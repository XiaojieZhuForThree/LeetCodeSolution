package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Queue;

public class Question1514 {
	class Solution1 {
		double max = 0.0;

		public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
			Map<Integer, List<int[]>> graph = new HashMap<>();
			for (int i = 0; i < edges.length; i++) {
				int[] edge = edges[i];
				int a = edge[0], b = edge[1];
				graph.putIfAbsent(a, new ArrayList<>());
				graph.putIfAbsent(b, new ArrayList<>());
				graph.get(a).add(new int[] { b, i });
				graph.get(b).add(new int[] { a, i });
			}
			PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(a[0], b[0]));
			pq.offer(new double[] { 0.0, (double) start });
			return dijkstra(end, graph, succProb, new boolean[n], pq);
		}

		private double dijkstra(int end, Map<Integer, List<int[]>> graph, double[] succProb, boolean[] visited,
				PriorityQueue<double[]> pq) {
			while (!pq.isEmpty()) {
				double[] pair = pq.poll();
				int node = (int) (pair[1]);
				if (visited[node]) {
					continue;
				}
				if (node == end) {
					return Math.pow(10, -pair[0]);
				}
				visited[node] = true;
				if (!graph.containsKey(node)) {
					continue;
				}
				for (int i = 0; i < graph.get(node).size(); i++) {
					int[] nP = graph.get(node).get(i);
					if (!visited[nP[0]]) {
						double[] nPair = new double[] { pair[0] - Math.log10(succProb[nP[1]]), (double) nP[0] };
						pq.offer(nPair);
					}
				}
			}
			return 0.0;
		}
	}

	class Solution2 {
		public double maxProbability(int n, int[][] edges, double[] succProb, int start, int end) {
			Map<Integer, Map<Integer, Double>> map = new HashMap<>();
			for (int i = 0; i < n; i++) {
				map.put(i, new HashMap<>());
			}
			for (int i = 0; i < edges.length; i++) {
				int[] edge = edges[i];
				map.get(edge[0]).put(edge[1], succProb[i]);
				map.get(edge[1]).put(edge[0], succProb[i]);
			}
			double[] maxSucc = new double[n];
			maxSucc[start] = 1.0;
			Queue<Integer> queue = new ArrayDeque<>();
			queue.offer(start);
			while (!queue.isEmpty()) {
				int s = queue.poll();
				for (int e : map.get(s).keySet()) {
					if (maxSucc[s] * map.get(s).get(e) > maxSucc[e]) {
						maxSucc[e] = maxSucc[s] * map.get(s).get(e);
						queue.offer(e);
					}
				}
			}
			return maxSucc[end];
		}
	}
}
