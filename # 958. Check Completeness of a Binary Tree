/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        Queue<TreeNode> bfs = new LinkedList<>();
        bfs.add(root);
        while (bfs.peek() != null) {
            TreeNode par = bfs.poll();
            bfs.add(par.left);
            bfs.add(par.right);
        }
        while (!bfs.isEmpty() && bfs.peek() == null) {
            bfs.poll();
        }
        return bfs.isEmpty();
    }
}


#include "TreeNode.h"
#include <deque>
using namespace std;

class Solution {
public:
    bool isCompleteTree(TreeNode* root) {
        if (!root) return true;
        deque<TreeNode*> dq;
        dq.push_back(root);
        while (!dq.empty()) {
            bool shouldEnd = false;
            for (int i = size(dq); i > 0; i--) {
                TreeNode* cur = dq.front();
                dq.pop_front();
                if (cur->right && !cur->left) return false;
                else if (cur->left && cur->right) {
                    if (shouldEnd) return false;
                    dq.push_back(cur->left);
                    dq.push_back(cur->right);
                }
                else if (!cur->left && !cur->right) {
                    shouldEnd = true;
                }
                else {
                    if (shouldEnd) return false;
                    else {
                        shouldEnd = true;
                        dq.push_back(cur->left);
                    }
                }
            }
            if (shouldEnd) return lastRow(dq);
        }
        return true;
    }
private:
    bool lastRow(deque<TreeNode*> dq) {
        for (TreeNode* node : dq) {
            if (node->left || node->right) return false;
        }
        return true;
    }
};
