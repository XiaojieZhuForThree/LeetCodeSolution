package com.leetcode.problems;

public class Question81 {
	class Solution {
		public boolean search(int[] nums, int target) {
			if (nums == null || nums.length == 0) {
				return false;
			}
			int piv = findPivot(nums, 0, nums.length - 1);
			return binarySearch(nums, target, 0, piv) || binarySearch(nums, target, piv + 1, nums.length - 1);
		}

		private int findPivot(int[] nums, int left, int right) {
			if (left >= right) {
				return -1;
			}
			int mid = left + (right - left) / 2;
			if (nums[mid] > nums[mid + 1]) {
				return mid;
			} else {
				int leftPiv = findPivot(nums, left, mid);
				if (leftPiv == -1) {
					return findPivot(nums, mid + 1, right);
				}
				return leftPiv;
			}
		}

		private boolean binarySearch(int[] nums, int target, int left, int right) {
			while (left < right) {
				int mid = left + (right - left) / 2;
				if (nums[mid] == target) {
					return true;
				} else if (nums[mid] < target) {
					left = mid + 1;
				} else {
					right = mid;
				}
			}
			return nums[left] == target;
		}
	}
}


class Solution:
    def search(self, nums: List[int], target: int) -> bool:
        for i in nums:
            if i == target:
                return True
        return False



#include <vector>
using std::vector;

class Solution {
public:
	bool search(vector<int>& nums, int target) {
		if (nums.empty()) return false;
		int p = findPiv(nums, 0, size(nums) - 1);
		return bs(nums, 0, p, target) || bs(nums, p + 1, size(nums) - 1, target);
	}
private:
	int findPiv(vector<int>& nums, int l, int r) {
		if (l >= r) {
			return -1;
		}
		int m = l + (r - l) / 2;
		if (nums[m] > nums[m + 1]) {
			return m;
		}
		else {
			int leftPiv = findPiv(nums, l, m);
			if (leftPiv == -1) {
				return findPiv(nums, m + 1, r);
			}
			return leftPiv;
		}
	}
	bool bs(vector<int>& nums, int l, int r, int target) {
		while (l <= r) {
			int m = l + (r - l) / 2;
			if (nums[m] == target) return true;
			else if (nums[m] < target) l = m + 1;
			else r = m - 1;
		}
		return false;
	}
};
