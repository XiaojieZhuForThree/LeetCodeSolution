package com.leetcode.problems;

public class Question81 {
	class Solution {
		public boolean search(int[] nums, int target) {
			if (nums == null || nums.length == 0) {
				return false;
			}
			int piv = findPivot(nums, 0, nums.length - 1);
			return binarySearch(nums, target, 0, piv) || binarySearch(nums, target, piv + 1, nums.length - 1);
		}

		private int findPivot(int[] nums, int left, int right) {
			if (left >= right) {
				return -1;
			}
			int mid = left + (right - left) / 2;
			if (nums[mid] > nums[mid + 1]) {
				return mid;
			} else {
				int leftPiv = findPivot(nums, left, mid);
				if (leftPiv == -1) {
					return findPivot(nums, mid + 1, right);
				}
				return leftPiv;
			}
		}

		private boolean binarySearch(int[] nums, int target, int left, int right) {
			while (left < right) {
				int mid = left + (right - left) / 2;
				if (nums[mid] == target) {
					return true;
				} else if (nums[mid] < target) {
					left = mid + 1;
				} else {
					right = mid;
				}
			}
			return nums[left] == target;
		}
	}
}
