package com.leetcode.problems;

import java.util.Arrays;

public class Question1690 {
	class Solution {
		int[][] dp;

		public int stoneGameVII(int[] stones) {
			if (stones == null || stones.length == 0)
				return 0;
			dp = new int[stones.length][stones.length];
			for (int[] row : dp)
				Arrays.fill(row, -1);
			int sum = 0;
			for (int i : stones)
				sum += i;
			return dfs(stones, sum, 0, stones.length - 1);
		}

		private int dfs(int[] stones, int sum, int l, int r) {
			if (l >= r)
				return 0;
			if (dp[l][r] != -1)
				return dp[l][r];
			int val1 = sum - stones[l] - dfs(stones, sum - stones[l], l + 1, r);
			int val2 = sum - stones[r] - dfs(stones, sum - stones[r], l, r - 1);
			dp[l][r] = Math.max(val1, val2);
			return dp[l][r];
		}
	}
}
