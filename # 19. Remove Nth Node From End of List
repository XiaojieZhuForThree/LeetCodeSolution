package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

import com.leetcode.api.ListNode;

public class Question19 {
	class Solution {
		public ListNode removeNthFromEnd(ListNode head, int n) {
			List<ListNode> list = new ArrayList<>();
			while (head != null) {
				list.add(head);
				head = head.next;
			}
			int target = list.size() - n;
			ListNode top = new ListNode(0), dummy = top;
			for (int i = 0; i < list.size(); i++) {
				if (i == target) {
					continue;
				}
				dummy.next = list.get(i);
				dummy = dummy.next;
			}
			dummy.next = null;
			return top.next;
		}
	}
}


#include "ListNode.h"
#include <vector>
using namespace std;

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        vector<ListNode*> nodes;
        ListNode* dummy = head;
        while (dummy != nullptr) {
            nodes.push_back(dummy);
            dummy = dummy->next;
        }
        int i = nodes.size() - n;
        ListNode* target = nodes[i];
        if (i == 0) return target->next;
        ListNode* prev = nodes[i - 1];
        if (i == nodes.size() - 1) {
            prev->next = nullptr;
        }
        else {
            prev->next = nodes[i + 1];
        }
        return head;
    }
};


#include "ListNode.h"
#include <vector>

class Solution {
public:
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        std::vector<ListNode*> v;
        while (head) {
            v.push_back(head);
            head = head->next;
        }
        int idx = size(v) - n;
        if (idx == 0) {
            v[idx]->next = nullptr;
            return  size(v) == 1 ? nullptr : v[1];
        }
        else if (idx == size(v) - 1) {
            v[idx - 1]->next = nullptr;
            return size(v) == 1 ? nullptr : v[0];
        }
        v[idx - 1]->next = v[idx + 1];
        return v[0];
    }
};
