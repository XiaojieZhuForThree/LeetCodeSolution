package com.leetcode.problems;

public class Question1220 {
	class Solution {
		public int countVowelPermutation(int n) {
			int MOD = 1000_000_007;
			long[][] dp = new long[n + 1][5];

			for (int i = 0; i < 5; i++) {
				dp[1][i] = 1;
			}

			for (int i = 2; i <= n; i++) {
				dp[i][0] = (dp[i - 1][1] + dp[i - 1][2] + dp[i - 1][4]) % MOD; // 'a' can follow {'e', 'i', 'u'}
				dp[i][1] = (dp[i - 1][0] + dp[i - 1][2]) % MOD; // 'e' can follow {'a', 'i'}
				dp[i][2] = (dp[i - 1][1] + dp[i - 1][3]) % MOD; // 'i' can follow {'e', 'o'}
				dp[i][3] = (dp[i - 1][2]) % MOD; // 'o' can follow {'i'}
				dp[i][4] = (dp[i - 1][2] + dp[i - 1][3]) % MOD; // 'u' can follow {'i', 'o'}
			}

			long count = 0;

			for (long d : dp[n]) {
				count += d;
				count %= MOD;
			}

			return (int) count;
		}
	}
}


class Solution:
    def countVowelPermutation(self, n: int) -> int:
        return sum(self.helper(n).values()) % 1_000_000_007

    def helper(self, n):
        if n == 1:
            return {'a': 1, 'e': 1, 'i': 1, 'o': 1, 'u': 1}
        prev = self.helper(n - 1)
        cur = {}
        cur['a'] = prev['e'] % 1_000_000_007
        cur['e'] = (prev['a'] % 1_000_000_007 + prev['i'] %
                    1_000_000_007) % 1_000_000_007
        cur['i'] = (prev['a'] % 1_000_000_007 + prev['e'] % 1_000_000_007 +
                    prev['o'] % 1_000_000_007 + prev['u'] % 1_000_000_007) % 1_000_000_007
        cur['o'] = (prev['i'] % 1_000_000_007 + prev['u'] %
                    1_000_000_007) % 1_000_000_007
        cur['u'] = prev['a'] % 1_000_000_007
        return cur
