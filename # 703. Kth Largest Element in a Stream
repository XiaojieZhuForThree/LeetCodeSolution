package problems;

import java.util.PriorityQueue;

public class Question703 {
	class KthLargest {
		PriorityQueue<Integer> pq;
		int k;

		public KthLargest(int k, int[] nums) {
			pq = new PriorityQueue<>();
			this.k = k;
			for (int i : nums) {
				pq.offer(i);
				if (pq.size() > k) {
					pq.poll();
				}
			}
		}

		public int add(int val) {
			pq.offer(val);
			if (pq.size() > k) {
				pq.poll();
			}
			return pq.peek();
		}
	}

	/**
	 * Your KthLargest object will be instantiated and called as such: KthLargest
	 * obj = new KthLargest(k, nums); int param_1 = obj.add(val);
	 */
}


# -*- coding: utf-8 -*-
"""
Created on Fri Apr  8 02:58:43 2022

@author: xiaoj
"""
from typing import List
import heapq


class KthLargest:

    def __init__(self, k: int, nums: List[int]):
        self.k = k
        self.heap = nums
        heapq.heapify(self.heap)
        while len(self.heap) > k:
            heapq.heappop(self.heap)

    def add(self, val: int) -> int:
        heapq.heappush(self.heap, val)
        if len(self.heap) > self.k:
            heapq.heappop(self.heap)
        return self.heap[0]


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)

#include <vector>
#include <algorithm>
#include <queue>

using namespace std;

class KthLargest {
	priority_queue<int, vector<int>, greater<int>> q;
	int s = 0;
public:
	KthLargest(int k, vector<int>& nums) {
		sort(nums.begin(), nums.end());
		for (int i : nums) q.push(i);
		s = k;
		while (size(q) > s) {
			q.pop();
		}
	}

	int add(int val) {
		if (size(q) == s && val <= q.top()) return q.top();
		q.push(val);
		while (size(q) > s) q.pop();
		return q.top();
	}
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */


#include <vector>
#include <algorithm>
#include <queue>

using std::vector;

class KthLargest {
public:
    std::priority_queue<int, vector<int>, std::greater<int>> pq;
    int m;
    KthLargest(int k, vector<int>& nums) {
        m = k;
        for (int i : nums) pq.push(i);
        while (size(pq) > k) pq.pop();
    }

    int add(int val) {
        pq.push(val);
        if (size(pq) > m) pq.pop();
        return pq.top();
    }
};

/**
 * Your KthLargest object will be instantiated and called as such:
 * KthLargest* obj = new KthLargest(k, nums);
 * int param_1 = obj->add(val);
 */
