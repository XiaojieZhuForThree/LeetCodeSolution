package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question76 {
	class Solution {
		public String minWindow(String s, String t) {
			int left = 0, right = 0;
			Map<Character, Integer> charCounts = getCharCounts(t);
			int totalChar = t.length();
			int idealLeft = -1, idealRight = -1;
			int minSize = Integer.MAX_VALUE;

			while (left < s.length()) {
				if (charCounts.containsKey(s.charAt(left))) {
					charCounts.put(s.charAt(left), charCounts.get(s.charAt(left)) - 1);
					totalChar--;
					if (totalChar == 0) {
						minSize = 1;
						idealLeft = left;
						idealRight = left + 1;
					}
					break;
				}
				left++;
			}

			right = left + 1;

			while (right < s.length()) {
				char c = s.charAt(right);
				if (!charCounts.containsKey(c)) {
					right++;
					continue;
				}
				charCounts.put(c, charCounts.get(c) - 1);
				if (charCounts.get(c) >= 0) {
					totalChar--;
				}
				char leftCharacter = s.charAt(left);
				if (charCounts.get(leftCharacter) < 0) {
					for (; left < right; left++) {
						if (!charCounts.containsKey(s.charAt(left))) {
							continue;
						}
						if (charCounts.get(s.charAt(left)) >= 0) {
							break;
						}
						charCounts.put(s.charAt(left), charCounts.get(s.charAt(left)) + 1);
					}
				}
				if (totalChar == 0) {
					int newSize = right - left + 1;
					if (newSize < minSize) {
						minSize = newSize;
						idealLeft = left;
						idealRight = right + 1;
					}
				}
				right++;
			}
			if (minSize == Integer.MAX_VALUE) {
				return "";
			}
			return s.substring(idealLeft, idealRight);
		}

		private final Map<Character, Integer> getCharCounts(String t) {
			Map<Character, Integer> charCounts = new HashMap<>();
			for (char c : t.toCharArray()) {
				charCounts.put(c, charCounts.getOrDefault(c, 0) + 1);
			}
			return charCounts;
		}
	}
}
