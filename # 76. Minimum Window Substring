package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question76 {
	class Solution {
		public String minWindow(String s, String t) {
			int len = t.length(), cur = 0;
			int l = 0, r = 0;
			Map<Character, Integer> ref = new HashMap<>();
			Map<Character, Integer> seen = new HashMap<>();
			String ans = "";
			int minLen = Integer.MAX_VALUE;
			for (char c : t.toCharArray())
				ref.put(c, ref.getOrDefault(c, 0) + 1);
			while (r < s.length()) {
				char c = s.charAt(r);
				if (!ref.containsKey(c))
					seen.put(c, seen.getOrDefault(c, 0) + 1);
				else {
					if (seen.getOrDefault(c, 0) >= ref.get(c))
						seen.put(c, seen.getOrDefault(c, 0) + 1);
					else {
						seen.put(c, seen.getOrDefault(c, 0) + 1);
						cur++;
						if (cur == len) {
							while (cur == len) {
								c = s.charAt(l);
								if (!ref.containsKey(c))
									seen.put(c, seen.get(c) - 1);
								else {
									if (seen.get(c) > ref.get(c))
										seen.put(c, seen.get(c) - 1);
									else {
										seen.put(c, seen.get(c) - 1);
										cur--;
										int nowLen = r - l + 1;
										if (nowLen < minLen) {
											minLen = nowLen;
											ans = s.substring(l, r + 1);
										}
									}
								}
								l++;
							}
						}
					}
				}
				r++;
			}
			return ans;
		}

	}
}
