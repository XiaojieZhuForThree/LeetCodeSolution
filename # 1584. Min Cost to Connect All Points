# -*- coding: utf-8 -*-
"""
Created on Mon Apr 25 22:38:02 2022

@author: xiaoj
"""
from typing import List
import heapq

class Solution:
    def minCostConnectPoints(self, points: List[List[int]]) -> int:
        values = [(0, 0)]
        heapq.heapify(values)
        seen = [False] * len(points)
        cnt = 0
        ans = 0
        while cnt < len(points):
            val, index = heapq.heappop(values)
            if seen[index]:
                continue
            seen[index] = True
            ans += val
            for i in range(len(points)):
                if not seen[i]:
                    dist = abs(points[i][0] - points[index][0]) + abs(points[i][1] - points[index][1])
                    heapq.heappush(values, (dist, i))
            cnt += 1
        return ans
        
#include <vector>
#include <algorithm>

using std::vector;

class Solution {
public:
	int minCostConnectPoints(vector<vector<int>>& points) {
		int n = points.size();

		vector<std::pair<int, std::pair<int, int>>> edges;

		for (int i = 0; i < n; ++i) {
			for (int j = i + 1; j < n; ++j) {
				int distance = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);
				edges.push_back({ distance, {i, j} });
			}
		}

		sort(edges.begin(), edges.end());

		vector<int> parent(n);
		for (int i = 0; i < n; ++i) {
			parent[i] = i;
		}

		int minCost = 0;
		int numEdges = 0;

		for (auto edge : edges) {
			int distance = edge.first;
			int u = edge.second.first;
			int v = edge.second.second;

			int parentU = findParent(parent, u);
			int parentV = findParent(parent, v);

			if (parentU != parentV) {
				parent[parentU] = parentV;
				minCost += distance;
				numEdges++;
			}

			if (numEdges == n - 1) {
				break;
			}
		}

		return minCost;
	}

private:
	int findParent(vector<int>& parent, int node) {
		if (parent[node] == node) {
			return node;
		}
		return parent[node] = findParent(parent, parent[node]);
	}
};
