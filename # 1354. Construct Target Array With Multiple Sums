package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question1354 {
	class Solution {
		public boolean isPossible(int[] A) {
			PriorityQueue<Integer> pq = new PriorityQueue<Integer>((a, b) -> (b - a));
			long total = 0;
			for (int a : A) {
				total += a;
				pq.add(a);
			}
			while (true) {
				int a = pq.poll();
				total -= a;
				if (a == 1 || total == 1)
					return true;
				if (a < total || total == 0 || a % total == 0)
					return false;
				a %= total;
				total += a;
				pq.add(a);
			}
		}
	}
}


import heapq
from typing import List


class Solution:
    def isPossible(self, target: List[int]) -> bool:
        queue = []
        heapq.heapify(queue)
        total = 0
        for i in target:
            total += i
            heapq.heappush(queue, -i)
        while queue[0] < -1:
            cur = -heapq.heappop(queue)
            red = total - cur
            if red == 0 or cur <= red:
                return False
            div, mod = divmod(cur, red)
            if mod == 0:
                div -= 1
                mod = red
            total -= red * div
            heapq.heappush(queue, -mod)
        return True
