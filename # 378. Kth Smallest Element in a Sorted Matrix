class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return -1;
        int n = matrix.length;
        if (k == 1) return matrix[0][0];
        if (k == n*n) return matrix[n-1][n-1];
        int[] dumb = new int[n*n];
        int x = 0;
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n; j++){
                dumb[x] = matrix[i][j];
                x++;
            }
        }
        Arrays.sort(dumb);
        return dumb[k-1];
    }
}

//binary search
class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int nrow = matrix.length;
        int ncol = matrix[0].length;
        
        int start = matrix[0][0];
        int end = matrix[nrow-1][ncol-1];
        
        while(start + 1 < end){
            int mid = start + (end - start) / 2;
            if(countLessEqual(matrix, mid) >= k){
                end = mid;
            }else{
                start = mid;
            }
        }
        
        if(countLessEqual(matrix, start) >= k){
            return start;
        }
        
        return end;
        
    }
    
    //starts from bottom left corner
    public int countLessEqual(int[][] matrix, int value) {
        int cnt = 0;
        
        int i = matrix.length - 1, j = 0;
        while(i >= 0 && j < matrix[0].length){
            if(matrix[i][j] > value){
                i--;
            }else{
                cnt += i + 1;
                j++;
            }
        }
        return cnt;
    }
}
