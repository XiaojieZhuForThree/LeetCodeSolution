package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Question378 {
	class Solution {
		public int kthSmallest(int[][] matrix, int k) {
			List<Integer> list = new ArrayList<>();
			for (int i = 0; i < matrix.length; i++) {
				for (int j : matrix[i])
					list.add(j);
			}
			Collections.sort(list);
			return list.get(k - 1);
		}
	}
}


import heapq
from typing import List


class Solution:
    def kthSmallest(self, matrix: List[List[int]], k: int) -> int:
        n = len(matrix)
        queue = []
        heapq.heapify(queue)
        for i in range(n):
            heapq.heappush(queue, (matrix[i][0], i, 0))
        cnt = 0
        while queue:
            cur = heapq.heappop(queue)
            cnt += 1
            if cnt == k:
                return cur[0]
            i = cur[1]
            j = cur[2]
            if j < n - 1:
                heapq.heappush(queue, (matrix[i][j + 1], i, j + 1))
        return -1
            
