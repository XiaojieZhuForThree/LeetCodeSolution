package com.leetcode.problems;

public class Question926 {
	class Solution {
		public int minFlipsMonoIncr(String s) {
			if (s == null || s.length() == 0)
				return 0;
			int n = s.length();
			int ones = s.charAt(0) - '0';
			int[] ans = new int[n];
			for (int i = 1; i < n; i++) {
				if (s.charAt(i) == '1') {
					ans[i] = ans[i - 1];
					ones++;
				} else {
					int val1 = ones;
					int val2 = ans[i - 1] + 1;
					ans[i] = Math.min(val1, val2);
				}
			}
			return ans[n - 1];
		}
	}
}

#include <string>
#include <vector>
using namespace std;

class Solution {
public:
    int minFlipsMonoIncr(string s) {
        vector<int> zeros, ones;
        int last_zero = s[0] == '0' ? 0 : 1;
        int last_one = s[0] == '1' ? 0 : 1;
        for (int i = 1; i < s.size(); i++) {
            char c = s[i];
            last_one = min(last_zero, last_one) + (c == '1' ? 0 : 1);
            last_zero += (c == '0' ? 0 : 1);
        }
        return min(last_zero, last_one);
    }
};
