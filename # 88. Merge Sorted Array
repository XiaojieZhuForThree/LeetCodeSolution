package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question88 {
	class Solution1 {
		public void merge(int[] nums1, int m, int[] nums2, int n) {
			PriorityQueue<Integer> pq = new PriorityQueue<>();
			for (int i = 0; i < m; i++) {
				pq.offer(nums1[i]);
			}
			for (int i = 0; i < n; i++) {
				pq.offer(nums2[i]);
			}
			for (int i = 0; i < m + n; i++) {
				nums1[i] = pq.poll();
			}
			return;
		}
	}

	class Solution2 {
		public void merge(int[] nums1, int m, int[] nums2, int n) {
			int i = m - 1, j = n - 1, k = m + n - 1;
			while (j >= 0) {
				if (i >= 0 && nums1[i] > nums2[j]) {
					nums1[k--] = nums1[i--];
				} else {
					nums1[k--] = nums2[j--];
				}
			}
			return;
		}
	}
}

from typing import List


class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        ans = []
        i, j = 0, 0
        while i < m and j < n:
            if nums1[i] < nums2[j]:
                ans.append(nums1[i])
                i += 1
            else:
                ans.append(nums2[j])
                j += 1
        if i < m:
            for x in range(i, m):
                ans.append(nums1[x])
        if j < n:
            for x in range(j, n):
                ans.append(nums2[x])
        for i in range(m + n):
            nums1[i] = ans[i]
