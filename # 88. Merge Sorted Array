package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question88 {
	class Solution1 {
		public void merge(int[] nums1, int m, int[] nums2, int n) {
			PriorityQueue<Integer> pq = new PriorityQueue<>();
			for (int i = 0; i < m; i++) {
				pq.offer(nums1[i]);
			}
			for (int i = 0; i < n; i++) {
				pq.offer(nums2[i]);
			}
			for (int i = 0; i < m + n; i++) {
				nums1[i] = pq.poll();
			}
			return;
		}
	}

	class Solution2 {
		public void merge(int[] nums1, int m, int[] nums2, int n) {
			int i = m - 1, j = n - 1, k = m + n - 1;
			while (j >= 0) {
				if (i >= 0 && nums1[i] > nums2[j]) {
					nums1[k--] = nums1[i--];
				} else {
					nums1[k--] = nums2[j--];
				}
			}
			return;
		}
	}
}
