package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

import com.leetcode.api.TreeNode;

public class Question173 {
	class BSTIterator {
		List<Integer> list;
		int size = 0;
		int index = -1;

		public BSTIterator(TreeNode root) {
			list = new ArrayList<>();
			preorder(list, root);
			size = list.size();
		}

		private void preorder(List<Integer> list, TreeNode node) {
			if (node == null) {
				return;
			}
			preorder(list, node.left);
			list.add(node.val);
			preorder(list, node.right);
			return;
		}

		public int next() {
			return list.get(++index);
		}

		public boolean hasNext() {
			return index + 1 < size;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Tue Apr 19 20:38:27 2022

@author: xiaoj
"""
from typing import Optional
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
class BSTIterator:
    
    def __init__(self, root: Optional[TreeNode]):
        self.nodes = self.getNodes(root)
        self.ptr = 0

    def next(self) -> int:
        val = self.nodes[self.ptr]
        self.ptr += 1
        return val

    def hasNext(self) -> bool:
        return self.ptr < len(self.nodes)
    
    def getNodes(self, node):
        if not node:
            return []
        return self.getNodes(node.left) + [node.val] + self.getNodes(node.right)


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
