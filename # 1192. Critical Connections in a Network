package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Question1192 {
	class Solution {
	    List<List<Integer>> ans = new ArrayList<>();
	    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
	        List<List<Integer>> graph = new ArrayList<>();
	        for (int i = 0; i < n; i++) {
	            graph.add(new ArrayList<>());
	        }
	        for (List<Integer> conn : connections) {
	            graph.get(conn.get(0)).add(conn.get(1));
	            graph.get(conn.get(1)).add(conn.get(0));
	        }
	        int[] ids = new int[n], low = new int[n];
	        Arrays.fill(ids, -1);
	        for (int i = 0; i < n; i++) {
	            if (ids[i] == -1) {
	                dfs(graph, i, -1, 0, ids, low);
	            }
	        }
	        return ans;
	    }
	    private void dfs(List<List<Integer>> graph, int i, int prev, int rank, int[] ids, int[] low) {
	        ids[i] = low[i] = rank++;
	        int now = low[i];
	        for (int to : graph.get(i)) {
	            if (to == prev) {
	                continue;
	            }
	            if (ids[to] == -1) {
	                dfs(graph, to, i, rank, ids, low);
	            }
	            low[i] = Math.min(low[i], low[to]);
	            if (now < low[to]) {
	                ans.add(List.of(i, to));
	            }
	        }
	        return;
	    }
	}
}


# -*- coding: utf-8 -*-
"""
Created on Tue May 17 19:06:16 2022

@author: xiaoj
"""
from typing import List
from collections import defaultdict


class Solution:
    def criticalConnections(self, n: int, connections: List[List[int]]) -> List[List[int]]:

        node_idx = 0
        graph = defaultdict(list)
        for u, v in connections:
            graph[u].append(v)
            graph[v].append(u)

        assignedid = [None] * n
        rank = [None] * n
        res = []

        def dfs(node, parent):
            nonlocal node_idx
            if rank[node] is not None:
                return

            # Preorder Id Assignment "on the fly"
            assignedid[node] = rank[node] = node_idx
            node_idx += 1

            # 1. Preorder DFS on Undirected Graph
            for neigh in graph[node]:
                if neigh != parent:
                    dfs(neigh, node)
                    # Update Rank Postorder
                    if rank[neigh] < rank[node]:
                        rank[node] = rank[neigh]

            # 2. Critical connection
            # Neighbor Rank > Original Node means no cycle in between exists
            for neigh in graph[node]:
                if neigh != parent and rank[neigh] > assignedid[node]:
                    res.append([neigh, node])

        dfs(0, None)

        return res
