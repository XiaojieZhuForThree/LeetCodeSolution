class Solution {
    public List<List<Integer>> criticalConnections(int n, List<List<Integer>> connections) {
        List<Integer>[] graph = new ArrayList[n];
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<>();
        }
        for (List<Integer> edge : connections) {
            graph[edge.get(0)].add(edge.get(1));
            graph[edge.get(1)].add(edge.get(0));
        }
        boolean[] visited = new boolean[n];
        int[] low = new int[n];
        List<List<Integer>>ans = new ArrayList<>();
        dfs(graph, -1, 0, 0, visited, low, ans);
        return ans;
    }
    private void dfs(List<Integer>[]graph, int prev, int cur, int id, boolean[] visited, int[] low, List<List<Integer>>ans) {
        visited[cur] = true;
        low[cur] = id++;
        int now = low[cur];
        for (int i : graph[cur]) {
            if (i == prev) {
                continue;
            } 
            if (!visited[i]) {
                dfs(graph, cur, i, id, visited, low, ans);
            }
            low[cur] = Math.min(low[cur], low[i]);
            if (now < low[i]) {
                ans.add(Arrays.asList(cur, i));
            }
        }
    }
}
