package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question150 {
	class Solution {
		public int evalRPN(String[] tokens) {
			Deque<Integer> stack = new ArrayDeque<>();
			for (String s : tokens) {
				if (s.equals("+")) {
					int val1 = stack.pollLast();
					int val2 = stack.pollLast();
					stack.offerLast(val2 + val1);
				} else if (s.equals("-")) {
					int val1 = stack.pollLast();
					int val2 = stack.pollLast();
					stack.offerLast(val2 - val1);
				} else if (s.equals("*")) {
					int val1 = stack.pollLast();
					int val2 = stack.pollLast();
					stack.offerLast(val2 * val1);
				} else if (s.equals("/")) {
					int val1 = stack.pollLast();
					int val2 = stack.pollLast();
					stack.offerLast(val2 / val1);
				} else {
					stack.offerLast(Integer.parseInt(s));
				}
			}
			return stack.pollLast();
		}
	}
}


#include <stack>
#include <string>
#include <vector>
using namespace std;

class Solution {
public:
	int evalRPN(vector<string>& tokens) {
		stack<long> stack;
		for (auto& s : tokens) {
			if (s == "+") {
				long val1 = stack.top();
				stack.pop();
				long val2 = stack.top();
				stack.pop();
				stack.push(val2 + val1);
			}
			else if (s == "-") {
				long val1 = stack.top();
				stack.pop();
				long val2 = stack.top();
				stack.pop();
				stack.push(val2 - val1);
			}
			else if (s == "*") {
				long val1 = stack.top();
				stack.pop();
				long val2 = stack.top();
				stack.pop();
				stack.push(val2 * val1);
			}
			else if (s == "/") {
				long val1 = stack.top();
				stack.pop();
				long val2 = stack.top();
				stack.pop();
				stack.push(val2 / val1);
			}
			else {
				stack.push(stoi(s));
			}
		}
		return stack.top();
	}
};
