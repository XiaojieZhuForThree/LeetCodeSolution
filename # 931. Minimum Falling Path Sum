```
Given a square array of integers A, we want the minimum sum of a falling path through A.

A falling path starts at any element in the first row, and chooses one element from each row.  The next row's choice must be in a column that is different from the previous row's column by at most one.

 

Example 1:

Input: [[1,2,3],[4,5,6],[7,8,9]]
Output: 12
Explanation: 
The possible falling paths are:
[1,4,7], [1,4,8], [1,5,7], [1,5,8], [1,5,9]
[2,4,7], [2,4,8], [2,5,7], [2,5,8], [2,5,9], [2,6,8], [2,6,9]
[3,5,7], [3,5,8], [3,5,9], [3,6,8], [3,6,9]
The falling path with the smallest sum is [1,4,7], so the answer is 12.

 

Note:

1 <= A.length == A[0].length <= 100
-100 <= A[i][j] <= 100
```

1.
class Solution {
    public int minFallingPathSum(int[][] A) {
        int len = A.length;
        int[][] dp = new int[len][len];
        dp[0] = A[0];
        for (int i = 1; i < len; i++) {
            for (int j = 0; j < len; j++) {
                int val1 = j > 0 ? dp[i-1][j-1] : Integer.MAX_VALUE;
                int val2 = dp[i-1][j];
                int val3 = j < A.length - 1 ? dp[i-1][j+1] : Integer.MAX_VALUE;
                dp[i][j] = Math.min(val1, Math.min(val2, val3)) + A[i][j];
            }
        }
        int ans = dp[len-1][0];
        for (int i = 0; i < len; i++) {
            ans = Math.min(ans, dp[len-1][i]);
        }
        return ans;
    }
}

2.
class Solution {
    public int minFallingPathSum(int[][] A) {
        if (A == null || A.length == 0) return 0;
        int len = A.length;
        for (int i = 1; i < len; i++) {
            for (int j = 0; j < len; j++) {
                int val1 = j > 0 ? A[i-1][j-1] : Integer.MAX_VALUE;
                int val2 = A[i-1][j];
                int val3 = j < A.length - 1 ? A[i-1][j+1] : Integer.MAX_VALUE;
                A[i][j] += Math.min(val1, Math.min(val2, val3));
            }
        }
        int ans = A[len-1][0];
        for (int i = 0; i < len; i++) {
            ans = Math.min(ans, A[len-1][i]);
        }
        return ans;
    }
}



#include <vector>
using namespace std;

class Solution {
public:
	int minFallingPathSum(vector<vector<int>>& matrix) {
		int m = matrix.size(), n = matrix[0].size();
		int ans = INT_MAX;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (i > 0) {
					int cand1 = matrix[i - 1][j];
					int cand2 = j > 0 ? matrix[i - 1][j - 1] : INT_MAX;
					int cand3 = j < n - 1 ? matrix[i - 1][j + 1] : INT_MAX;
					matrix[i][j] += min({ cand1, cand2, cand3 });
				}
				if (i == m - 1) ans = min(ans, matrix[i][j]);
			}
		}
		return ans;
	}
};
