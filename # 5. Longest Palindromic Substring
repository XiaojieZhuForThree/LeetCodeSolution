package com.leetcode.problems;

public class Question5 {
	class Solution {
		int max = 0;
		String ans = "";

		public String longestPalindrome(String s) {
			for (int i = 0; i < s.length(); i++) {
				getMax(s, i, i);
				getMax(s, i, i + 1);
			}
			return ans;
		}

		private void getMax(String s, int left, int right) {
			while (left >= 0 && right < s.length() && s.charAt(left) == s.charAt(right)) {
				left--;
				right++;
			}
			int len = right - left - 1;
			if (len > max) {
				max = len;
				ans = s.substring(left + 1, right);
			}
		}
	}
}


#include <string>
using std::string;

class Solution {
public:
	string longestPalindrome(string s) {
		int cur = 0;
		string cand = "";
		for (int i = 0; i < size(s); i++) {
			string s1 = getS(s, i, i);
			string s2 = "";
			if (i + 1 < size(s) && s[i] == s[i + 1]) s2 = getS(s, i, i + 1);
			if (size(s1) > cur) {
				cur = size(s1);
				cand = s1;
			}
			if (size(s2) > cur) {
				cur = size(s2);
				cand = s2;
			}
		}
		return cand;
	}
private:
	string getS(string& s, int i, int j) {
		while (i >= 0 && j < size(s) && s[i] == s[j]) {
			i--;
			j++;
		}
		i++;
		j--;
		return s.substr(i, j - i + 1);
	}
};
