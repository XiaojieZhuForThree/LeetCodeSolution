package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question71 {
	class Solution {
		public String simplifyPath(String path) {
			String[] dirs = path.split("/");
			Deque<String> stack = new ArrayDeque<>();
			for (String dir : dirs) {
				if (dir.equals(".")) {
					continue;
				} else if (dir.equals("..")) {
					if (!stack.isEmpty()) {
						stack.pollLast();
					}
				} else if (!dir.isEmpty()) {
					stack.offerLast(dir);
				}
			}
			StringBuilder sb = new StringBuilder();
			for (String s : stack) {
				sb.append("/");
				sb.append(s);
			}
			return sb.toString().isEmpty() ? "/" : sb.toString();
		}
	}
}


#include <string>
#include <deque>
using namespace std;

class Solution {
public:
	string simplifyPath(string path) {
		string ans;
		deque<string> stack;
		int i = 0;
		for (int j = 0; j < size(path);) {
			if (path[j] == '/') {
				process(stack, path.substr(i, j - i));
				i = j + 1;
				j = i;
			}
			else j++;
		}
		if (i < size(path)) process(stack, path.substr(i, size(path) - i));
		for (string s : stack) {
			ans += "/";
			ans += s;
		}
		return ans.empty() ? "/" : ans;
	}
private:
	void process(deque<string>& stack, string s) {
		if (s == "..") {
			if (!stack.empty()) stack.pop_back();
		}
		else if (!s.empty() && s != ".") stack.push_back(s);
	}
};
