package com.leetcode.problems;

import java.util.Arrays;

public class Question16 {
	class Solution {
		public int threeSumClosest(int[] nums, int target) {
			Arrays.sort(nums);
			int closestSum = nums[0] + nums[1] + nums[nums.length - 1];
			for (int i = 0; i < nums.length - 2; ++i) {
				int ptr1 = i + 1, ptr2 = nums.length - 1;
				while (ptr1 < ptr2) {
					int sum = nums[i] + nums[ptr1] + nums[ptr2];
					if (Math.abs(target - sum) < Math.abs(target - closestSum))
						closestSum = sum;
					if (sum > target)
						ptr2--; // need decrease th sum
					else
						ptr1++; // need to increase sum
				}
			}
			return closestSum;
		}
	}
}


#include <climits>
#include <algorithm>
#include <vector>

using namespace std;
class Solution {
public:
    int threeSumClosest(vector<int>& nums, int target) {
        int n = nums.size();
        long long ans = INT_MAX;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n - 2; i++) {
            int l = i + 1, r = n - 1;
            while (l < r) {
                int cur = nums[i] + nums[l] + nums[r];
                if (abs(cur - target) < abs(ans - target)) ans = cur;
                if (cur < target) l++;
                else r--;
            }
        }
        return ans;
    }
};
