class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        int[][] dp = new int[m+1][n+1];
        for (int i = 0; i <= m; i++) {
            dp[i][0] = i;
        }
        for (int i = 0; i <= n; i++) {
            dp[0][i] = i;
        }
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i-1][j-1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i-1][j], Math.min(dp[i-1][j-1], dp[i][j-1]));
                }
            }
        }
        return dp[m][n];
    }
}


#include <vector>
#include <string>
using namespace std;

class Solution {
public:
	int minDistance(string word1, string word2) {
		int m = size(word1), n = size(word2);
		if (m == 0) return n;
		if (n == 0) return m;
		vector<vector<int>> dp;
		for (int i = 0; i <= m; i++) {
			dp.push_back(vector<int>(n + 1, m + n));
		}
		for (int i = 0; i <= n; i++) dp[0][i] = i;
		for (int i = 0; i <= m; i++) dp[i][0] = i;
		for (int i = 1; i <= m; i++) {
			for (int j = 1; j <= n; j++) {
				int cand = 0;
				if (word1[i - 1] == word2[j - 1]) {
					cand = dp[i - 1][j - 1];
				}
				else cand = dp[i - 1][j - 1] + 1;
				dp[i][j] = min(min(dp[i - 1][j], dp[i][j - 1]) + 1, cand);
			}
		}
		return dp[m][n];
	}
};
