class Solution {
    public List<String> braceExpansionII(String expression) {
        if (expression == null || expression.length() == 0) {
            return new ArrayList<String>();
        }
        Stack<List<String>> stack = new Stack<>();
        boolean mult = false;
        for (int i = 0; i < expression.length(); i++) {
            char c = expression.charAt(i);
            if (c == '{') {
                int j = i, par = 1;
                while (par != 0) {
                    j++;
                    if (expression.charAt(j) == '{') {
                        par++;
                    } else if (expression.charAt(j) == '}') {
                        par--;
                    }
                }
                List<String> list = braceExpansionII(expression.substring(i+1, j));
                if (mult) {
                    stack.push(multiply(stack.pop(), list));
                } else {
                    stack.push(list);
                }
                i = j;
                mult = true;
            } else if (Character.isLetter(c)) {
                List<String> list = new ArrayList<>();
                list.add(Character.toString(c));
                if (mult) {
                    stack.push(multiply(stack.pop(), list));
                } else {
                    stack.push(list);
                }
                mult = true;
            } else if (c == ',') {
                mult = false;
            }
        }
        Set<String> set = new HashSet<>();
        while (!stack.isEmpty()) {
            for (String i : stack.pop()) {
                set.add(i);
            }
        }
        List<String> ans = new ArrayList<>();
        ans.addAll(set);
        Collections.sort(ans);
        return ans;
    }
    List<String> multiply(List<String> l1, List<String> l2) {
        Set<String> set = new HashSet<>();
        for (String i : l1) {
            for (String j : l2) {
                StringBuilder sb = new StringBuilder();
                sb.append(i);
                sb.append(j);
                set.add(sb.toString());
            }
        }
        List<String> list = new ArrayList<>();
        list.addAll(set);
        return list;
    }
}
