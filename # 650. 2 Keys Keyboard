class Solution {
    public int minSteps(int n) {
        if (n == 0 || n == 1) {
            return 0;
        }
        if (n == 2) {
            return 2;
        }
        int[] steps = new int[n+1];
        steps[1] = 0;
        steps[2] = 2;
        for (int i = 3; i <= n; i++) {
            steps[i] = i;
            for (int j = 2; j <= i / 2; j++) {
                if (i % j == 0) {
                    steps[i] = Math.min(steps[i], steps[j] + i / j);
                }
            }
        }
        return steps[n];
    }
}


#include <vector>
using std::vector;

class Solution {
public:
    int minSteps(int n) {
        if (n == 1) return 0;
        vector<int> dp;
        dp.push_back(0);
        for (int i = 2; i <= n; i++) {
            int cand = n;
            for (int j = 1; j * 2 <= i; j++) {
                if (i % j != 0) continue;
                cand = std::min(cand, dp[j - 1] + 1 + (i - j) / j);
            }
            dp.push_back(cand);
        }
        return dp[n - 1];
    }
};
