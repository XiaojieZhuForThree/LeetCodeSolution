package problems;

import java.util.HashMap;
import java.util.Map;

public class Question1171 {
	/**
	 * Definition for singly-linked list. public class ListNode { int val; ListNode
	 * next; ListNode() {} ListNode(int val) { this.val = val; } ListNode(int val,
	 * ListNode next) { this.val = val; this.next = next; } }
	 */
	class Solution {
		public ListNode removeZeroSumSublists(ListNode head) {
			ListNode top = new ListNode(0);
			top.next = head;
			Map<Integer, ListNode> pos = new HashMap<>();
			pos.put(0, top);
			int cumulate = 0;
			while (head != null) {
				cumulate += head.val;
				if (pos.containsKey(cumulate)) {
					ListNode prev = pos.get(cumulate);
					ListNode dummy = prev.next;
					int cur = cumulate;
					while (dummy != head) {
						cur += dummy.val;
						pos.remove(cur);
						dummy = dummy.next;
					}
					prev.next = head.next;
				} else {
					pos.put(cumulate, head);
				}
				head = head.next;
			}
			return top.next;
		}
	}
}


#include "ListNode.h"
#include <unordered_map>
#include <deque>

class Solution {
public:
	ListNode* removeZeroSumSublists(ListNode* head) {
		ListNode* h = new ListNode(0), * d = head, * p = h;
		std::unordered_map<int, ListNode*> il;
		std::unordered_map<ListNode*, int> li;
		std::deque<ListNode*> st;
		il[0] = h;
		li[h] = 0;
		st.push_back(h);
		int s = 0;
		while (d) {
			s += d->val;
			if (il.count(s)) {
				p = il[s];
				while (st.back() != p) {
					int v = li[st.back()];
					il.erase(v);
					li.erase(st.back());
					st.pop_back();
				}
				p->next = nullptr;
			}
			else {
				p->next = d;
				p = p->next;
				il[s] = d;
				li[d] = s;
				st.push_back(d);
			}
			d = d->next;
		}
		return h->next;
	}
};
