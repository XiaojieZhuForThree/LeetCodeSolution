#include <vector>
#include <unordered_map>
#include <algorithm>
using namespace std;

class Solution {
public:
	vector<vector<int>> findWinners(vector<vector<int>>& matches) {
		unordered_map<int, int> winners, losers;
		for (auto& m : matches) {
			int w = m[0], l = m[1];
			if (winners.count(l)) winners.erase(l);
			losers[l]++;
			if (!losers.count(w)) winners[w] = 1;
		}
		vector<int> all_win, lose_one;
		for (auto& i : winners) all_win.push_back(i.first);
		for (auto& i : losers) {
			if (i.second == 1) lose_one.push_back(i.first);
		}
		sort(all_win.begin(), all_win.end());
		sort(lose_one.begin(), lose_one.end());
		return { all_win, lose_one };
	}
};


#include <vector>
#include <unordered_map>
#include <algorithm>
#include <unordered_set>
using std::vector;

class Solution {
public:
    vector<vector<int>> findWinners(vector<vector<int>>& matches) {
        std::unordered_map<int, int> l;
        for (auto& m : matches) l[m[1]]++;
        std::unordered_set<int> f, s;
        for (auto& m : matches) {
            for (int i : m) {
                if (!l.count(i)) f.insert(i);
                else if (l[i] == 1) s.insert(i);
            }
        }
        vector<int> a(f.begin(), f.end()), b(s.begin(), s.end());
        sort(a.begin(), a.end());
        sort(b.begin(), b.end());
        return { a, b };
    }
};
