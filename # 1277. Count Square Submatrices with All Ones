package com.leetcode.problems;

public class Question1277 {
	class Solution {
		public int countSquares(int[][] matrix) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
				return 0;
			int m = matrix.length, n = matrix[0].length;
			int ans = 0;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (matrix[i][j] == 0)
						continue;
					int up = i > 0 ? matrix[i - 1][j] : 0;
					int left = j > 0 ? matrix[i][j - 1] : 0;
					int diag = i > 0 && j > 0 ? matrix[i - 1][j - 1] : 0;
					int side = 1 + Math.min(diag, Math.min(up, left));
					ans += side;
					matrix[i][j] = side;
				}
			}
			return ans;
		}
	}
}


#include <vector>
using std::vector;

class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int ans = 0, m = size(matrix), n = size(matrix[0]);
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (matrix[i][j] == 0) continue;
                dp[i][j] = 1;
                int u = 0, l = 0, d = 0;
                if (i - 1 >= 0) u = dp[i - 1][j];
                if (j - 1 >= 0) l = dp[i][j - 1];
                if (i - 1 >= 0 && j - 1 >= 0) d = dp[i - 1][j - 1];
                dp[i][j] += std::min(u, std::min(l, d));
                ans += dp[i][j];
            }
        }
        return ans;
    }
};
