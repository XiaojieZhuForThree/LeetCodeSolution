class Solution {
    public int integerBreak(int n) {
        int[] prevs = new int[n+1];
        prevs[1] = 1;
        for (int i = 2; i < n+1; i++) {
            int val = 0;
            for (int j = 1; j <= i/2; j++) {
                val = Math.max(Math.max(j, prevs[j]) * Math.max(i-j, prevs[i-j]), val);
            }
            prevs[i] = val;
        }
        return prevs[n];
    }
}

#include <unordered_map>
class Solution {
public:
	std::unordered_map<int, int> dp;
	int integerBreak(int n) {
		if (n == 2) return 1;
		if (dp.count(n)) return dp[n];
		int ans = 1;
		for (int i = 2; i < n; i++) ans = std::max(ans, std::max(i * integerBreak(n - i), i * (n - i)));
		dp[n] = ans;
		return ans;
	}
};
