package com.leetcode.problems;

public class Question459 {
	class Solution {
		public boolean repeatedSubstringPattern(String s) {
			for (int i = 1; i <= s.length() / 2; i++) {
				if (s.length() % i == 0 && canMatch(s, i)) {
					return true;
				}
			}
			return false;
		}

		private final boolean canMatch(String s, int i) {
			String pattern = s.substring(0, i);
			for (int j = i; j <= s.length() - i; j += i) {
				if (!pattern.equals(s.substring(j, j + i))) {
					return false;
				}
			}
			return true;
		}
	}
}


#include <string>
using std::string;

class Solution {
public:
	bool repeatedSubstringPattern(string s) {
		for (int i = 1; i <= size(s) / 2; i++) {
			string p = s.substr(0, i);
			if (canRep(s, p)) {
				return true;
			}
		}
		return false;
	}
private:
	bool canRep(string& s, string& p) {
		if (size(s) % size(p)) return false;
		for (int i = 0; i <= size(s) - size(p); i += size(p)) {
			if (s.substr(i, size(p)) != p) return false;
		}
		return true;
	}
};
