#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
	int minTaps(int n, vector<int>& ranges) {
		vector<std::pair<int, int>> pumpRange(ranges.size());
		int i = 0;
		for (auto range : ranges) {
			pumpRange[i++] = { i - range, i + range };
		}
		i = 0;
		sort(pumpRange.begin(), pumpRange.end());
		int start = 0;
		int end = 0;
		int count = 0;
		while (end < n) {
			while (i < pumpRange.size() && pumpRange[i].first <= start) {
				end = std::max(end, pumpRange[i].second);
				i++;
			}
			count++;

			if (start == end) {
				return -1;
			}
			start = end;
		}
		return count;
	}
};


class Solution2 {
public:
	int minTaps(int n, vector<int>& ranges) {
		vector<int> dp(n + 1, 100001);
		dp[0] = 0;
		for (int i = 0; i <= n; i++) {
			for (int j = std::max(0, i - ranges[i]); j <= std::min(n, i + ranges[i]); j++) {
				dp[j] = std::min(dp[j], dp[std::max(0, i - ranges[i])] + 1);
			}
		}
		if (dp[n] == 100001) return -1;
		return dp[n];
	}
};
