/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

class Solution {
	public List<Interval> merge(List<Interval> intervals) {
		if (intervals.size() == 0) {
			return intervals;
		}
		Collections.sort(intervals, new Comparator<Interval>() {

			public int compare(Interval o1, Interval o2) {
                return o1.start-o2.start;
			}			
		});
		int pointer = 0;
		while (pointer < intervals.size()) {
			Interval compare = intervals.get(pointer);
			int end = compare.end;
			int index = pointer + 1;
			if (index < intervals.size() && intervals.get(index).start <= end) {
				compare.end = Math.max(compare.end, intervals.get(index).end);
				intervals.remove(index);
			}
			else {
				pointer ++;
			}
		}
		return intervals;
	}
}
