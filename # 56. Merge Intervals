/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */

class Solution {
	public List<Interval> merge(List<Interval> intervals) {
		if (intervals.size() == 0) {
			return intervals;
		}
		Collections.sort(intervals, new Comparator<Interval>() {
			public int compare(Interval o1, Interval o2) {
				return o1.start - o2.start;
			}
		});
		int pointer = 0;
		while (pointer < intervals.size()) {
			Interval compare = intervals.get(pointer);
			int end = compare.end;
			int index = pointer + 1;
			if (index < intervals.size() && intervals.get(index).start <= end) {
				compare.end = Math.max(compare.end, intervals.get(index).end);
				intervals.remove(index);
			} else {
				pointer++;
			}
		}
		return intervals;
	}
}


class Solution {
    public int[][] merge(int[][] intervals) {
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[0] - o2[0];
            }
        });
        boolean[] removed = new boolean[intervals.length];
        int no = 0;
        int s = 0;
        for (int i = 1; i < intervals.length; i++) {
            int[] compare = intervals[i];
            int[] ref = intervals[s];
            if (compare[0] <= ref[1]) {
                ref[1] = Math.max(compare[1], ref[1]);
                removed[i] = true;
                no++;
            } else {
                s = i;
            }
        }
        int[][] ans = new int[intervals.length - no][2];
        int index = 0;
        for (int i = 0; i < intervals.length; i++) {
            if (!removed[i]) {
                ans[index++] = intervals[i];
            }
        }
        return ans;
    }
}


class Solution {
    public int[][] merge(int[][] intervals) {
        if (intervals == null || intervals.length == 0) {
            return intervals;
        }
        Arrays.sort(intervals, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                return o1[0] - o2[0];
            }
        });
        List<int[]> res = new ArrayList<>();
        int left = intervals[0][0];
        int right = intervals[0][1];
        for (int[] interval : intervals) {
            if (right >= interval[0]) {
                right = Math.max(right, interval[1]);
            } else {
                res.add(new int[]{left, right});
                left = interval[0];
                right = interval[1];
            }
        }
        res.add(new int[]{left, right});
        return res.toArray(new int[res.size()][2]);
    }
}
