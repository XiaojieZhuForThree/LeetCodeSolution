package com.leetcode.problems;

import java.util.Arrays;

public class Question354 {
	class Solution1 {
		public int maxEnvelopes(int[][] envelopes) {
			Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
			int[] dp = new int[envelopes.length];
			Arrays.fill(dp, 1);
			int ans = 1;
			for (int i = 1; i < dp.length; i++) {
				for (int j = 0; j < i; j++) {
					if (envelopes[j][0] < envelopes[i][0] && envelopes[j][1] < envelopes[i][1]) {
						dp[i] = Math.max(dp[i], dp[j] + 1);
					}
				}
				ans = Math.max(ans, dp[i]);
			}
			return ans;
		}
	}

	class Solution2 {
		public int maxEnvelopes(int[][] envelopes) {
			Arrays.sort(envelopes, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
			int[] dp = new int[envelopes.length];
			int ans = 0;
			for (int[] env : envelopes) {
				int index = Arrays.binarySearch(dp, 0, ans, env[1]);
				if (index < 0) {
					index = -(index + 1);
				}
				dp[index] = env[1];
				if (index == ans) {
					ans++;
				}
			}
			return ans;
		}
	}
}

from typing import List


class Solution:
    def maxEnvelopes(self, envelopes: List[List[int]]) -> int:
        n = len(envelopes)
        envelopes.sort(key = lambda x : (x[0], -x[1]))
        nums = []
        for i in range(n):
            nums.append(envelopes[i][1])
        piles = 0
        top = []
        
        for i in range(n):
            cur = nums[i]
            l, r = 0, piles
            while l < r:
                mid = l + (r - l) // 2
                if top[mid] >= cur:
                    r = mid
                else:
                    l = mid + 1
            if l >= piles:
                piles += 1
                top.append(cur)
            else:
                top[l] = cur
        return piles
                
        
