package com.leetcode.problems;

import com.leetcode.api.ListNode;

public class Question234 {
	class Solution {
		public boolean isPalindrome(ListNode head) {
			int len = getLength(head);
			if (len == 1) {
				return true;
			}
			int half = len / 2;
			ListNode prev = null, cur = head, next = head.next;
			for (int i = 0; i < half; i++) {
				cur.next = prev;
				prev = cur;
				cur = next;
				next = cur.next;
			}
			if (len % 2 == 1) {
				cur = cur.next;
			}
			while (cur != null && prev != null) {
				if (cur.val != prev.val) {
					return false;
				}
				cur = cur.next;
				prev = prev.next;
			}
			return true;
		}

		private int getLength(ListNode node) {
			if (node == null) {
				return 0;
			}
			return 1 + getLength(node.next);
		}
	}
}



from typing import Optional
from data.ListNode import ListNode


class Solution:
    def isPalindrome(self, head: Optional[ListNode]) -> bool:
        vals = []
        while head:
            vals.append(head.val)
            head = head.next
        return self.isPali(vals)

    def isPali(self, vals):
        l, r = 0, len(vals) - 1
        while l < r:
            if vals[l] != vals[r]:
                return False
            l += 1
            r -= 1
        return True



#include "ListNode.h"
#include <vector>

class Solution {
public:
    bool isPalindrome(ListNode* head) {
        std::vector<int> v;
        while (head) {
            v.push_back(head->val);
            head = head->next;
        }
        return isPali(v);
    }
private:
    bool isPali(std::vector<int>& v) {
        int l = 0, r = size(v) - 1;
        while (l < r) {
            if (v[l++] != v[r--]) return false;
        }
        return true;
    }
};
