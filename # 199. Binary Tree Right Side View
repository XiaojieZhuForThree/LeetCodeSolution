package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.List;
import java.util.Queue;

import com.leetcode.api.TreeNode;

public class Question199 {
	class Solution {
		public List<Integer> rightSideView(TreeNode root) {
			List<Integer> ans = new ArrayList<>();
			Queue<TreeNode> queue = new ArrayDeque<>();
			if (root != null) {
				queue.offer(root);
			}
			while (!queue.isEmpty()) {
				TreeNode node = null;
				for (int i = queue.size(); i > 0; i--) {
					node = queue.poll();
					if (node.left != null) {
						queue.offer(node.left);
					}
					if (node.right != null) {
						queue.offer(node.right);
					}
				}
				ans.add(node.val);
			}
			return ans;
		}
	}
}


# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rightSideView(self, root: Optional[TreeNode]) -> List[int]:
        queue = []
        ans = []
        if root:
            queue.append(root)
        while queue:
            ans.append(queue[-1].val)
            for i in range(len(queue), 0, -1):
                cur = queue.pop(0)
                if cur.left:
                    queue.append(cur.left)
                if cur.right:
                    queue.append(cur.right)
        return ans
