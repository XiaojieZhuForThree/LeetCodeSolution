package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Deque;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class Question870 {
	class Solution1 {
		public int[] advantageCount(int[] A, int[] B) {
			Arrays.sort(A);
			int[] C = B.clone();
			Arrays.sort(C);
			int i = 0, j = A.length - 1;
			Map<Integer, Deque<Integer>> map = new HashMap<>();
			for (int m = C.length - 1; m >= 0; m--) {
				map.putIfAbsent(C[m], new ArrayDeque<>());
				if (A[j] > C[m]) {
					map.get(C[m]).offer(A[j--]);
				} else {
					map.get(C[m]).offer(A[i++]);
				}
			}
			for (int x = 0; x < B.length; x++) {
				A[x] = map.get(B[x]).poll();
			}
			return A;
		}
	}

	class Solution2 {
		public int[] advantageCount(int[] A, int[] B) {
			PriorityQueue<Integer> pqA = new PriorityQueue<>((a, b) -> A[a] - A[b]);
			PriorityQueue<Integer> pqB = new PriorityQueue<>((a, b) -> B[a] - B[b]);
			for (int i = 0; i < A.length; i++) {
				pqA.offer(i);
				pqB.offer(i);
			}
			int[] ans = new int[A.length];
			Arrays.fill(ans, -1);
			while (!pqB.isEmpty() && !pqA.isEmpty()) {
				int bIndex = pqB.poll();
				while (!pqA.isEmpty() && A[pqA.peek()] <= B[bIndex]) {
					pqA.poll();
				}
				if (!pqA.isEmpty()) {
					int aIndex = pqA.poll();
					ans[bIndex] = A[aIndex];
					A[aIndex] = -1;
				}
			}
			int j = 0;
			for (int i = 0; i < ans.length; i++) {
				if (ans[i] == -1) {
					while (A[j] == -1) {
						j++;
					}
					ans[i] = A[j];
					A[j] = -1;
				}
			}
			return ans;
		}
	}
}
