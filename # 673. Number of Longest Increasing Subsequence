package com.leetcode.problems;

public class Question673 {
	class Solution {
		public int findNumberOfLIS(int[] nums) {
			if (nums == null || nums.length == 0) {
				return 0;
			}
			int max = 1, cnt = 1;
			int[] lens = new int[nums.length];
			int[] cnts = new int[nums.length];
			lens[0] = 1;
			cnts[0] = 1;
			for (int i = 1; i < nums.length; i++) {
				int len = 1, count = 1;
				for (int j = 0; j < i; j++) {
					if (nums[i] > nums[j]) {
						int curLen = lens[j] + 1;
						if (curLen > len) {
							len = curLen;
							count = cnts[j];
						} else if (curLen == len) {
							count += cnts[j];
						}
					}
				}
				if (len > max) {
					max = len;
					cnt = count;
				} else if (len == max) {
					cnt += count;
				}
				lens[i] = len;
				cnts[i] = count;
			}
			return cnt;
		}
	}
}


#include <vector>
using std::vector;

class Solution {
public:
	int findNumberOfLIS(vector<int>& nums) {
		int maxL = 0, ans = 0;
		vector<int> lens(size(nums), 0);
		vector<int> cnts(size(nums), 0);
		for (int i = 0; i < size(nums); i++) {
			int cand = 1, cnt = 1;
			for (int j = 0; j < i; j++) {
				if (nums[j] >= nums[i]) continue;
				int val = 1 + lens[j];
				if (val > cand) {
					cand = val;
					cnt = cnts[j];
				}
				else if (val == cand) cnt += cnts[j];
			}
			if (cand > maxL) {
				maxL = cand;
				ans = cnt;
			}
			else if (cand == maxL) ans += cnt;
			lens[i] = cand;
			cnts[i] = cnt;
		}
		return ans;
	}
};
