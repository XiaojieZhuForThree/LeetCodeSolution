package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.PriorityQueue;

public class Question1696 {
	class Solution1 {
		public int maxResult(int[] nums, int k) {
			if (nums == null || nums.length == 0)
				return 0;
			if (k == 0)
				return 0;
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> nums[b] - nums[a]);
			for (int i = 0; i < nums.length; i++) {
				while (!pq.isEmpty() && pq.peek() + k < i)
					pq.poll();
				if (pq.isEmpty())
					pq.offer(i);
				else {
					nums[i] += nums[pq.peek()];
					pq.offer(i);
				}
			}
			return nums[nums.length - 1];
		}
	}

	class Solution2 {
		public int maxResult(int[] nums, int k) {
			if (nums == null || nums.length == 0)
				return 0;
			if (k == 0)
				return 0;
			Deque<Integer> queue = new ArrayDeque<>();
			for (int i = 0; i < nums.length; i++) {
				while (!queue.isEmpty() && queue.peekFirst() + k < i)
					queue.pollFirst();
				if (queue.isEmpty())
					queue.offer(i);
				else {
					nums[i] += nums[queue.peekFirst()];
					while (!queue.isEmpty() && nums[queue.peekLast()] < nums[i])
						queue.pollLast();
					queue.offerLast(i);
				}
			}
			return nums[nums.length - 1];
		}
	}
}


from collections import deque
from typing import List

from sortedcontainers import SortedDict


class Solution1:
    def maxResult(self, nums: List[int], k: int) -> int:
        queue = deque([])
        for i in range(len(nums)):
            while queue and queue[0] + k < i:
                queue.popleft()
            if queue:
                nums[i] += nums[queue[0]]
            while queue and nums[queue[-1]] < nums[i]:
                queue.pop()
            queue.append(i)
        return nums[-1]


class Solution2:
    def maxResult(self, nums: List[int], k: int) -> int:
        vals = SortedDict()
        for i in range(len(nums)):
            val = nums[i] + (0 if not vals else vals.peekitem(-1)[0])
            nums[i] = val
            if val not in vals:
                vals[val] = 1
            else:
                vals[val] += 1
            if i - k >= 0:
                vals[nums[i - k]] -= 1
                if vals[nums[i - k]] == 0:
                    del vals[nums[i - k]]
        return nums[-1]
