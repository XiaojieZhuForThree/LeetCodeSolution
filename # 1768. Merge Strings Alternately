package com.leetcode.problems;

public class Question1768 {
	class Solution {
		public String mergeAlternately(String word1, String word2) {
			StringBuilder sb = new StringBuilder();
			int ptr1 = 0, ptr2 = 0;
			boolean turn = false;
			while (ptr1 < word1.length() && ptr2 < word2.length()) {
				if (turn) {
					sb.append(word2.charAt(ptr2++));
				} else {
					sb.append(word1.charAt(ptr1++));
				}
				turn = !turn;
			}
			if (ptr1 < word1.length()) {
				sb.append(word1.substring(ptr1));
			} else {
				sb.append(word2.substring(ptr2));
			}
			return sb.toString();
		}
	}
}


#include <string>
using namespace std;

class Solution {
public:
	string mergeAlternately(string word1, string word2) {
		int m = 0, n = 0;
		string ans;
		bool isOne = true;
		while (m < size(word1) || n < size(word2)) {
			if (m >= size(word1)) ans += word2[n++];
			else if (n >= size(word2)) ans += word1[m++];
			else if (isOne) ans += word1[m++];
			else ans += word2[n++];
			isOne = !isOne;
		}
		return ans;
	}
};
