/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    int maxVal = Integer.MIN_VALUE;
    public int maxPathSum(TreeNode root) {
        helper(root);
        return maxVal;
    }
    private int helper(TreeNode root) {

        if (root == null) {
            return 0;
        }
        int sum = root.val;
        int leftLong = 0, rightLong = 0, cur = 0;
        if (root.left == null && root.right == null) {
            cur = root.val;
        } else {
            leftLong = helper(root.left);
            rightLong = helper(root.right);
            if (leftLong > 0) {
                sum += leftLong;
            }
            if (rightLong > 0) {
                sum += rightLong;
            }
            cur = root.val;
        }
        maxVal = Math.max(maxVal, sum);
        return Math.max(cur, Math.max(leftLong + cur, rightLong + cur));
    }
}


#include "TreeNode.h"
#include <climits>
#include <utility>
using namespace std;

class Solution {
public:
	int ans = INT_MIN;
	int maxPathSum(TreeNode* root) {
		dfs(root);
		return ans;
	}
private:
	void dfs(TreeNode* node) {
		if (!node) return;
		dfs(node->left);
		dfs(node->right);
		int l = node->left ? max(node->left->val, 0) : 0;
		int r = node->right ? max(node->right->val, 0) : 0;
		int cand = l + r + node->val;
		ans = max(ans, cand);
		node->val = max(l, r) + node->val;
	}
};
