package com.leetcode.problems;

public class Question583 {
	class Solution {
		public int minDistance(String word1, String word2) {
			int[][] dp = new int[word1.length() + 1][word2.length() + 1];
			for (int i = 0; i <= word1.length(); i++) {
				for (int j = 0; j <= word2.length(); j++) {
					if (i == 0 || j == 0) {
						dp[i][j] = 0;
					} else if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
						dp[i][j] = dp[i - 1][j - 1] + 1;
					} else {
						dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
					}
				}
			}
			return word1.length() + word2.length() - 2 * dp[word1.length()][word2.length()];
		}
	}
}


class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        m = len(word1)
        n = len(word2)
        dp = [[0 for i in range(n + 1)] for j in range(m + 1)]
        for i in range(1, n + 1):
            dp[0][i] = i
        for i in range(1, m + 1):
            dp[i][0] = i
        for i in range(1, m + 1):
            for j in range(1, n + 1):
                if word1[i - 1] == word2[j - 1]:
                    dp[i][j] = dp[i - 1][j - 1]
                else:
                    val1 = dp[i - 1][j] + 1
                    val2 = dp[i][j - 1] + 1
                    dp[i][j] = min(val1, val2)
        return dp[m][n]
        
