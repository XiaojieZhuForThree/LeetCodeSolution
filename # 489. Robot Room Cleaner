/**
 * // This is the robot's control interface.
 * // You should not implement it, or speculate about its implementation
 * interface Robot {
 *     // Returns true if the cell in front is open and robot moves into the cell.
 *     // Returns false if the cell in front is blocked and robot stays in the current cell.
 *     public boolean move();
 *
 *     // Robot will stay in the same cell after calling turnLeft/turnRight.
 *     // Each turn will be 90 degrees.
 *     public void turnLeft();
 *     public void turnRight();
 *
 *     // Clean the current cell.
 *     public void clean();
 * }
 */
class Solution {
    int[][] dirs = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    public void cleanRoom(Robot robot) {
        dfs(0, 0, 0, new HashSet<>(), robot);
    }
    private void dfs(int r, int c, int dir, Set<String> visited, Robot robot) {
        String pos = r + "|" + c;
        if (!visited.contains(pos)) {
            visited.add(pos);
            robot.clean();
            for (int i = dir; i < dir + 4; i++) {
                if (robot.move()) {
                    dfs(r + dirs[i % 4][0], c + dirs[i % 4][1], i % 4, visited, robot);
                    robot.turnRight();
                    robot.turnRight();
                    robot.move();
                    robot.turnRight();
                    robot.turnRight();
                }
                robot.turnRight();
            }
        }
    }
}
