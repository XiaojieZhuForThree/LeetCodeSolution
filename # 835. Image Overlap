package com.leetcode.problems;

public class Question835 {
	class Solution {
		public int largestOverlap(int[][] A, int[][] B) {
			int n = A.length;
			int maxOverlap = 0;
			for (int i = 1 - n; i < n; i++) {
				for (int j = 1 - n; j < n; j++) {
					maxOverlap = Math.max(maxOverlap, getOverlap(A, B, i, j));
				}
			}
			return maxOverlap;
		}

		private final int getOverlap(int[][] A, int[][] B, int i, int j) {
			int cnt = 0;
			for (int r = 0; r < A.length; r++) {
				for (int c = 0; c < A.length; c++) {
					if (r + i < 0 || c + j < 0 || r + i >= A.length || c + j >= A.length) {
						continue;
					}
					if (A[r + i][c + j] == 1 && B[r][c] == 1) {
						cnt++;
					}
				}
			}
			return cnt;
		}
	}
}


#include <algorithm>
#include <vector>

using namespace std;

class Solution {
public:
	int largestOverlap(vector<vector<int>>& img1, vector<vector<int>>& img2) {
		return max(helper(img1, img2), helper(img2, img1));
	}
private:
	int helper(vector<vector<int>>& img1, vector<vector<int>>& img2) {
		int n = img1.size(), ans = 0;
		for (int i = -n; i <= n; i++) {
			for (int j = -n; j <= n; j++) {
				int cur = 0;
				for (int x = 0; x < n; x++) {
					for (int y = 0; y < n; y++) {
						if (img1[x][y] == 0) continue;
						int nx = x + i, ny = y + j;
						if (nx >= n || ny >= n || nx < 0 || ny < 0) continue;
						if (img2[x + i][y + j] == 1) cur++;
					}
				}
				ans = max(ans, cur);
			}
		}
		return ans;
	}
};
