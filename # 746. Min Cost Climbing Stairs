package com.leetcode.problems;

public class Question746 {
	class Solution {
		public int minCostClimbingStairs(int[] cost) {
			if (cost == null || cost.length == 0)
				return 0;
			if (cost.length == 1)
				return cost[0];
			if (cost.length == 2)
				return Math.min(cost[0], cost[1]);
			for (int i = 2; i < cost.length; i++)
				cost[i] += Math.min(cost[i - 1], cost[i - 2]);
			return Math.min(cost[cost.length - 1], cost[cost.length - 2]);
		}
	}
}


from typing import List


class Solution:
    def minCostClimbingStairs(self, cost: List[int]) -> int:
        if len(cost) == 2:
            return min(cost[0], cost[1])
        for i in range(2, len(cost)):
            cost[i] += min(cost[i-1], cost[i-2])
        return min(cost[-1], cost[-2])


#include <vector>
using std::vector;

class Solution {
public:
	int minCostClimbingStairs(vector<int>& cost) {
		int n = size(cost);
		vector<int>dp(n + 1, 0);
		for (int i = 2; i <= n; i++) {
			dp[i] = std::min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
		}
		return dp[n];
	}
};
