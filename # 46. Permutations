class Solution {
    public List<List<Integer>> permute(int[] nums) {
    	List<List<Integer>> ans = new ArrayList<>();
    	if (nums.length == 0) {
    		return ans;
    	}
    	else if (nums.length == 1) {
    		ans.add(new ArrayList<>(Arrays.asList(nums[0])));
    		return ans;
    	}
    	else {
    		int i = nums[0];
    		List<List<Integer>> alreadyThere = permute(Arrays.copyOfRange(nums, 1, nums.length));
    		while (!alreadyThere.isEmpty()) {
    			List<Integer> that = alreadyThere.remove(0);
    			for (int j = 0; j <= that.size(); j++) {
    				List<Integer> newEle = new ArrayList<>(that);
    				newEle.add(j, i);
    				ans.add(newEle);
    			}
    		}
    		return ans;
    	}
    }
}


#include <vector>
#include <unordered_set>
using std::vector;

class Solution {
public:
	vector<vector<int>> ans;
	vector<vector<int>> permute(vector<int>& nums) {
		vector<int> cur;
		std::unordered_set<int> seen;
		for (int i : nums) {
			seen.insert(i);
			cur.push_back(i);
			dfs(cur, nums, seen);
			seen.erase(i);
			cur.pop_back();
		}
		return ans;
	}
private:
	void dfs(vector<int>& cur, vector<int>& nums, std::unordered_set<int>& seen) {
		if (size(cur) == size(nums)) ans.push_back(vector<int>(cur));
		for (int i : nums) {
			if (seen.count(i)) continue;
			seen.insert(i);
			cur.push_back(i);
			dfs(cur, nums, seen);
			seen.erase(i);
			cur.pop_back();
		}
	}
};
