class Solution {
    public int splitArray(int[] nums, int m) {
        if (nums == null) {
            return -1;
        }
        int[][] dp = new int[m][nums.length];
        dp[0][0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[0][i] = dp[0][i-1] + nums[i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < nums.length; j++) {
                int min = Integer.MAX_VALUE;
                for (int k = 0; k < j; k++) {
                    min = Math.min(min, Math.max(dp[i-1][k], dp[0][j]-dp[0][k]));
                }
                dp[i][j] = min;
            }
        }
        return dp[m-1][nums.length-1];
    }
}


class Solution {
    public int splitArray(int[] nums, int m) {
        long left = 0;
        long right = Long.MAX_VALUE;
        while (left <= right) {
            long mid = (left + right) / 2;
            if (isValid(nums, m, mid)) {
                right = mid-1;
            } else {
                left = mid+1;
            }
        }
        return (int)left;
    }
    boolean isValid(int[] nums, int m, long maxSum) {
        int curSum = 0, count = 1;
        for (int num : nums) {
            if (num > maxSum) {
                return false;
            }
            if (num + curSum <= maxSum) {
                curSum += num;
            } else {
                curSum = num;
                count++;
            }
            if (count > m) {
                return false;
            }
        }
        return true;
    }
}

class Solution {
    public int splitArray(int[] nums, int m) {
        int left = 0, right = Integer.MAX_VALUE;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (isValid(nums, m, mid)) {
                right = mid;
            } else {
                left = mid+1;
            }
        }
        return left;
    }
    boolean isValid(int[] nums, int m, int maxSum) {
        int curSum = 0, count = 1;
        for (int num : nums) {
            if (num > maxSum) {
                return false;
            }
            if (num + curSum <= maxSum) {
                curSum += num;
            } else {
                curSum = num;
                count++;
            }
            if (count > m) {
                return false;
            }
        }
        return true;
    }
}

class Solution {
    public int splitArray(int[] nums, int m) {
        int n = nums.length;
        int[][] dp = new int[m][n];
        dp[0][0] = nums[0];
        for (int i = 1; i < n; i++) {
            dp[0][i] = dp[0][i-1] + nums[i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                int min = Integer.MAX_VALUE;
                for (int k = i-1; k < j; k++) {
                    min = Math.min(min, Math.max(dp[i-1][k], dp[0][j]-dp[0][k]));
                }
                dp[i][j] = min;
            }
        }
        return dp[m-1][n-1];
    }
}


class Solution {
    public int splitArray(int[] nums, int m) {
        int n = nums.length;
        int[][] dp = new int[m][n];
        dp[0][0] = nums[0];
        for (int i = 1; i < nums.length; i++) {
            dp[0][i] = dp[0][i-1] + nums[i];
        }
        for (int i = 1; i < m; i++) {
            for (int j = i; j < n; j++) {
                int min = Integer.MAX_VALUE;
                for (int k = i - 1; k < j; k++) {
                    min = Math.min(min, Math.max(dp[i-1][k], dp[0][j] - dp[0][k]));
                }
                dp[i][j] = min;
            }
        }
        return dp[m-1][n-1];
    }
}
