class Solution {
    public int maxProduct(int[] nums) {
        if (nums == null) return 0;
        int max = nums[0], poss = nums[0], negs = nums[0];
        for (int i = 1; i < nums.length; i++){
            int pos = poss * nums[i], neg = negs * nums[i];
            poss = Math.max(nums[i], Math.max(pos, neg));
            max = Math.max(max, poss);
            negs = nums[i] < 0 ? Math.min(nums[i], pos) : Math.min(nums[i], neg);
        }
        return max;
    }
}

class Solution {
    public int maxProduct(int[] nums) {
        int n = nums.length, res = nums[0], l = 0, r = 0; 
        for (int i = 0; i < nums.length; i++) {
            l = (l == 0 ? 1 : l) * nums[i];
            r = (r == 0 ? 1 : r) * nums[n-1-i];
            res = Math.max(res, Math.max(l, r));
        }
        return res;
    }
}
