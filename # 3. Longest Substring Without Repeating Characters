package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question3 {
	class Solution {
		public int lengthOfLongestSubstring(String s) {
			Map<Character, Integer> map = new HashMap<>();
			int len = 0, cur = 0;
			int start = 0, end = 0;
			for (; end < s.length(); end++) {
				char c = s.charAt(end);
				map.put(c, map.getOrDefault(c, 0) + 1);
				while (map.get(c) > 1) {
					char ch = s.charAt(start);
					map.put(ch, map.getOrDefault(ch, 1) - 1);
					start++;
				}
				cur = end - start + 1;
				len = Math.max(len, cur);
			}
			return len;
		}
	}
}


from typing import DefaultDict


class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:
        if not s:
            return 0
        i = 0
        ans = 0
        cnts = DefaultDict(int)
        for j in range(len(s)):
            cnts[s[j]] += 1
            while cnts[s[j]] > 1:
                cnts[s[i]] -= 1
                i += 1
            ans = max(ans, j - i + 1)
        return ans
