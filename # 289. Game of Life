package com.leetcode.problems;

public class Question289 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 },
				{ -1, -1 } };

		public void gameOfLife(int[][] board) {

			int m = board.length, n = board[0].length;
			int[][] newBoard = new int[m][n];
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (board[i][j] == 0) {
						int sur = surrounding(board, i, j);
						if (sur == 3) {
							newBoard[i][j] = 1;
						}
					} else {
						int sur = surrounding(board, i, j);
						if (sur == 2 || sur == 3) {
							newBoard[i][j] = 1;
						} else {
							newBoard[i][j] = 0;
						}
					}
				}
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					board[i][j] = newBoard[i][j];
				}
			}
		}

		private int surrounding(int[][] board, int i, int j) {
			int val = 0;
			for (int[] dir : dirs) {
				int ni = i + dir[0], nj = j + dir[1];
				if (ni < 0 || ni >= board.length || nj < 0 || nj >= board[0].length) {
					continue;
				}
				val += board[ni][nj];
			}
			return val;
		}
	}
}
