package com.leetcode.problems;

public class Question289 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 },
				{ -1, -1 } };

		public void gameOfLife(int[][] board) {

			int m = board.length, n = board[0].length;
			int[][] newBoard = new int[m][n];
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (board[i][j] == 0) {
						int sur = surrounding(board, i, j);
						if (sur == 3) {
							newBoard[i][j] = 1;
						}
					} else {
						int sur = surrounding(board, i, j);
						if (sur == 2 || sur == 3) {
							newBoard[i][j] = 1;
						} else {
							newBoard[i][j] = 0;
						}
					}
				}
			}
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					board[i][j] = newBoard[i][j];
				}
			}
		}

		private int surrounding(int[][] board, int i, int j) {
			int val = 0;
			for (int[] dir : dirs) {
				int ni = i + dir[0], nj = j + dir[1];
				if (ni < 0 || ni >= board.length || nj < 0 || nj >= board[0].length) {
					continue;
				}
				val += board[ni][nj];
			}
			return val;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Mon Apr 11 20:23:53 2022

@author: xiaoj
"""
from typing import List


class Solution:
    def gameOfLife(self, board: List[List[int]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        dirs = [[1, 0], [-1, 0], [0, 1], [0, -1],
                [1, 1], [1, -1], [-1, 1], [-1, -1]]
        m, n = len(board), len(board[0])
        for i in range(m):
            for j in range(n):
                val = board[i][j]
                livings = self.calcLiv(board, i, j, dirs)
                if val == 1:
                    if livings < 2 or livings > 3:
                        board[i][j] = -1
                elif val == 0:
                    if livings == 3:
                        board[i][j] = 2
        for i in range(m):
            for j in range(n):
                if board[i][j] == -1:
                    board[i][j] = 0
                elif board[i][j] == 2:
                    board[i][j] = 1
        return

    def calcLiv(self, board, i, j, dirs):
        ones = 0
        m, n = len(board), len(board[0])
        for d in dirs:
            ni = i + d[0]
            nj = j + d[1]
            if ni < 0 or ni >= m or nj < 0 or nj >= n:
                continue
            if board[ni][nj] == 1 or board[ni][nj] == -1:
                ones += 1
        return ones
