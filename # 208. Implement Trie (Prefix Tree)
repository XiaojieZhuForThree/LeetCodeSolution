class Trie {
	private class TrieNode {
		char chr;
		boolean end;
		HashMap<Character, TrieNode> children;
		TrieNode() {
			children = new HashMap<Character, TrieNode>();
		}

		TrieNode(char chr) {
			children = new HashMap<Character, TrieNode>();
			this.chr = chr;
		}
	}

	TrieNode root;
    /** Initialize your data structure here. */
    public Trie() {
    	root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode cur = root;
        for (char c : word.toCharArray()) {
        	if (! cur.children.containsKey(c)){
        		TrieNode t = new TrieNode(c);
        		cur.children.put(c, t);
        	}
        	cur = cur.children.get(c);
        }
        cur.end = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode cur = root;
        for (char c : word.toCharArray()) {
        	if (! cur.children.containsKey(c)){
        		return false;
        	}
        	cur = cur.children.get(c);
        }
        return cur.end;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode cur = root;
        for (char c : prefix.toCharArray()) {
        	if (! cur.children.containsKey(c)){
        		return false;
        	}
        	cur = cur.children.get(c);
        }
        return true;
    }
}

/*
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.insert(word);
 * boolean param_2 = obj.search(word);
 * boolean param_3 = obj.startsWith(prefix);
 */
