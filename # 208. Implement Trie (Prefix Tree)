class TrieNode {
    boolean isWord;
    TrieNode[] children;
    public TrieNode() {
        children = new TrieNode[26];
    }
}
class Trie {
    /** Initialize your data structure here. */
    TrieNode root;
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void insert(String word) {
        TrieNode dummy = root;
        for (char c : word.toCharArray()) {
            if (dummy.children[c-'a'] == null) {
                dummy.children[c-'a'] = new TrieNode();
            }
            dummy = dummy.children[c-'a'];
        }
        dummy.isWord = true;
    }
    
    /** Returns if the word is in the trie. */
    public boolean search(String word) {
        TrieNode dummy = root;
        for (char c : word.toCharArray()) {
            if (dummy.children[c-'a'] == null) {
                return false;
            }
            dummy = dummy.children[c-'a'];
        }
        return dummy.isWord;       
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public boolean startsWith(String prefix) {
        TrieNode dummy = root;
        for (char c : prefix.toCharArray()) {
            if (dummy.children[c-'a'] == null) {
                return false;
            }
            dummy = dummy.children[c-'a'];
        }
        return true;         
    }
}


#include <string>
#include <unordered_map>

using namespace std;

struct TrieNode {
    unordered_map<int, TrieNode*> nxt;
    bool isWord;
public:
    TrieNode() {
        isWord = false;
    }
};

class Trie {
    TrieNode* node;
public:
    Trie() {
        node = new TrieNode();
    }

    void insert(string word) {
        TrieNode* dummy = node;
        for (char c : word) {
            if (!dummy->nxt[c - 'a']) dummy->nxt[c - 'a'] = new TrieNode();
            dummy = dummy->nxt[c - 'a'];
        }
        dummy->isWord = true;
    }

    bool search(string word) {
        TrieNode* dummy = node;
        for (char c : word) {
            if (!dummy->nxt[c - 'a']) return false;
            dummy = dummy->nxt[c - 'a'];
        }
        return dummy->isWord;
    }

    bool startsWith(string prefix) {
        TrieNode* dummy = node;
        for (char c : prefix) {
            if (!dummy->nxt[c - 'a']) return false;
            dummy = dummy->nxt[c - 'a'];
        }
        return true;
    }
};
