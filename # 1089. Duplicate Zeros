package problems;

import java.util.LinkedList;
import java.util.Queue;

public class Question1089 {
	class Solution1 {
		public void duplicateZeros(int[] arr) {
			Queue<Integer> stack = new LinkedList<>();
			for (int i : arr) {
				stack.add(i);
			}
			int i = 0;
			while (i < arr.length) {
				int j = stack.poll();
				if (j == 0) {
					arr[i++] = 0;
					if (i < arr.length) {
						arr[i++] = 0;
					}
				} else {
					arr[i++] = j;
				}
			}
			return;
		}
	}

	class Solution2 {
		public void duplicateZeros(int[] arr) {
			int zeros = 0;
			for (int i : arr) {
				if (i == 0) {
					zeros++;
				}
			}
			int len = arr.length + zeros;
			for (int i = arr.length - 1, j = len - 1; i < j; i--, j--) {
				if (arr[i] != 0) {
					if (j < arr.length) {
						arr[j] = arr[i];
					}
				} else {
					if (j < arr.length) {
						arr[j] = arr[i];
					}
					j--;
					if (j < arr.length) {
						arr[j] = arr[i];
					}
				}
			}
		}
	}

	class Solution3 {
		public void duplicateZeros(int[] arr) {
			int cnt = 0;
			for (int i : arr) {
				if (i == 0) {
					cnt++;
				}
			}
			int pt1 = arr.length - 1, pt2 = arr.length + cnt - 1;
			for (; pt1 >= 0; pt1--) {
				if (arr[pt1] == 0) {
					if (pt2 < arr.length) {
						arr[pt2] = 0;
					}
					pt2--;
					if (pt2 < arr.length) {
						arr[pt2] = 0;
					}
					pt2--;
				} else {
					if (pt2 < arr.length) {
						arr[pt2] = arr[pt1];
					}
					pt2--;
				}
			}
		}
	}
}
