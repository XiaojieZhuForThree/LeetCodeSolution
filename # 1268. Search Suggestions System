package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;

public class Question1268 {
	class Solution {
		public List<List<String>> suggestedProducts(String[] products, String searchWord) {
			Map<String, PriorityQueue<String>> map = new HashMap<>();
			for (String prd : products) {
				for (int i = 1; i <= prd.length(); i++) {
					map.putIfAbsent(prd.substring(0, i), new PriorityQueue<>());
					map.get(prd.substring(0, i)).add(prd);
				}
			}
			List<List<String>> ans = new ArrayList<>();
			for (int i = 1; i <= searchWord.length(); i++) {
				List<String> step = new ArrayList<>();
				PriorityQueue<String> pq = map.getOrDefault(searchWord.substring(0, i), new PriorityQueue<>());
				for (int j = 0; j < 3 && pq.size() > 0; j++) {
					step.add(pq.poll());
				}
				ans.add(step);
			}
			return ans;
		}
	}
}


from typing import List


class Solution:
    def suggestedProducts(self, products: List[str], searchWord: str) -> List[List[str]]:
        _map = {}
        for p in products:
            matched = True
            i = 0
            while matched:
                if i >= min(len(p), len(searchWord)):
                    matched = False
                elif p[i] != searchWord[i]:
                    matched = False
                else:
                    if i not in _map:
                        _map[i] = []
                    _map[i].append(p)
                    i += 1
        ans = []
        for i in range(len(searchWord)):
            if i in _map:
                ans.append(sorted(_map[i])[:min(3, len(_map[i]))])
            else:
                ans.append([])
        return ans
