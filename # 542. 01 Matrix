package com.leetcode.problems;

import java.util.Arrays;

public class Question542 {
	class Solution {
		public int[][] updateMatrix(int[][] mat) {
			if (mat == null || mat.length == 0 || mat[0].length == 0)
				return mat;
			int m = mat.length, n = mat[0].length;
			int[][] ans = new int[m][n];
			for (int[] row : ans)
				Arrays.fill(row, Integer.MAX_VALUE);
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (mat[i][j] == 0)
						ans[i][j] = 0;
					int val1 = j == 0 || ans[i][j - 1] == Integer.MAX_VALUE ? Integer.MAX_VALUE : ans[i][j - 1] + 1;
					int val2 = i == 0 || ans[i - 1][j] == Integer.MAX_VALUE ? Integer.MAX_VALUE : ans[i - 1][j] + 1;
					ans[i][j] = Math.min(ans[i][j], Math.min(val1, val2));
				}
			}
			for (int i = m - 1; i >= 0; i--) {
				for (int j = n - 1; j >= 0; j--) {
					if (mat[i][j] == 0)
						ans[i][j] = 0;
					int val1 = j == n - 1 || ans[i][j + 1] == Integer.MAX_VALUE ? Integer.MAX_VALUE : ans[i][j + 1] + 1;
					int val2 = i == m - 1 || ans[i + 1][j] == Integer.MAX_VALUE ? Integer.MAX_VALUE : ans[i + 1][j] + 1;
					ans[i][j] = Math.min(ans[i][j], Math.min(val1, val2));
				}
			}
			return ans;
		}
	}
}


#include <vector>
#include <deque>
using std::vector;

class Solution {
public:
	vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {
		int m = size(mat), n = size(mat[0]);
		vector<vector<int>> ans(m, vector<int>(n, -1));
		vector<vector<int>> visited(m, vector<int>(n, 0));
		vector<std::pair<int, int>> dirs = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
		std::deque<std::pair<int, int>> dq;
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				if (mat[i][j] == 0) {
					visited[i][j] = 1;
					dq.push_back({ i, j });
				}
			}
		}
		int step = 0;
		while (!dq.empty()) {
			for (int i = size(dq); i > 0; i--) {
				std::pair<int, int> cur = dq.front();
				dq.pop_front();
				ans[cur.first][cur.second] = step;
				for (auto d : dirs) {
					int r = cur.first + d.first, c = cur.second + d.second;
					if (r < 0 || r >= m || c < 0 || c >= n || visited[r][c]) continue;
					visited[r][c] = 1;
					dq.push_back({ r, c });
				}
			}
			step++;
		}
		return ans;
	}
};
