package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question877 {
	class Solution1 {
		Map<String, Integer> map = new HashMap<>();

		public boolean stoneGame(int[] piles) {
			if (piles == null || piles.length == 0)
				return false;
			int sum = 0, n = piles.length;
			for (int i : piles)
				sum += i;
			return getAns(piles, 0, n - 1, sum) > sum / 2;
		}

		private int getAns(int[] piles, int l, int r, int sum) {
			String key = l + ", " + r;
			if (l > r)
				return 0;
			if (l == r)
				return piles[l];
			if (map.containsKey(key))
				return map.get(key);
			int val1 = piles[l] + sum - piles[l] - getAns(piles, l + 1, r, sum - piles[l]);
			int val2 = piles[r] + sum - piles[r] - getAns(piles, l, r - 1, sum - piles[r]);
			int ans = Math.max(val1, val2);
			map.put(key, ans);
			return ans;
		}
	}

	class Solution2 {
		public boolean stoneGame(int[] piles) {
			if (piles == null || piles.length == 0)
				return false;
			int n = piles.length;
			int[] accu = new int[n];
			for (int i = 0; i < n; i++)
				accu[i] = i == 0 ? piles[i] : piles[i] + accu[i - 1];
			int[][] dp = new int[n][n];
			for (int i = n - 1; i >= 0; i--) {
				for (int j = i; j < n; j++) {
					if (i == j)
						dp[i][j] = piles[i];
					else {
						int curSum = accu[j] - (i == 0 ? 0 : accu[i - 1]);
						int val1 = curSum - dp[i + 1][j];
						int val2 = curSum - dp[i][j - 1];
						dp[i][j] = Math.max(val1, val2);
					}
				}
			}
			return dp[0][n - 1] > accu[n - 1] / 2;
		}
	}
}
