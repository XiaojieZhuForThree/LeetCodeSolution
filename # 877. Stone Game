package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question877 {
	class Solution {
		Map<String, Integer> map = new HashMap<>();

		public boolean stoneGame(int[] piles) {
			if (piles == null || piles.length == 0)
				return false;
			int sum = 0, n = piles.length;
			for (int i : piles)
				sum += i;
			return getAns(piles, 0, n - 1, sum) > sum / 2;
		}

		private int getAns(int[] piles, int l, int r, int sum) {
			String key = l + ", " + r;
			if (l > r)
				return 0;
			if (l == r)
				return piles[l];
			if (map.containsKey(key))
				return map.get(key);
			int val1 = piles[l] + sum - piles[l] - getAns(piles, l + 1, r, sum - piles[l]);
			int val2 = piles[r] + sum - piles[r] - getAns(piles, l, r - 1, sum - piles[r]);
			int ans = Math.max(val1, val2);
			map.put(key, ans);
			return ans;
		}
	}
}
