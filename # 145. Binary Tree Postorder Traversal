/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
	List<Integer> ans = new ArrayList<>();
	public List<Integer> postorderTraversal(TreeNode root) {
		bfs(root);
		return ans;
	}
	private void bfs(TreeNode root) {
		if (root == null) {
			return;
		}
		bfs(root.left);
		bfs(root.right);
		ans.add(root.val);
	}
}


#include "TreeNode.h"
#include <vector>
using std::vector;

class Solution {
public:
    vector<int> postorderTraversal(TreeNode* root) {
        if (!root) return {};
        vector<int> ans;
        for (int i : postorderTraversal(root->left)) ans.push_back(i);
        for (int i : postorderTraversal(root->right)) ans.push_back(i);
        ans.push_back(root->val);
        return ans;
    }
};
