package problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Question1187 {
	class Solution {
		public int makeArrayIncreasing(int[] arr1, int[] arr2) {
			int n = arr1.length;
			Arrays.sort(arr2);
			List<Integer> list = new ArrayList<>();
			for (int i = 0; i < arr2.length; i++) {
				if (i + 1 < arr2.length && arr2[i] == arr2[i + 1]) {
					continue;
				}
				list.add(arr2[i]);
			}

			int[] nArr2 = new int[list.size()];
			for (int i = 0; i < list.size(); i++) {
				nArr2[i] = list.get(i);
			}
			arr2 = nArr2;

			int[] nArr1 = new int[n + 2];
			nArr1[0] = Integer.MIN_VALUE;
			nArr1[n + 1] = Integer.MAX_VALUE;
			for (int i = 1; i <= n; i++) {
				nArr1[i] = arr1[i - 1];
			}
			arr1 = nArr1;

			int[] dp = new int[n + 2];
			Arrays.fill(dp, Integer.MAX_VALUE);
			dp[0] = 0;
			for (int i = 1; i < n + 2; i++) {
				for (int j = 0; j < i; j++) {
					if (arr1[j] < arr1[i] && dp[j] != Integer.MAX_VALUE) {
						int change = check(arr1, arr2, j, i);
						if (change >= 0) {
							dp[i] = Math.min(dp[i], dp[j] + change);
						}
					}
				}
			}
			return dp[n + 1] == Integer.MAX_VALUE ? -1 : dp[n + 1];
		}

		private int check(int[] arr1, int[] arr2, int j, int i) {
			if (j + 1 == i) {
				return 0;
			}
			int min = arr1[j], max = arr1[i];
			int idx = Arrays.binarySearch(arr2, min);
			if (idx < 0) {
				idx = -idx - 1;
			} else {
				idx = idx + 1;
			}
			int maxCount = i - j - 1;
			int endi = idx + maxCount - 1;
			if (endi < arr2.length && arr2[endi] < max) {
				return maxCount;
			}
			return -1;
		}
	}
}
