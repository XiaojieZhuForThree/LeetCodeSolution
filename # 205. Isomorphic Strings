package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question205 {
	class Solution {
		public boolean isIsomorphic(String s, String t) {
			if (s == null && t == null)
				return true;
			if (s == null || t == null)
				return false;
			if (s.length() != t.length())
				return false;
			Map<Character, Character> mapA = new HashMap<>(), mapB = new HashMap<>();
			for (int i = 0; i < s.length(); i++) {
				char ca = s.charAt(i), cb = t.charAt(i);
				if (!mapA.containsKey(ca) && !mapB.containsKey(cb)) {
					mapA.put(ca, cb);
					mapB.put(cb, ca);
				} else if (!mapA.containsKey(ca) || !mapB.containsKey(cb))
					return false;
				else if (mapA.get(ca) != cb || mapB.get(cb) != ca)
					return false;
			}
			return true;
		}
	}
}


#include <string>
#include <unordered_map>

using std::string;

class Solution {
public:
	bool isIsomorphic(string s, string t) {
		return helper(s, t) && helper(t, s);
	}
private:
	bool helper(string& a, string& b) {
		std::unordered_map<char, char> m;
		for (int i = 0; i < size(a); i++) {
			if (m.count(a[i]) && m[a[i]] != b[i]) return false;
			m[a[i]] = b[i];
		}
		return true;
	}
};
