package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;
import java.util.TreeSet;

public class Question792 {
	class Solution {
		public int numMatchingSubseq(String s, String[] words) {
			if (s == null || s.length() == 0 || words == null || words.length == 0)
				return 0;
			Map<Character, TreeSet<Integer>> map = new HashMap<>();
			for (int i = 0; i < s.length(); i++) {
				char c = s.charAt(i);
				map.putIfAbsent(c, new TreeSet<>());
				map.get(c).add(i);
			}
			int ans = 0;
			for (String w : words) {
				if (isSubseq(w, map))
					ans++;
			}
			return ans;
		}

		private boolean isSubseq(String w, Map<Character, TreeSet<Integer>> map) {
			int p = 0;
			for (int i = 0; i < w.length(); i++) {
				char c = w.charAt(i);
				if (!map.containsKey(c))
					return false;
				TreeSet<Integer> set = map.get(c);
				Integer ind = set.ceiling(p);
				if (ind == null)
					return false;
				p = ind + 1;
			}
			return true;
		}
	}
}
