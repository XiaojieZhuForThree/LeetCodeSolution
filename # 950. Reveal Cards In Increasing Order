class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck);
        if (deck == null || deck.length < 3) {
            return deck;
        }
        Queue<Integer> queue = new LinkedList<>();
        queue.add(deck[deck.length-1]);
        for (int i = deck.length - 2; i >= 0; i--) {
            int rep = queue.remove();
            queue.add(rep);
            queue.add(deck[i]);
        }
        for (int i = queue.size()-1; i >= 0; i--) {
            deck[i] = queue.remove();
        }
        return deck;
    }
}


#include <vector>
#include <queue>

using std::vector;

class Solution {
public:
	vector<int> deckRevealedIncreasing(vector<int>& deck) {
		std::sort(deck.begin(), deck.end(), std::greater<int>());
		std::deque<int> q;
		vector<int> ans;
		for (int i : deck) {
			if (q.empty()) q.push_front(i);
			else {
				int cur = q.back();
				q.pop_back();
				q.push_front(cur);
				q.push_front(i);
			}
		}
		for (int i : q) ans.push_back(i);
		return ans;
	}
};
