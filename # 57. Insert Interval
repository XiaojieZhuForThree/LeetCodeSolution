package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Question57 {
	class Solution {
		public int[][] insert(int[][] intervals, int[] newInterval) {
			List<int[]> ans = new ArrayList<>();
			for (int[] interval : intervals) {
				if (noOverlap(interval, newInterval)) {
					ans.add(interval);
				} else {
					update(interval, newInterval);
				}
			}
			ans.add(newInterval);
			return toArray(ans);
		}

		private boolean noOverlap(int[] a, int[] b) {
			return a[1] < b[0] || a[0] > b[1];
		}

		private void update(int[] a, int[] b) {
			b[0] = Math.min(a[0], b[0]);
			b[1] = Math.max(a[1], b[1]);
		}

		private int[][] toArray(List<int[]> ans) {
			int[][] res = new int[ans.size()][2];
			for (int i = 0; i < ans.size(); i++) {
				res[i] = ans.get(i);
			}
			Arrays.sort(res, (a, b) -> a[0] - b[0]);
			return res;
		}
	}
}


#include <vector>
using namespace std;

class Solution {
public:
	vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
		vector<vector<int>> ans;
		int l = newInterval[0], r = newInterval[1];
		for (auto& i : intervals) {
			if (i[1] < l) {
				ans.push_back(i);
			}
			else if (i[0] > r) {
				ans.push_back({ l, r });
				l = i[0];
				r = i[1];
			}
			else {
				l = min(l, i[0]);
				r = max(r, i[1]);
			}
		}
		ans.push_back({ l, r });
		return ans;
	}
};


#include <vector>

using std::vector;

class Solution {
public:
    vector<vector<int>> insert(vector<vector<int>>& intervals, vector<int>& newInterval) {
        int l = newInterval[0], r = newInterval[1];
        bool added = false;
        vector<vector<int>> ans;
        for (auto& i : intervals) {
            if (i[1] < l) ans.push_back(i);
            else if (i[0] > r) {
                if (!added) {
                    ans.push_back({ l, r });
                    added = true;
                }
                ans.push_back(i);
            }
            else {
                l = std::min(l, i[0]);
                r = std::max(r, i[1]);
            }
        }
        if (!added) {
            ans.push_back({ l, r });
        }
        return ans;
    }
};
