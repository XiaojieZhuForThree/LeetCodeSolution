package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question1675 {
	class Solution {
		public int minimumDeviation(int[] nums) {
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a); // pq.poll() will return maximum
			int mn = Integer.MAX_VALUE, deviation = Integer.MAX_VALUE;
			for (int x : nums) {
				if ((x & 1) == 1)
					x *= 2;
				pq.add(x);
				mn = Math.min(mn, x);
			}

			while (true) {
				int mx = pq.poll();
				deviation = Math.min(deviation, mx - mn);
				if ((mx & 1) == 1)
					break; // if the number is odd => it cant get smaller => remaining numbers will never
							// be maximum
				mn = Math.min(mn, mx / 2);
				pq.add(mx / 2);
			}
			return deviation;
		}
	}
}

class Solution:
    def minimumDeviation(self, nums: List[int]) -> int:
        min_value, min_delta = float("inf"), float("inf")
        max_heap = []
        
        for i in range(len(nums)):
            if nums[i] & 1:
                nums[i] *= 2
            heappush(max_heap, -nums[i])
            min_value = min(min_value, nums[i])
      
        min_delta = min(min_delta, -max_heap[0] - min_value)
        
        while not -max_heap[0] & 1:
                modified_value = -max_heap[0] // 2
                min_value = min(min_value, modified_value)
                heappushpop(max_heap, -modified_value)
                min_delta = min(min_delta, -max_heap[0] - min_value)
                
        return min_delta
        


#include <queue>
using namespace std;

class Solution {
public:
	int minimumDeviation(vector<int>& nums) {
		int smallest = INT_MAX, ans = INT_MAX;
		priority_queue<int> pq;
		for (int i : nums) {
			int cand = i % 2 == 0 ? i : i * 2;
			smallest = min(smallest, cand);
			pq.push(cand);
		}
		while (!pq.empty()) {
			int cur = pq.top();
			pq.pop();
			ans = min(ans, cur - smallest);
			if (cur % 2 != 0) break;
			int cand = cur / 2;
			smallest = min(smallest, cand);
			pq.push(cand);
		}
		return ans;
	}
};
