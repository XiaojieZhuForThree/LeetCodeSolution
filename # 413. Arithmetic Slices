package com.leetcode.problems;

public class Question413 {
	class Solution {
		public int numberOfArithmeticSlices(int[] A) {
			int ans = 0;

			if (A == null || A.length < 3) {
				return ans;
			}
			int[] getDiff = new int[A.length], getLen = new int[A.length];
			getLen[1] = 2;
			getDiff[1] = A[1] - A[0];
			for (int i = 2; i < A.length; i++) {
				int diff = A[i] - A[i - 1];
				if (getDiff[i - 1] == diff) {
					ans += getLen[i - 1] - 1;
					getLen[i] = getLen[i - 1] + 1;
				} else {
					getLen[i] = 2;
				}
				getDiff[i] = diff;
			}
			return ans;
		}
	}
}


class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        ans = 0
        i, j, k = 0, 1, 2
        while k < len(nums):
            while k < len(nums) and nums[k] - nums[k - 1] == nums[j] - nums[i]:
                k += 1
            if k - i >= 3:
                t = k - i - 2
                ans += (1 + t) * t // 2
            i = k - 1
            j = k
            k = k + 1
        return ans
