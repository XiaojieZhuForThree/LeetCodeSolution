package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question1696 {
	class Solution {
		public int maxResult(int[] nums, int k) {
			if (nums == null || nums.length == 0)
				return 0;
			if (k == 0)
				return 0;
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> nums[b] - nums[a]);
			for (int i = 0; i < nums.length; i++) {
				while (!pq.isEmpty() && pq.peek() + k < i)
					pq.poll();
				if (pq.isEmpty())
					pq.offer(i);
				else {
					nums[i] += nums[pq.peek()];
					pq.offer(i);
				}
			}
			return nums[nums.length - 1];
		}
	}
}
