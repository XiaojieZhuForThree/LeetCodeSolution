package com.leetcode.problems;

import java.util.Arrays;

import com.leetcode.model.TreeNode;

public class Question105 {
	class Solution {
		public TreeNode buildTree(int[] preorder, int[] inorder) {
			if (preorder == null || preorder.length == 0)
				return null;
			if (preorder.length == 1)
				return new TreeNode(preorder[0]);
			TreeNode node = new TreeNode(preorder[0]);
			int i = 0;
			while (inorder[i] != preorder[0])
				i++;
			int[] leftPreorder = Arrays.copyOfRange(preorder, 1, i + 1);
			int[] rightPreorder = Arrays.copyOfRange(preorder, i + 1, preorder.length);
			int[] leftInorder = Arrays.copyOfRange(inorder, 0, i);
			int[] rightInorder = Arrays.copyOfRange(inorder, i + 1, inorder.length);
			node.left = buildTree(leftPreorder, leftInorder);
			node.right = buildTree(rightPreorder, rightInorder);
			return node;
		}
	}
}



from typing import List, Optional
from data.TreeNode import TreeNode


class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:
        if not preorder or not inorder:
            return None
        head = TreeNode(preorder[0])
        left_part = 0
        while inorder[left_part] != preorder[0]:
            left_part += 1
        head.left = self.buildTree(
            preorder[1:left_part + 1], inorder[:left_part])
        head.right = self.buildTree(
            preorder[left_part + 1:], inorder[left_part + 1:])
        return head
