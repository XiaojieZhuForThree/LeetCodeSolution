package com.leetcode.problems;

public class Question1219 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		public int getMaximumGold(int[][] grid) {
			int ans = 0;
			for (int i = 0; i < grid.length; i++) {
				for (int j = 0; j < grid[0].length; j++) {
					if (grid[i][j] > 0) {
						ans = Math.max(ans, dfs(grid, i, j));
					}
				}
			}
			return ans;
		}

		private int dfs(int[][] grid, int i, int j) {
			if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
				return 0;
			}
			if (grid[i][j] == 0) {
				return 0;
			}
			int ans = grid[i][j];
			int max = 0;
			grid[i][j] = 0;
			for (int[] dir : dirs) {
				max = Math.max(max, dfs(grid, i + dir[0], j + dir[1]));
			}
			grid[i][j] = ans;
			return ans + max;
		}
	}
}


#include <vector>

using std::vector;

class Solution {
public:
    vector<std::pair<int, int>> dirs = { {1, 0}, {-1, 0}, {0, 1}, {0, -1} };
    int getMaximumGold(vector<vector<int>>& grid) {
        int m = size(grid), n = size(grid[0]);
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) continue;
                ans = std::max(ans, dfs(grid, i, j));
            }
        }
        return ans;
    }
private:
    int dfs(vector<vector<int>>& grid, int i, int j) {
        if (i < 0 || i >= size(grid) || j < 0 || j >= size(grid[0])) return 0;
        if (grid[i][j] == 0) return 0;
        int ans = grid[i][j], t = grid[i][j];
        grid[i][j] = 0;
        int n = 0;
        for (auto& d : dirs) n = std::max(n, dfs(grid, i + d.first, j + d.second));
        grid[i][j] = t;
        return ans + n;
    }
};
