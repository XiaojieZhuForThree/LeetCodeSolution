package problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class Question1345 {
	class Solution {
		Map<Integer, Set<Integer>> valPos = new HashMap<>();

		public int minJumps(int[] arr) {
			int end = arr.length - 1;
			boolean[] visited = new boolean[arr.length];
			for (int i = 0; i < arr.length; i++) {
				valPos.putIfAbsent(arr[i], new HashSet<>());
				valPos.get(arr[i]).add(i);
			}
			Deque<Integer> queue = new ArrayDeque<>();
			int step = -1;
			visited[0] = true;
			queue.offer(0);
			while (!queue.isEmpty()) {
				step++;
				for (int i = queue.size(); i > 0; i--) {
					int cur = queue.poll();
					if (cur == end) {
						return step;
					}
					for (int j : getDestinations(arr, cur, visited)) {
						visited[j] = true;
						queue.offer(j);
					}
				}
			}
			return -1;
		}

		private Set<Integer> getDestinations(int[] arr, int i, boolean[] visited) {
			Set<Integer> set = new HashSet<>();
			if (i + 1 < arr.length && !visited[i + 1]) {
				set.add(i + 1);
			}
			if (i - 1 >= 0 && !visited[i - 1]) {
				set.add(i - 1);
			}
			if (valPos.containsKey(arr[i])) {
				for (int pos : valPos.get(arr[i])) {
					if (pos != i && !visited[pos]) {
						set.add(pos);
					}
				}
				valPos.remove(arr[i]);
			}

			return set;
		}
	}
}


#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <deque>
using namespace std;

class Solution {
public:
    int minJumps(vector<int>& arr) {
        unordered_map<int, vector<int>> map;
        unordered_set<int> seen;
        for (int i = 0; i < size(arr); i++) map[arr[i]].push_back(i);
        deque<int> queue;
        queue.push_back(0);
        seen.insert(0);
        int ans = 0;
        while (!queue.empty()) {
            for (int i = size(queue); i > 0; i--) {
                int cur = queue.front();
                queue.pop_front();
                if (cur == size(arr) - 1) return ans;
                if (cur + 1 < size(arr) && !seen.count(cur + 1)) {
                    queue.push_back(cur + 1);
                    seen.insert(cur + 1);
                }
                if (cur - 1 >= 0 && !seen.count(cur - 1)) {
                    queue.push_back(cur - 1);
                    seen.insert(cur - 1);
                }
                for (int j : map[arr[cur]]) {
                    if (j != cur && !seen.count(j)) {
                        queue.push_back(j);
                        seen.insert(j);
                    }
                }
                map.erase(arr[cur]);
            }
            ans++;
        }
        return -1;
    }
};
