class RandomizedSet {
    Map<Integer, Integer> map;
    List<Integer> list;
    Random rand;
    /** Initialize your data structure here. */
    public RandomizedSet() {
        map = new HashMap<>();
        list = new ArrayList<>();
        rand = new Random();
    }
    
    /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */
    public boolean insert(int val) {
        if (map.containsKey(val)){
            return false;
        }
        map.put(val, list.size());
        list.add(val);
        return true;
    }
    
    /** Removes a value from the set. Returns true if the set contained the specified element. */
    public boolean remove(int val) {
        if (!map.containsKey(val)) {
            return false;
        }
        int inter = list.get(list.size()-1);
        int index = map.get(val);
        list.set(index, inter);
        map.put(inter, index);
        map.remove(val);
        list.remove(list.size()-1);
        return true;
    }
    
    /** Get a random element from the set. */
    public int getRandom() {
        int index = rand.nextInt(list.size());
        return list.get(index);
    }
}

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet obj = new RandomizedSet();
 * boolean param_1 = obj.insert(val);
 * boolean param_2 = obj.remove(val);
 * int param_3 = obj.getRandom();
 */


#include <stdlib.h>
#include <unordered_map>
using namespace std;

class RandomizedSet {
    unordered_map<int, int> nums, seqs;
    int size;
public:
    RandomizedSet() {
        size = 0;
    }

    bool insert(int val) {
        if (nums.count(val)) return false;
        nums[val] = size;
        seqs[size] = val;
        size++;
        return true;
    }

    bool remove(int val) {
        if (!nums.count(val)) return false;
        int seq = nums[val];
        int swap = seqs[size - 1];
        seqs[seq] = swap;
        seqs[size - 1] = val;
        nums[swap] = seq;
        nums.erase(val);
        seqs.erase(size - 1);
        size--;
        return true;
    }

    int getRandom() {
        return seqs[rand() % size];
    }
};

/**
 * Your RandomizedSet object will be instantiated and called as such:
 * RandomizedSet* obj = new RandomizedSet();
 * bool param_1 = obj->insert(val);
 * bool param_2 = obj->remove(val);
 * int param_3 = obj->getRandom();
 */
