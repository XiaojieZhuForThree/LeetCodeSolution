package com.leetcode.problems;

public class Question1254 {
	class Solution {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		public int closedIsland(int[][] grid) {
			int ans = 0;
			for (int i = 0; i < grid.length; i++) {
				for (int j = 0; j < grid[0].length; j++) {
					if (grid[i][j] == 0) {
						if (dfs(grid, i, j)) {
							ans++;
						}
					}
				}
			}
			return ans;
		}

		private boolean dfs(int[][] grid, int i, int j) {
			if (i < 0 || i >= grid.length || j < 0 || j >= grid[0].length) {
				return false;
			}
			if (grid[i][j] == 1) {
				return true;
			}
			boolean ans = true;
			grid[i][j] = 1;
			for (int[] dir : dirs) {
				ans &= dfs(grid, i + dir[0], j + dir[1]);
			}
			return ans;
		}
	}
}
