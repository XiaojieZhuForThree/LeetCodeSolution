package com.leetcode.problems;

import java.util.Arrays;
import java.util.Stack;

public class Question587 {
	class Solution {
		public int[][] outerTrees(int[][] trees) {
			int n = trees.length;
			if (n <= 1)
				return trees;
			sort(trees, bottomLeft(trees));
			Stack<int[]> stack = new Stack<>();
			stack.push(trees[0]);
			stack.push(trees[1]);
			for (int i = 2; i < n; i++) {
				int[] top = stack.pop();
				while (compAngle(stack.peek(), top, trees[i]) < 0)
					top = stack.pop();
				stack.push(top);
				stack.push(trees[i]);
			}

			int[][] res = new int[stack.size()][2];
			int c = 0;

			for (int[] i : stack)
				res[c++] = i;

			return res;
		}

		// get bottom left point
		int[] bottomLeft(int[][] trees) {
			int[] bottomLeft = trees[0];

			for (int[] tree : trees) {
				if (bottomLeft[1] > tree[1] || (bottomLeft[1] == tree[1] && bottomLeft[0] > tree[1]))
					bottomLeft = tree;
			}
			return bottomLeft;
		}

		// anticlockwise +ve, clockwise -ve, 0 collinear
		public int compAngle(int p1[], int[] p2, int[] p3) {
			int[] firstVector = new int[] { p2[0] - p1[0], p2[1] - p1[1] };
			int[] secondVector = new int[] { p3[0] - p2[0], p3[1] - p2[1] };
			return firstVector[0] * secondVector[1] - firstVector[1] * secondVector[0];
		}

		int compDist(int[] p1, int[] p2) {
			return (p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]);
		}

		// sort points according to angle with the reference to the bottom left point
		void sort(int[][] trees, int[] ref) {
			Arrays.sort(trees, (a, b) -> {
				int compAngle = compAngle(a, ref, b);
				int res = compAngle == 0 ? compDist(a, ref) - compDist(b, ref) : compAngle;
				return res;
			});

			// find collinear points from the end
			int[] q = trees[trees.length - 1];
			int i = trees.length - 2;
			while (i >= 0 && compAngle(trees[i], ref, q) == 0)
				i--;

			// reverse sort collinear points
			int low = i + 1, high = trees.length - 1;

			while (low < high) {
				swap(trees, low, high);
				low++;
				high--;
			}
		}

		void swap(int[][] trees, int l, int r) {
			int[] temp = trees[l];
			trees[l] = trees[r];
			trees[r] = temp;
		}
	}
}



#include <cfloat>
#include <corecrt_math.h>
#include <vector>
#include <algorithm>
#include <set>
using namespace std;

class Solution {
public:
	struct Point {
		int x, y;
		Point() {}
		Point(int a, int b) : x(a), y(b) {}
	};
	bool isCCW(Point p, Point q, Point r) {
		double cross = (double)(r.x - q.x) * (p.y - q.y) - (double)(r.y - q.y) * (p.x - q.x);
		return (cross > 0) || (fabs(cross - 0.0) < DBL_EPSILON);
	}

	bool comp(Point a, Point b) {
		if (fabs(a.x - b.x) < DBL_EPSILON) return a.y < b.y;
		return a.x < b.x;
	}

	vector<Point> convexHullAMC(vector<Point> pnts) {
		vector<Point> hull;
		int n = pnts.size();
		if (n <= 3) return pnts;

		sort(pnts.begin(), pnts.end(), [](Point a, Point b) {
			if (fabs(a.x - b.x) < DBL_EPSILON) return a.y < b.y;
		return a.x < b.x;
			});

		for (int i = 0; i < n; i++) {
			while (hull.size() >= 2 && !isCCW(hull[hull.size() - 2], hull[hull.size() - 1], pnts[i]))
				hull.pop_back();
			hull.push_back(pnts[i]);
		}
		int l = hull.size() + 1;
		for (int i = n - 1; i >= 0; i--) {
			while (hull.size() >= l && !isCCW(hull[hull.size() - 2], hull[hull.size() - 1], pnts[i]))
				hull.pop_back();
			hull.push_back(pnts[i]);
		}
		return hull;
	}

	vector<vector<int>> outerTrees(vector<vector<int>>& trees) {
		int n = (int)trees.size();
		vector<Point> points(n);
		for (int i = 0; i < n; i++) {
			points[i].x = trees[i][0];
			points[i].y = trees[i][1];
		}

		vector<Point> hull = convexHullAMC(points);
		set<pair<int, int>> mp;
		for (int i = 0; i < (int)hull.size(); i++) mp.insert({ hull[i].x, hull[i].y });

		vector<vector<int>> ret;
		for (auto p : mp) ret.push_back({ p.first, p.second });

		return ret;
	}
};
