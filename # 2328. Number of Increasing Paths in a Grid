#include <vector>
using namespace std;

class Solution {
public:
	vector<vector<long long>> dp;
	int m, n;
	long long ans, mod;
	int countPaths(vector<vector<int>>& grid) {
		m = size(grid);
		n = size(grid[0]);
		ans = 0;
		mod = 1e9 + 7;
		dp.resize(m, vector<long long>(n, -1));
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				ans += dfs(i, j, grid) % mod;
			}
		}
		return ans % mod;
	}
private:
	long long dfs(int i, int j, vector<vector<int>>& grid) {
		if (dp[i][j] != -1) return dp[i][j] % mod;
		long long val = 1;
		if (i > 0 && grid[i - 1][j] < grid[i][j]) val += dfs(i - 1, j, grid) % mod;
		if (i < m - 1 && grid[i + 1][j] < grid[i][j]) val += dfs(i + 1, j, grid) % mod;
		if (j > 0 && grid[i][j - 1] < grid[i][j]) val += dfs(i, j - 1, grid) % mod;
		if (j < n - 1 && grid[i][j + 1] < grid[i][j]) val += dfs(i, j + 1, grid) % mod;
		dp[i][j] = val % mod;
		return dp[i][j];
	}
};
