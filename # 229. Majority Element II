package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question229 {
	class Solution1 {
		public List<Integer> majorityElement(int[] nums) {
			int threshold = nums.length / 3;
			Map<Integer, Integer> counts = new HashMap<>();
			for (int i : nums) {
				counts.put(i, counts.getOrDefault(i, 0) + 1);
			}
			List<Integer> ans = new ArrayList<>();
			for (int i : counts.keySet()) {
				if (counts.get(i) > threshold) {
					ans.add(i);
				}
			}
			return ans;
		}
	}

	class Solution2 {
		public List<Integer> majorityElement(int[] nums) {
			int count1 = 0, count2 = 0;
			Integer candidate1 = null, candidate2 = null;
			for (int i : nums) {
				if (candidate1 != null && candidate1 == i) {
					count1++;
				} else if (candidate2 != null && candidate2 == i) {
					count2++;
				} else if (count1 == 0) {
					candidate1 = i;
					count1++;
				} else if (count2 == 0) {
					candidate2 = i;
					count2++;
				} else {
					count1--;
					count2--;
				}
			}
			List<Integer> ans = new ArrayList<>();
			count1 = 0;
			count2 = 0;
			for (int i : nums) {
				if (candidate1 != null && candidate1 == i) {
					count1++;
				}
				if (candidate2 != null && candidate2 == i) {
					count2++;
				}
			}
			int threshold = nums.length / 3;
			if (count1 > threshold) {
				ans.add(candidate1);
			}
			if (count2 > threshold) {
				ans.add(candidate2);
			}
			return ans;
		}
	}
}


#include <vector>
#include <unordered_map>
using std::vector;

class Solution {
public:
    vector<int> majorityElement(vector<int>& nums) {
        std::unordered_map<int, int> m;
        vector<int> ans;
        int cnt = size(nums) / 3;
        for (int i : nums) {
            if (!m.count(i)) m[i] = 1;
            else m[i]++;
        }
        for (auto& p : m) {
            if (p.second > cnt) ans.push_back(p.first);
        }
        return ans;
    }
};
