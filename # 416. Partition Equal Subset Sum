class Solution {

    public boolean canPartition(int[] nums) {
        if (nums == null || nums.length < 2) return false;
        int sum = 0;
        for (int i : nums){
        	sum += i;
        }
        if (sum % 2 == 1) return false;
        int half = sum / 2;
        return helper(nums, half);
    }
    private boolean helper(int[] nums, int target){
    	Set<Integer> set = new HashSet<>();
    	set.add(nums[0]);
    	for (int i = 1; i < nums.length; i++){
    		if (nums[i] == target) return true;
    		else if (nums[i] > target) return false;
    		else if (set.contains(target - nums[i])) return true;
    		else {
    			Set<Integer> newSet = new HashSet<>(set);
    			for (int j : set){
    				newSet.add(nums[i] + j);
    			}
    			set = newSet;
    		}
    	}
    	return set.contains(target);
    }
}
