package problems;

public class Question879 {
	class Solution {
		public int profitableSchemes(int G, int P, int[] group, int[] profit) {
			int ans = 0, mod = 1000000007;
			int[][] dp = new int[P + 1][G + 1];
			dp[0][0] = 1;
			for (int k = 0; k < group.length; k++) {
				int g = group[k], p = profit[k];
				for (int i = P; i >= 0; i--) {
					for (int j = G - g; j >= 0; j--) {
						dp[Math.min(i + p, P)][j + g] += dp[i][j];
						dp[Math.min(i + p, P)][j + g] %= mod;
					}
				}
			}
			for (int i : dp[P]) {
				ans += i;
				ans %= mod;
			}
			return ans;
		}
	}
}


#include <map>
#include <vector>
using namespace std;

class Solution {
public:
	struct Comp {
		bool operator()(const pair<int, int>& a, const pair<int, int>& b) const {
			if (a.second == b.second) return a.first > b.first;
			return a.second > b.second;
		}
	};
	int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
		map<pair<int, int>, long long> dp;
		dp[{n, 0}] = 1;
		for (int i = 0; i < size(group); i++) {
			for (auto& p : dp) {
				if (p.first.first < group[i]) continue;
				dp[{p.first.first - group[i], p.first.second + profit[i]}] += p.second;
			}
		}
		long long ans = 0, mod = 1000000007;
		for (auto& p : dp) {
			if (p.first.second >= minProfit) {
				ans += p.second;
				ans %= mod;
			}
		}
		return ans;
	}
};
