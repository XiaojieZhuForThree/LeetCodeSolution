package com.leetcode.problems;

import java.util.Arrays;

public class Question704 {
	class Solution1 {
		public int search(int[] nums, int target) {
			int left = 0, right = nums.length;
			while (left < right) {
				int mid = left + (right - left) / 2;
				if (nums[mid] == target) {
					return mid;
				} else if (nums[mid] < target) {
					left = mid + 1;
				} else {
					right = mid;
				}
			}
			return -1;
		}
	}

	class Solution2 {
		public int search(int[] nums, int target) {
			int index = Arrays.binarySearch(nums, target);
			return index >= 0 ? index : -1;
		}
	}
}


#include <vector>
using namespace std;

class Solution {
public:
	int search(vector<int>& nums, int target) {
		int l = 0, r = size(nums) - 1;
		while (l < r) {
			int m = l + (r - l) / 2;
			if (nums[m] == target) return m;
			else if (nums[m] < target) l = m + 1;
			else r = m;
		}
		return nums[l] == target ? l : -1;
	}
};
