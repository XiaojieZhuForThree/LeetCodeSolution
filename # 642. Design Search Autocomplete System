class TrieNode {
    Map<Character, TrieNode> children;
    Map<String, Integer> counts;
    boolean isWord;
    
    public TrieNode() {
        children = new HashMap<>();
        counts = new HashMap<>();   // used to facilitate getting the top 3 sentences.
        isWord = false;
    }
}
class Pair {
    String s;
    int c;
    
    public Pair(String s, int c) {
        this.s = s;
        this.c = c;
    }
}
class AutocompleteSystem {
    TrieNode root;
    String prefix;
    public AutocompleteSystem(String[] sentences, int[] times) {
        root = new TrieNode();
        prefix = "";
        for (int i = 0; i < sentences.length; i++) {
            add(sentences[i], times[i]);
        }
    }
    private void add(String s, int cnt) {
        TrieNode dummy = root;
        for (char c : s.toCharArray()) {
            TrieNode next = dummy.children.get(c);
            if (next == null) {
                next = new TrieNode();
                dummy.children.put(c, next);
            }
            dummy = next;
            dummy.counts.put(s, dummy.counts.getOrDefault(s, 0) + cnt);
        }
        dummy.isWord = true;
    }
    public List<String> input(char c) {
        if (c == '#') {
            add(prefix, 1);
            prefix = "";
            return new ArrayList<>();
        }
        prefix += c;
        TrieNode dummy = root;
        for (char ch : prefix.toCharArray()) {
            TrieNode next = dummy.children.get(ch);
            if (next == null) {
                return new ArrayList<>();
            }
            dummy = next;
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>(new Comparator<Pair>(){
            public int compare(Pair o1, Pair o2) {
                if (o1.c == o2.c) {
                    return o1.s.compareTo(o2.s);
                }
                return o2.c - o1.c;
            }
        });
        for (String s : dummy.counts.keySet()) {
            pq.add(new Pair(s, dummy.counts.get(s)));
        }
        List<String> res = new ArrayList<String>();
        for (int i = 0; i < 3 && !pq.isEmpty(); i++) {
            res.add(pq.poll().s);
        }
        return res;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */


class TrieNode {
    Map<Character, TrieNode> children;
    Set<String> set;
    public TrieNode() {
        children = new HashMap<>();
        set = new HashSet<>();
    }
}
class AutocompleteSystem {
    TrieNode root;
    String prefix;
    Map<String, Integer> counts;
    
    public AutocompleteSystem(String[] sentences, int[] times) {
        root = new TrieNode();
        counts = new HashMap<>();
        prefix = "";
        for (int i = 0; i < sentences.length; i++) {
            counts.put(sentences[i], times[i]);
            update(sentences[i]);
        }
    }

    private void update(String s) {
        TrieNode dummy = root;
        for (char c : s.toCharArray()) {
            TrieNode next = dummy.children.get(c);
            if (next == null) {
                next = new TrieNode();
                dummy.children.put(c, next);
            }
            next.set.add(s);
            dummy = next;
        }
    }
    
    public List<String> input(char c) {
        if (c == '#') {
            counts.put(prefix, counts.getOrDefault(prefix, 0) + 1);
            update(prefix);
            prefix = "";
            return new ArrayList<>();
        }
        prefix += c;
        TrieNode dummy = root;
        for (char ch : prefix.toCharArray()) {
            TrieNode next = dummy.children.get(ch);
            if (next == null) {
                return new ArrayList<>();
            }
            dummy = next;
        }
        PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>(){
            public int compare (String o1, String o2) {
                if (counts.get(o1) == counts.get(o2)) {
                    return o1.compareTo(o2);
                }
                return counts.get(o2) - counts.get(o1);
            }
        });
        for (String str : dummy.set) {
            pq.offer(str);
        }
        List<String> list = new ArrayList<>();
        for (int i = 0; i < 3 && !pq.isEmpty(); i++) {
            list.add(pq.poll());
        }
        return list;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
