class TrieNode {
    Map<Character, TrieNode> children;
    Set<String> set;
    public TrieNode(){
        children = new HashMap<>();
        set = new HashSet<>();
    }
}
class AutocompleteSystem {
    TrieNode trie = new TrieNode();
    Map<String, Integer> records = new HashMap<>();
    StringBuilder sb = new StringBuilder();
    public AutocompleteSystem(String[] sentences, int[] times) {
        for (int i = 0; i < sentences.length; i++) {
            records.put(sentences[i], times[i]);
            TrieNode root = trie;
            for (char c : sentences[i].toCharArray()) {
                if (!root.children.containsKey(c)) {
                    root.children.put(c, new TrieNode());
                }
                root = root.children.get(c);
                root.set.add(sentences[i]);
            }
        }
    }
    
    public List<String> input(char c) {
        List<String> ans = new ArrayList<>();
        if (c == '#') {
            String generated = sb.toString();
            records.put(generated, records.getOrDefault(generated, 0) + 1);
            sb = new StringBuilder();
            TrieNode root = trie;
            for (char i : generated.toCharArray()) {
                if (!root.children.containsKey(i)) {
                    root.children.put(i, new TrieNode());
                }
                root = root.children.get(i);
                root.set.add(generated);
            }
            return ans;
        }
        sb.append(c);
        TrieNode root = trie;
        for (char i : sb.toString().toCharArray()) {
            if (!root.children.containsKey(i)) {
                return ans;
            }
            root = root.children.get(i);
        }
        PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>(){
            public int compare(String o1, String o2) {
                if (records.get(o1) !=records.get(o2)) {
                    return records.get(o2)-records.get(o1);
                }
                return o1.compareTo(o2);
            }
        });
        for (String i : root.set) {
            pq.add(i);
        }
        while (!pq.isEmpty() && ans.size() < 3) {
            ans.add(pq.poll());
        }
        return ans;
    }
}

/**
 * Your AutocompleteSystem object will be instantiated and called as such:
 * AutocompleteSystem obj = new AutocompleteSystem(sentences, times);
 * List<String> param_1 = obj.input(c);
 */
