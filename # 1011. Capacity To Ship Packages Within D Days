class Solution {
    public int shipWithinDays(int[] weights, int D) {
        int left = 0, right = 0;
        for (int i : weights) {
            left = Math.max(left, i);
            right += i;
        }
        while (left < right) {
            int mid = (left + right) / 2;
            int cur = 0, times = 1;
            for (int i : weights) {
                if (cur + i > mid) {
                    times++;
                    cur = 0;
                }
                cur += i;
            }
            if (times > D) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left;
    }
}


#include <vector>
#include <numeric>
#include <queue>
using namespace std;

class Solution {
public:
	int shipWithinDays(vector<int>& weights, int days) {
		int l = *max_element(weights.begin(), weights.end()), r = accumulate(weights.begin(), weights.end(), 0);
		while (l < r) {
			int m = l + (r - l) / 2;
			if (canHold(weights, days, m)) r = m;
			else l = m + 1;
		}
		return l;
	}
private:
	bool canHold(vector<int>& weights, int days, int m) {
		int day = 0, cur = 0;
		for (int i : weights) {
			if (cur + i > m) {
				day++;
				cur = 0;
			}
			cur += i;
		}
		if (cur > 0) day++;
		return day <= days;
	}
};
