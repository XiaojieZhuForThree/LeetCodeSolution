package com.leetcode.problems;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question139 {
	class Solution {
		public boolean wordBreak(String s, List<String> wordDict) {
			boolean[] dp = new boolean[s.length() + 1];
			dp[0] = true;
			Set<String> set = new HashSet<>(wordDict);
			for (int i = 1; i <= s.length(); i++) {
				for (int j = 0; j < i; j++) {
					if (set.contains(s.substring(j, i)) && dp[j] == true) {
						dp[i] = true;
						break;
					}
					dp[i] = false;
				}
			}
			return dp[s.length()];
		}
	}
}


#include <unordered_map>
#include <unordered_set>
#include <string>
#include <vector>

using std::string;
using std::vector;

class Solution {
public:
	std::unordered_map<int, bool> map;
	bool wordBreak(string s, vector<string>& wordDict) {
		std::unordered_set<string> ws(wordDict.begin(), wordDict.end());
		return dfs(s, 0, ws);
	}

private:
	bool dfs(string& s, int i, std::unordered_set<string>& ws) {
		if (i >= size(s)) return true;
		if (map.count(i)) return map[i];
		bool ans = false;
		for (int j = i + 1; j <= size(s); j++) {
			string cur = s.substr(i, j - i);
			if (ws.count(cur)) ans |= dfs(s, j, ws);
		}
		map[i] = ans;
		return ans;
	}
};
