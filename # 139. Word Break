// key: dynamic programming

class Solution {
    Set<String> remains = new HashSet<>();
    public boolean wordBreak(String s, List<String> wordDict) {
        for (String i : wordDict) {
        	if (s.equals(i)) {
        		return true;
        	}
        	else if (s.length()>i.length() && s.substring(0,i.length()).equals(i)) {
        		String remain = s.substring(i.length(), s.length());
        		if (!remains.contains(remain) && wordBreak(remain, wordDict) == true) {
            			return true;
        		}
    			remains.add(remain);
        	}
        }
        return false;
    }
}


class Solution {
    public boolean wordBreak(String s, List<String> wordDict) {
        boolean[] dp = new boolean[s.length()+1];
        dp[0] = true;
        for (int i = 0; i <= s.length(); i++) {
            for (String word : wordDict) {
                if (word.length() <= i && dp[i-word.length()] && word.equals(s.substring(i-word.length(), i))) {
                    dp[i] = true;
                }
            }
        }
        return dp[s.length()];
    }
}
