package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question179 {
	class Solution {
		public String largestNumber(int[] nums) {
			PriorityQueue<String> pq = new PriorityQueue<>((a, b) -> (b + a).compareTo(a + b));
			for (int i : nums) {
				pq.offer(String.valueOf(i));
			}
			StringBuilder sb = new StringBuilder();
			while (!pq.isEmpty()) {
				sb.append(pq.poll());
			}
			return sb.charAt(0) == '0' ? "0" : sb.toString();
		}
	}
}

#include <string>
#include <vector>
#include <queue>

using std::string;
using std::vector;

class Solution {
public:
    string largestNumber(vector<int>& nums) {
        auto comp = [](string a, string b) {
            return a + b < b + a;
            };
        std::priority_queue<string, vector<string>, decltype(comp)> pq;
        for (int i : nums) pq.push(std::to_string(i));
        string ans = "";
        while (!pq.empty()) {
            string cur = pq.top();
            pq.pop();
            ans += cur;
        }
        return ans[0] == '0' ? "0" : ans;
    }
};
