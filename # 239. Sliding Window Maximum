package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.TreeMap;

public class Question239 {
	class Solution1 {
		public int[] maxSlidingWindow(int[] nums, int k) {
			int[] ans = new int[nums.length - k + 1];
			TreeMap<Integer, Integer> map = new TreeMap<>();
			for (int i = 0; i < k; i++) {
				map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
			}
			ans[0] = map.lastKey();
			for (int i = k; i < nums.length; i++) {
				map.put(nums[i - k], map.get(nums[i - k]) - 1);
				if (map.get(nums[i - k]) == 0) {
					map.remove(nums[i - k]);
				}
				map.put(nums[i], map.getOrDefault(nums[i], 0) + 1);
				ans[i - k + 1] = map.lastKey();
			}
			return ans;
		}
	}

	class Solution2 {
		public int[] maxSlidingWindow(int[] nums, int k) {
			int[] ans = new int[nums.length - k + 1];
			Deque<Integer> deque = new ArrayDeque<>();
			for (int i = 0; i < nums.length; i++) {
				while (!deque.isEmpty() && deque.peekFirst() < i - k + 1) {
					deque.pollFirst();
				}
				while (!deque.isEmpty() && nums[deque.peekLast()] < nums[i]) {
					deque.pollLast();
				}
				deque.offer(i);
				if (i - k + 1 >= 0) {
					ans[i - k + 1] = nums[deque.peekFirst()];
				}
			}
			return ans;
		}
	}
}
