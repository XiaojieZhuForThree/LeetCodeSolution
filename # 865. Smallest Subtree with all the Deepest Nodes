package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

import com.leetcode.api.TreeNode;

public class Question865 {
	class Solution1 {
		private int maxDepth = 0;
		private int maxCnt = 0;
		TreeNode ans = null;
		Map<TreeNode, Integer> map;

		public TreeNode subtreeWithAllDeepest(TreeNode root) {
			if (root == null) {
				return root;
			}
			map = new HashMap<>();
			markDepth(root, 1);
			getMinSub(root, maxDepth, maxCnt);
			restoreVal(ans);
			return ans;
		}

		private void markDepth(TreeNode node, int dep) {
			if (node == null) {
				return;
			}
			map.put(node, node.val);
			node.val = dep;
			if (maxDepth < dep) {
				maxDepth = dep;
				maxCnt = 1;
			} else if (maxDepth == dep) {
				maxCnt++;
			}
			markDepth(node.left, dep + 1);
			markDepth(node.right, dep + 1);
		}

		private int getMinSub(TreeNode node, int maxDepth, int maxCnt) {
			if (node == null) {
				return 0;
			}
			int left = getMinSub(node.left, maxDepth, maxCnt);
			int right = getMinSub(node.right, maxDepth, maxCnt);
			int cur = left + right;
			if (node.val == maxDepth) {
				cur++;
			}
			if (cur == maxCnt) {
				if (ans == null) {
					ans = node;
				}
			}
			return cur;
		}

		private void restoreVal(TreeNode node) {
			if (node == null) {
				return;
			}
			node.val = map.get(node);
			restoreVal(node.left);
			restoreVal(node.right);
		}
	}

	class Solution2 {
		public TreeNode subtreeWithAllDeepest(TreeNode root) {
			if (root == null) {
				return root;
			}
			int left = getDepth(root.left);
			int right = getDepth(root.right);
			if (left == right) {
				return root;
			} else if (left < right) {
				return subtreeWithAllDeepest(root.right);
			}
			return subtreeWithAllDeepest(root.left);
		}

		private int getDepth(TreeNode node) {
			if (node == null) {
				return 0;
			}
			return 1 + Math.max(getDepth(node.left), getDepth(node.right));
		}
	}
}
