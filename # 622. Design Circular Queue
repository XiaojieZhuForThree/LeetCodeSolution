package com.leetcode.problems;

public class Question622 {
	class MyCircularQueue {
		class ListNode {
			int val;
			ListNode next;

			public ListNode(int val) {
				this.val = val;
			}
		}

		int k;
		int cur = 0;
		ListNode head;
		ListNode tail;

		public MyCircularQueue(int k) {
			this.k = k;
			this.cur = 0;
		}

		public boolean enQueue(int value) {
			if (isFull()) {
				return false;
			}
			if (isEmpty()) {
				head = new ListNode(value);
				tail = head;
				tail.next = head;
				cur++;
				return true;
			}
			ListNode add = new ListNode(value);
			tail.next = add;
			add.next = head;
			tail = add;
			cur++;
			return true;
		}

		public boolean deQueue() {
			if (isEmpty()) {
				return false;
			}
			if (head == tail) {
				head = null;
				tail = null;
				cur--;
				return true;
			}
			head = head.next;
			tail.next = head;
			cur--;
			return true;
		}

		public int Front() {
			return head == null ? -1 : head.val;
		}

		public int Rear() {
			return tail == null ? -1 : tail.val;
		}

		public boolean isEmpty() {
			return cur == 0;
		}

		public boolean isFull() {
			return cur == k;
		}
	}

	/**
	 * Your MyCircularQueue object will be instantiated and called as such:
	 * MyCircularQueue obj = new MyCircularQueue(k); boolean param_1 =
	 * obj.enQueue(value); boolean param_2 = obj.deQueue(); int param_3 =
	 * obj.Front(); int param_4 = obj.Rear(); boolean param_5 = obj.isEmpty();
	 * boolean param_6 = obj.isFull();
	 */
}
