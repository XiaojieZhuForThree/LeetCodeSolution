package problems;

public class Question622 {
	class MyCircularQueue {
		private class Node {
			int data;
			Node next;

			public Node(int data) {
				this.data = data;
			}
		}

		Node head, tail;
		final int size;
		private int cur;

		/** Initialize your data structure here. Set the size of the queue to be k. */
		public MyCircularQueue(int k) {
			this.size = k;
			head = tail = null;
			this.cur = 0;

		}

		/**
		 * Insert an element into the circular queue. Return true if the operation is
		 * successful.
		 */
		public boolean enQueue(int value) {
			if (isFull()) {
				return false;
			}
			Node node = new Node(value);
			if (head == null) {
				head = tail = node;
				head.next = tail;
				tail.next = head;
			} else {
				tail.next = node;
				node.next = head;
				tail = node;
			}
			cur++;
			return true;
		}

		/**
		 * Delete an element from the circular queue. Return true if the operation is
		 * successful.
		 */
		public boolean deQueue() {
			if (isEmpty()) {
				return false;
			}
			if (head.next == head) {
				head = tail = null;
			} else {
				head = head.next;
				tail.next = head;
			}
			cur--;
			return true;
		}

		/** Get the front item from the queue. */
		public int Front() {
			if (isEmpty()) {
				return -1;
			}
			return head.data;
		}

		/** Get the last item from the queue. */
		public int Rear() {
			if (isEmpty()) {
				return -1;
			}
			return tail.data;
		}

		/** Checks whether the circular queue is empty or not. */
		public boolean isEmpty() {
			return cur == 0;
		}

		/** Checks whether the circular queue is full or not. */
		public boolean isFull() {
			return cur == size;
		}
	}

	/**
	 * Your MyCircularQueue object will be instantiated and called as such:
	 * MyCircularQueue obj = new MyCircularQueue(k); boolean param_1 =
	 * obj.enQueue(value); boolean param_2 = obj.deQueue(); int param_3 =
	 * obj.Front(); int param_4 = obj.Rear(); boolean param_5 = obj.isEmpty();
	 * boolean param_6 = obj.isFull();
	 */
}
