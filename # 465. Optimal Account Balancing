package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question465 {
	class Solution {
		int min = Integer.MAX_VALUE;

		public int minTransfers(int[][] transactions) {
			Map<Integer, Integer> balance = new HashMap<>();
			for (int[] transaction : transactions) {
				balance.put(transaction[0], balance.getOrDefault(transaction[0], 0) - transaction[2]);
				balance.put(transaction[1], balance.getOrDefault(transaction[1], 0) + transaction[2]);
			}
			Map<Integer, Integer> debts = new HashMap<>();
			Map<Integer, Integer> owes = new HashMap<>();
			for (int i : balance.keySet()) {
				if (balance.get(i) > 0) {
					owes.put(balance.get(i), owes.getOrDefault(balance.get(i), 0) + 1);
				} else if (balance.get(i) < 0) {
					debts.put(balance.get(i), debts.getOrDefault(balance.get(i), 0) + 1);
				}
			}
			int ans = 0;
			for (int i : debts.keySet()) {
				if (owes.containsKey(-i)) {
					int val = Math.min(debts.get(i), owes.get(-i));
					ans += val;
					debts.put(i, debts.get(i) - val);
					owes.put(-i, owes.get(-i) - val);
				}
			}
			List<Integer> debtList = new ArrayList<>();
			List<Integer> oweList = new ArrayList<>();
			for (int i : debts.keySet()) {
				for (int j = 0; j < debts.get(i); j++) {
					debtList.add(i);
				}
			}
			for (int i : owes.keySet()) {
				for (int j = 0; j < owes.get(i); j++) {
					oweList.add(i);
				}
			}
			dfs(debtList, oweList, 0);
			return ans + min;
		}

		private void dfs(List<Integer> debtList, List<Integer> oweList, int count) {
			if (debtList.size() == 0 && oweList.size() == 0) {
				min = Math.min(min, count);
				return;
			}
			if (count >= min) {
				return;
			}
			int debt = debtList.get(0);
			for (int i = 0; i < oweList.size(); i++) {
				int owe = oweList.get(i);
				int newDebt = Math.min(0, debt + owe);
				int newOwe = Math.max(0, debt + owe);
				if (newDebt == 0) {
					debtList.remove(0);
				} else {
					debtList.set(0, newDebt);
				}
				if (newOwe == 0) {
					oweList.remove(i);
				} else {
					oweList.set(i, newOwe);
				}
				dfs(debtList, oweList, count + 1);
				if (newDebt == 0) {
					debtList.add(0, debt);
				} else {
					debtList.set(0, debt);
				}
				if (newOwe == 0) {
					oweList.add(i, owe);
				} else {
					oweList.set(i, owe);
				}
			}
			return;
		}
	}
}
