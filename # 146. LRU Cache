class LRUCache {

    class DLinkedNode{
        int key, value;
        DLinkedNode prev, next;
    }
    
    Map<Integer, DLinkedNode> cache;
    DLinkedNode head, tail;
    int capacity, count;
    public LRUCache(int capacity) {
        cache = new HashMap<>();
        head = new DLinkedNode();
        tail = new DLinkedNode();
        head.next=tail;
        tail.prev=head;
        head.prev = null;
        tail.next = null;
        this.capacity = capacity;  
        this.count = 0;
    }
    
    public int get(int key) {
        DLinkedNode node = cache.get(key);
        if(node== null) return -1;
        removeNode(node);
        addNode(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        DLinkedNode node = cache.get(key);
        if(node==null){
            DLinkedNode newNode = new DLinkedNode();
            newNode.key = key;
            newNode.value = value;
            cache.put(key, newNode);
            addNode(newNode);
            count++;
            if(count > capacity){     
                cache.remove(tail.prev.key);
                removeNode(tail.prev);
                count--;
            }
        }else{
            node.value = value;
            removeNode(node);
            addNode(node);
        }
    }
    
    private void addNode(DLinkedNode node){
        node.prev = head;
        node.next = head.next;
        
        head.next.prev = node;
        head.next = node;
        
    }
    
    private void removeNode(DLinkedNode node){
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */

class LRUCache {
    int cap;
    Map<Integer, DoubleLinkedNode> cache;
    DoubleLinkedNode least, recent;
    
    public LRUCache(int capacity) {
        cap = capacity;
        cache = new HashMap<>();
        least = null;
        recent = null;
    }
    
    public int get(int key) {
        if (cache.containsKey(key)) {
            DoubleLinkedNode target = cache.get(key);
            target.update();
            return target.val;
        }
        return -1;
    }
    
    public void put(int key, int value) {
        if (cache.containsKey(key)) {
            DoubleLinkedNode target = cache.get(key);
            target.val = value;
            target.update();
        } else {
            if (cap == 0) {
                return;
            }
            if (cache.size() == cap) {
                cache.remove(least.key);
                least.delete();
            }
            DoubleLinkedNode newNode = new DoubleLinkedNode(key, value);
            newNode.append();
            cache.put(key, newNode);
        }
    }
    class DoubleLinkedNode {
        int key;
        int val;
        DoubleLinkedNode left = null, right = null;

        DoubleLinkedNode(int key, int val) {
            this.key = key;
            this.val = val;
        }
        void append() {
            if (recent == null) {
                recent = this;
                least = this;
            } else {
                recent.right = this;
                this.left = recent;
                this.right = null;
                recent = this;
            }
        }
        void update() {
            if (this == recent) {
                return;
            } else {
                if (this != least) {
                    this.left.right = this.right;
                } else {
                    least = this.right;
                }
                this.right.left = this.left;
                this.append();
            }

        }
        void delete() {
            if (this == recent) {
                least = null;
                recent = null;
            } else {
                least = least.right;
                least.left = null;                
            }
        }
    }
}



/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */


class LRUCache {
    LinkedHashMap<Integer, Integer> map;
    int cap;
    public LRUCache(int capacity) {
        cap = capacity;
        map = new LinkedHashMap<>();
    }
    
    public int get(int key) {
        if (!map.containsKey(key)) {
            return -1;
        }
        int val = map.remove(key);
        map.put(key, val);
        return val;
    }
    
    public void put(int key, int value) {
        if (map.containsKey(key)) {
            map.remove(key);
        } else if (map.size() == cap) {
            map.remove(map.keySet().iterator().next());
        }
        map.put(key, value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */



class LRUCache {
    Map<Integer, Integer> map;
    int cap;
    public LRUCache(int capacity) {
        cap = capacity;
        map = new LinkedHashMap<Integer, Integer>(cap, 0.75f, true){
            protected boolean removeEldestEntry(Map.Entry entry){
                return size() > cap;
            }
        };
    }
    
    public int get(int key) {
        return map.getOrDefault(key, -1);
    }
    
    public void put(int key, int value) {
        map.put(key, value);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
