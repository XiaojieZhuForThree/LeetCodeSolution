class Solution {
    public int distinctSubseqII(String S) {
        int[] dp = new int[S.length()];
        int[] ends = new int[26];
        Arrays.fill(dp, 1);
        int ans = 0, mod = (int)1e9 + 7;
        for (int i = 0; i < S.length(); i++) {
            int index = S.charAt(i) - 'a';
            dp[i] += ans - ends[index];
            dp[i] = (dp[i] + mod) % mod;
            ans = (ans + dp[i]) % mod;
            ends[index] = (ends[index] + dp[i]) % mod;
        }
        return ans;
    }
}



class Solution {
    public int distinctSubseqII(String S) {
        int end[] = new int[26], res = 0, added = 0, mod = (int)1e9 + 7;
        for (char c : S.toCharArray()) {
            added = (res + 1 - end[c - 'a']) % mod;
            res = (res + added) % mod;
            end[c - 'a'] = (end[c - 'a'] + added) % mod;
        }
        return (res + mod) % mod;
    }
}


class Solution {
    public int distinctSubseqII(String S) {
        int[] ends = new int[26];
        int ans = 0, mod = (int)1e9 + 7;
        for (char c : S.toCharArray()) {
            int cur = (1 + ans - ends[c-'a'] + mod) % mod;
            ans = (ans + cur) % mod;
            ends[c-'a'] = (ends[c-'a'] + cur) % mod;
        }
        return ans;
    }
}
