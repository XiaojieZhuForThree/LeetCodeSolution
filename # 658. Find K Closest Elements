package com.leetcode.problems;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;

public class Question658 {
	class Solution {
		public List<Integer> findClosestElements(int[] arr, int k, int x) {
			if (arr == null || arr.length == 0)
				return List.of();
			PriorityQueue<Integer> pq = new PriorityQueue<>(new Comparator<Integer>() {
				@Override
				public int compare(Integer a, Integer b) {
					if (Math.abs(a - x) == Math.abs(b - x))
						return a - b;
					return Math.abs(a - x) - Math.abs(b - x);
				}
			});
			for (int i : arr)
				pq.offer(i);
			List<Integer> ans = new ArrayList<>();
			for (int i = 0; i < k && !pq.isEmpty(); i++)
				ans.add(pq.poll());
			Collections.sort(ans);
			return ans;
		}
	}
}

#include <cstdlib>
#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
	vector<int> findClosestElements(vector<int>& arr, int k, int x) {
		sort(arr.begin(), arr.end(), [x](const int a, const int b) {
			if (abs(a - x) == abs(b - x)) return a < b;
			return abs(a - x) < abs(b - x);
			});
		vector<int> ans(arr.begin(), arr.begin() + k);
		sort(ans.begin(), ans.end());
		return ans;
	}
};
