class Solution {
    public int uniquePaths(int m, int n) {
        if (m <= 1 || n <= 1) return 1;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; i++){
            ans[i][0] = 1;
        }
        for (int j = 0; j < n; j++){
            ans[0][j] = 1;
        }
        for (int i = 1; i < m; i++){
            for (int j = 1; j < n; j++){
                ans[i][j] = ans[i-1][j] + ans[i][j-1];
            }
        }
        return ans[m-1][n-1];
    }
}



class Solution {
    Map<String, Integer> map = new HashMap<>();
    public int uniquePaths(int m, int n) {
        if (m == 1 || n == 1) return 1;
        StringBuilder sb = new StringBuilder();
        sb.append(m);
        sb.append(",");
        sb.append(n);
        String key = sb.toString();
        if (map.containsKey(key)) return map.get(key);
        else {
        	int ans =  uniquePaths(m-1, n) + uniquePaths(m, n-1);
        	map.put(key, ans);
        	return ans;
        }
    }
}
