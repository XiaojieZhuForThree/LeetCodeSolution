package com.leetcode.problems;

public class Question62 {
	class Solution {
		public int uniquePaths(int m, int n) {
			int[][] dp = new int[m][n];
			dp[0][0] = 1;
			for (int i = 0; i < m; i++) {
				for (int j = 0; j < n; j++) {
					if (i > 0) {
						dp[i][j] += dp[i - 1][j];
					}
					if (j > 0) {
						dp[i][j] += dp[i][j - 1];
					}
				}
			}
			return dp[m - 1][n - 1];
		}
	}
}


class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        dp = [[0 for i in range(n)] for i in range(m)]
        dp[0][0] = 1
        for i in range(m):
            for j in range(n):
                if i > 0:
                    dp[i][j] += dp[i - 1][j]
                if j > 0:
                    dp[i][j] += dp[i][j - 1]
        return dp[m - 1][n - 1]
        
