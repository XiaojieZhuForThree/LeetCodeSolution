class Solution1 {
    public int uniquePaths(int m, int n) {
        if (m == 1 || n == 1)
            return 1;
        int[][] sum = new int[m][n];
        for (int i = 0; i < m; i ++) {
            sum[i][0] = 1;
        }
        for (int j = 0; j < n; j ++) {
            sum[0][j] = 1;
        }
        for (int i = 1; i < m; i ++) {
            for (int j = 1; j < n; j ++) {
                sum[i][j] = sum[i - 1][j] + sum[i][j - 1];
            }
        }
        return sum[m - 1][n - 1];
    }
}



class Solution {
    Map<String, Integer> map = new HashMap<>();
    public int uniquePaths(int m, int n) {
        if (m == 1 || n == 1) return 1;
        StringBuilder sb = new StringBuilder();
        sb.append(m);
        sb.append(",");
        sb.append(n);
        String key = sb.toString();
        if (map.containsKey(key)) return map.get(key);
        else {
        	int ans =  uniquePaths(m-1, n) + uniquePaths(m, n-1);
        	map.put(key, ans);
        	return ans;
        }
    }
}
