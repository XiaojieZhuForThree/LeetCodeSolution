package com.leetcode.problems;

public class Question41 {
	class Solution {
		public int firstMissingPositive(int[] nums) {
			processNums(nums);
			return findMissingPos(nums);
		}

		private final void processNums(int[] nums) {
			int n = nums.length;
			for (int i = 0; i < n; i++) {
				if (nonPosOrOverflow(nums[i], n)) {
					nums[i] = n + 1;
				}
			}
			for (int i = 0; i < n; i++) {
				int target = Math.abs(nums[i]);
				if (nonPosOrOverflow(target, n)) {
					continue;
				}
				int pos = nums[target - 1];
				nums[target - 1] = -Math.abs(pos);
			}
		}

		private final boolean nonPosOrOverflow(int num, int n) {
			return num <= 0 || num > n;
		}

		private final int findMissingPos(int[] nums) {
			for (int i = 0; i < nums.length; i++) {
				if (nums[i] >= 0) {
					return i + 1;
				}
			}
			return nums.length + 1;
		}
	}
}
