package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

public class Question952 {
	class Solution {
		class UnionFind {
			private final int[] parents;
			private final int[] size;

			public UnionFind() {
				parents = new int[100001];
				size = new int[100001];
				for (int i = 0; i < parents.length; i++) {
					parents[i] = i;
					size[i] = 1;
				}
			}

			public final int find(int i) {
				if (parents[i] != i) {
					parents[i] = find(parents[i]);
				}
				return parents[i];
			}

			public final void union(int A, int B) {
				int parentA = find(A);
				int parentB = find(B);
				if (parentA == parentB) {
					return;
				}
				parents[parentA] = parentB;
				size[parentB] += size[parentA];
			}

			public final int maxSize() {
				int max = 0;
				for (int i : size) {
					max = Math.max(max, i);
				}
				return max;
			}
		}

		public int largestComponentSize(int[] A) {
			UnionFind uf = new UnionFind();
			Map<Integer, Integer> map = new HashMap<>();
			for (int i = 0; i < A.length; i++) {
				int a = A[i];
				for (int j = 2; j * j <= a; j++) {
					if (!canDivide(a, j)) {
						continue;
					}
					map.putIfAbsent(j, a);
					map.putIfAbsent(a / j, a);
					uf.union(map.get(j), a);
					uf.union(map.get(a / j), a);
				}
				map.putIfAbsent(a, a);
				uf.union(map.get(a), a);
			}
			return uf.maxSize();
		}

		private final boolean canDivide(int a, int b) {
			return a % b == 0;
		}
	}
}
