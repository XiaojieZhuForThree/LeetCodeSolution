class Solution {
    class UF{
        int[] parents;
        int[]sizes;
        int max;
        public UF(int N) {
            parents = new int[N];
            sizes = new int[N];
            max = 1;
            for (int i = 0; i < N; i++) {
                parents[i] = i;
                sizes[i] = 1;
            }
        }
        public int find(int x) {
            if (x == parents[x]) {
                return x;
            }
            parents[x] = find(parents[x]);
            return parents[x];
        }
        public void union(int x, int y) {
            int parX = find(x);
            int parY = find(y);
            if (parX != parY) {
                parents[parX] = parY;
                sizes[parY] += sizes[parX];
                sizes[parX] = 1;
                max = Math.max(max, sizes[parY]);
            }
        }
    }
    public int largestComponentSize(int[] A) {
        Map<Integer, Integer> map = new HashMap<>();
        UF uf = new UF(A.length);
        for (int i = 0; i < A.length; i++) {
            int a = A[i];
            for (int j = 2; j * j <= a; j++) {
                if (a % j == 0) {
                    if (!map.containsKey(j)) {
                        map.put(j, i);
                    } else {
                        uf.union(i, map.get(j));
                    }
                    if (!map.containsKey(a/j)) {
                        map.put(a/j, i);
                    } else {
                        uf.union(i, map.get(a/j));
                    }
                }
            }
            if (!map.containsKey(a)) {
                map.put(a, i);
            } else {
                uf.union(i, map.get(a));
            }
        }
        return uf.max;
    }
}
