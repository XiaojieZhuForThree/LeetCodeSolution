```
You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].
```

class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[1] - o2[1];
            }
        });
        Map<Integer, Integer> map = new HashMap<>();
        int max = pairs[0][1];
        map.put(max, 1);
        for (int[] i : pairs) {
            int val;
             if (i[0] > max) {
                val = map.get(max);
                for (int j = max + 1; j <= i[1]; j++) {
                    map.put(j, val + 1);
                } 
             } else if (map.containsKey(i[0])) {
                val = map.containsKey(i[1]) ? Math.max(map.get(i[1]), map.get(i[0])) : map.get(i[0]);
                map.put(i[1], val);
            } else {
                val = map.containsKey(i[1]) ? Math.max(map.get(i[1]), 1) : 1;
                map.put(i[1], val);
            }
            if (map.get(i[1]) > map.get(max)) {
                max = i[1];
            }
        }
        return map.get(max);
    }
}



#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
	int findLongestChain(vector<vector<int>>& pairs) {
		sort(pairs.begin(), pairs.end(), [&pairs](auto& a, auto& b) {
			return a[1] < b[1];
			});
		int ans = 0, cur = -1001;
		for (auto& p : pairs) {
			if (p[0] > cur) {
				ans++;
				cur = p[1];
			}
		}
		return ans;
	}
};


class Solution {
    public int findLongestChain(int[][] pairs) {
        Arrays.sort(pairs, (a, b) -> a[1] - b[1]);
        int ans = 0, cur = -1001;
        for (int[] p : pairs) {
            if (p[0] > cur) {
                ans++;
                cur = p[1];
            }
        }
        return ans;
    }
}


