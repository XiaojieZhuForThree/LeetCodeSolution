```
You are given n pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair (c, d) can follow another pair (a, b) if and only if b < c. Chain of pairs can be formed in this fashion.

Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.

Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].
```

class Solution {
    public int findLongestChain(int[][] pairs) {
        int maxAns = 0;
        Arrays.sort(pairs, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2) {
                return o1[1] - o2[1];
            }
        });
        Map<Integer, Integer> map = new HashMap<>();
        for (int[] i : pairs) {
            int prev = 0;
            for (int j : map.keySet()){
                if (j < i[0]) {
                    prev = Math.max(prev, map.get(j));
                }
            }
            int ans = prev + 1;
            if (map.containsKey(i[1])) {
                ans = Math.max(ans, map.get(i[1]));
            }
            map.put(i[1], ans);
            maxAns = Math.max(maxAns, ans);
        }
        return maxAns;
    }
}
