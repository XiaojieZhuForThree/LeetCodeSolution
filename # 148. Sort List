package com.leetcode.problems;

import java.util.PriorityQueue;

import com.leetcode.api.ListNode;

public class Question148 {

	class Solution1 {
		public ListNode sortList(ListNode head) {
			if (head == null || head.next == null) {
				return head;
			}
			PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
			while (head != null) {
				pq.offer(head);
				head = head.next;
			}
			ListNode node = pq.poll();
			ListNode dummy = node;
			while (!pq.isEmpty()) {
				dummy.next = pq.poll();
				dummy = dummy.next;
			}
			dummy.next = null;
			return node;
		}
	}

	class Solution2 {
		public ListNode sortList(ListNode head) {
			if (head == null || head.next == null) {
				return head;
			}
			ListNode slow = head, fast = head.next;
			while (fast != null && fast.next != null) {
				slow = slow.next;
				fast = fast.next.next;
			}
			ListNode next = slow.next;
			slow.next = null;
			head = sortList(head);
			next = sortList(next);
			return merge(head, next);
		}

		private ListNode merge(ListNode node1, ListNode node2) {
			ListNode head = new ListNode(0), dummy = head;
			while (node1 != null && node2 != null) {
				if (node1.val < node2.val) {
					dummy.next = node1;
					node1 = node1.next;
					dummy = dummy.next;
				} else {
					dummy.next = node2;
					node2 = node2.next;
					dummy = dummy.next;
				}
			}
			if (node1 != null) {
				dummy.next = node1;
			}
			if (node2 != null) {
				dummy.next = node2;
			}
			return head.next;
		}
	}
}
