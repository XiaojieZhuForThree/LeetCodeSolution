package com.leetcode.problems;

import java.util.PriorityQueue;

import com.leetcode.api.ListNode;

public class Question148 {

	class Solution1 {
		public ListNode sortList(ListNode head) {
			if (head == null || head.next == null) {
				return head;
			}
			PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
			while (head != null) {
				pq.offer(head);
				head = head.next;
			}
			ListNode node = pq.poll();
			ListNode dummy = node;
			while (!pq.isEmpty()) {
				dummy.next = pq.poll();
				dummy = dummy.next;
			}
			dummy.next = null;
			return node;
		}
	}

	class Solution2 {
		public ListNode sortList(ListNode head) {
			if (head == null || head.next == null) {
				return head;
			}
			ListNode slow = head, fast = head.next;
			while (fast != null && fast.next != null) {
				slow = slow.next;
				fast = fast.next.next;
			}
			ListNode next = slow.next;
			slow.next = null;
			return merge(sortList(head), sortList(next));
		}

		private ListNode merge(ListNode node1, ListNode node2) {
			ListNode node = new ListNode(-1), head = node;
			while (node1 != null && node2 != null) {
				if (node1.val < node2.val) {
					node.next = node1;
					node1 = node1.next;
				} else {
					node.next = node2;
					node2 = node2.next;
				}
				node = node.next;
			}
			if (node1 != null) {
				node.next = node1;
			} else {
				node.next = node2;
			}
			return head.next;
		}
	}
}


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def sortList(self, head: Optional[ListNode]) -> Optional[ListNode]:
        if not head or not head.next:
            return head
        slow = head
        fast = head.next
        while fast and fast.next:
            slow = slow.next
            fast = fast.next.next
        half = slow.next
        slow.next = None
        node1 = self.sortList(head)
        node2 = self.sortList(half)
        return self.merge(node1, node2)
    
    def merge(self, node1, node2):
        head = ListNode(0)
        dummy = head
        while node1 and node2:
            if node1.val < node2.val:
                dummy.next = node1
                node1 = node1.next
            else:
                dummy.next = node2
                node2 = node2.next
            dummy = dummy.next
        if node1:
            dummy.next = node1
        else:
            dummy.next = node2
        return head.next
                
