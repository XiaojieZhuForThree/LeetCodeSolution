package com.leetcode.problems;

import java.util.Arrays;

public class Question300 {
	class Solution {
		public int lengthOfLIS(int[] nums) {
			if (nums == null || nums.length == 0)
				return 0;
			int[] dp = new int[nums.length];
			Arrays.fill(dp, 1);
			for (int i = 0; i < nums.length; i++) {
				for (int j = 0; j < i; j++) {
					if (nums[i] > nums[j])
						dp[i] = Math.max(dp[i], dp[j] + 1);
				}
			}
			int ans = 0;
			for (int i : dp)
				ans = Math.max(ans, i);
			return ans;
		}
	}
}


from typing import List


class Solution:
    def lengthOfLIS(self, nums: List[int]) -> int:
        ans = [1]
        for i in range(1, len(nums)):
            cur = 1
            for j in range(i):
                if nums[j] < nums[i]:
                    cur = max(cur, ans[j] + 1)
            ans.append(cur)
        return max(ans)


#include <vector>
using std::vector;

class Solution {
public:
	int lengthOfLIS(vector<int>& nums) {
		vector<int> dp(size(nums), 1);
		int ans = 1;
		for (int i = 1; i < size(nums); i++) {
			int cur = 1;
			for (int j = 0; j < i; j++) {
				if (nums[j] < nums[i]) cur = std::max(cur, 1 + dp[j]);
			}
			ans = std::max(ans, cur);
			dp[i] = cur;
		}
		return ans;
	}
};
