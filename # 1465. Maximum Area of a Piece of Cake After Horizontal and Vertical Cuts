package com.leetcode.problems;

import java.util.Arrays;

public class Question1465 {
	class Solution {
		public int maxArea(int h, int w, int[] horizontalCuts, int[] verticalCuts) {
			Arrays.sort(horizontalCuts);
			Arrays.sort(verticalCuts);

			int hLength = horizontalCuts.length;
			int vLength = verticalCuts.length;

			int maxHeight = Math.max(horizontalCuts[0] - 0, h - horizontalCuts[hLength - 1]);
			for (int i = 1; i < hLength; i++) {
				int diff = horizontalCuts[i] - horizontalCuts[i - 1];
				maxHeight = Math.max(maxHeight, diff);
			}

			int maxWidth = Math.max(verticalCuts[0] - 0, w - verticalCuts[vLength - 1]);
			for (int i = 1; i < vLength; i++) {
				int diff = verticalCuts[i] - verticalCuts[i - 1];
				maxWidth = Math.max(maxWidth, diff);
			}

			long ans = 1L * maxHeight * maxWidth;

			return (int) (ans % 1000000007);
		}

	}
}


from typing import List


class Solution:
    def maxArea(self, h: int, w: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:
        m_h = 0
        m_w = 0
        p_h = 0
        p_w = 0
        
        horizontalCuts.sort()
        verticalCuts.sort()
        
        for i in horizontalCuts:
            m_h = max(m_h, i - p_h)
            p_h = i
        m_h = max(m_h, h - p_h)
        
        for i in verticalCuts:
            m_w = max(m_w, i - p_w)
            p_w = i
        m_w = max(m_w, w - p_w)
        
        return (m_h * m_w) % 1_000_000_007
