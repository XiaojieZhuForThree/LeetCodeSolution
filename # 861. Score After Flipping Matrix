package problems;

public class Question861 {
	class Solution {
		public int matrixScore(int[][] A) {
			int m = A.length, n = A[0].length;
			for (int j = 0; j < n; j++) {
				int cnt = 0;
				for (int i = 0; i < m; i++) {
					if (A[i][j] == 0 && j == 0) {
						flipRow(A, i);
					} else if (A[i][j] == 0) {
						cnt++;
					}
				}
				if (cnt > m / 2) {
					flipColumn(A, j);
				}
			}
			int ans = 0;
			for (int[] row : A) {
				ans += parseInt(row);
			}
			return ans;
		}

		private void flipRow(int[][] A, int i) {
			for (int j = 0; j < A[0].length; j++) {
				A[i][j] = A[i][j] == 1 ? 0 : 1;
			}
		}

		private void flipColumn(int[][] A, int j) {
			for (int i = 0; i < A.length; i++) {
				A[i][j] = A[i][j] == 1 ? 0 : 1;
			}
		}

		private int parseInt(int[] row) {
			int val = 0;
			for (int i : row) {
				val = val * 2 + i;
			}
			return val;
		}
	}
}


#include <vector>

using std::vector;

class Solution {
public:
	int matrixScore(vector<vector<int>>& grid) {
		int m = size(grid), n = size(grid[0]);
		for (int i = 0; i < m; i++) {
			if (grid[i][0] == 1) continue;
			flipR(grid, i);
		}
		for (int j = 0; j < n; j++) {
			if (shouldFC(grid, j)) flipC(grid, j);
		}
		return getAns(grid);
	}
private:
	void flipR(vector<vector<int>>& grid, int i) {
		for (int j = 0; j < size(grid[0]); j++) grid[i][j] = 1 - grid[i][j];
	}
	bool shouldFC(vector<vector<int>>& grid, int j) {
		int o = 0, z = 0;
		for (int i = 0; i < size(grid); i++) {
			if (grid[i][j] == 0) z++;
			else o++;
		}
		return z > o;
	}
	void flipC(vector<vector<int>>& grid, int j) {
		for (int i = 0; i < size(grid); i++) grid[i][j] = 1 - grid[i][j];
	}
	int getAns(vector<vector<int>>& grid) {
		int ans = 0;
		for (int i = 0; i < size(grid); i++) {
			int cur = 0;
			for (int j : grid[i]) cur = cur * 2 + j;
			ans += cur;
		}
		return ans;
	}
};
