package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Question49 {
	class Solution {
		public List<List<String>> groupAnagrams(String[] strs) {
			List<List<String>> ans = new ArrayList<>();
			if (strs == null || strs.length == 0)
				return ans;
			Map<String, List<String>> map = new HashMap<>();
			for (String s : strs) {
				String key = sort(s);
				map.putIfAbsent(key, new ArrayList<>());
				map.get(key).add(s);
			}
			for (List<String> list : map.values())
				ans.add(list);
			return ans;
		}

		private String sort(final String s) {
			int[] arr = new int[26];
			char[] chars = new char[26];
			int index = 0;
			for (char c = 'a'; c <= 'z'; c++) {
				chars[index++] = c;
			}
			for (char c : s.toCharArray())
				arr[c - 'a']++;
			StringBuilder sb = new StringBuilder();
			for (int i = 0; i < 26; i++) {
				for (int j = 0; j < arr[i]; j++) {
					sb.append(chars[i]);
				}
			}
			return sb.toString();
		}
	}
}


#include <string>
#include <vector>
#include <unordered_map>
#include <algorithm>

using namespace std;

class Solution {
public:
	vector<vector<string>> groupAnagrams(vector<string>& strs) {
		unordered_map<string, vector<string>> map;
		for (string s : strs) {
			string key = s;
			sort(key.begin(), key.end());
			map[key].push_back(s);
		}
		vector<vector<string>> ans;
		for (auto& entry : map) ans.push_back(entry.second);
		return ans;
	}
};


#include <string>
#include <vector>
#include <unordered_map>
#include <algorithm>
using std::vector;
using std::string;

class Solution {
public:
	vector<vector<string>> groupAnagrams(vector<string>& strs) {
		std::unordered_map<string, vector<string>> m;
		vector<vector<string>> ans;
		for (auto& s : strs) {
			string k = s;
			std::sort(k.begin(), k.end());
			m[k].push_back(s);
		}
		for (auto& p : m) ans.push_back(p.second);
		return ans;
	}
};
