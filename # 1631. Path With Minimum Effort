package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Arrays;
import java.util.Queue;

public class Question1631 {
	class Solution {
		class Coordinate {
			int x;
			int y;

			public Coordinate(int x, int y) {
				this.x = x;
				this.y = y;
			}
		}

		public int minimumEffortPath(int[][] heights) {
			int m = heights.length, n = heights[0].length;
			int[][] dp = new int[m][n];
			for (int[] row : dp) {
				Arrays.fill(row, Integer.MAX_VALUE);
			}
			dp[0][0] = 0;
			int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
			Queue<Coordinate> queue = new ArrayDeque<>();
			queue.offer(new Coordinate(0, 0));
			while (!queue.isEmpty()) {
				Coordinate coord = queue.poll();
				int x = coord.x;
				int y = coord.y;
				for (int[] dir : dirs) {
					int nx = x + dir[0];
					int ny = y + dir[1];
					if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
						continue;
					}
					int val = Math.max(dp[x][y], Math.abs(heights[nx][ny] - heights[x][y]));
					if (dp[nx][ny] > val) {
						dp[nx][ny] = val;
						queue.offer(new Coordinate(nx, ny));
					}
				}
			}
			return dp[m - 1][n - 1];
		}
	}
}
