package com.leetcode.problems;

import java.util.Arrays;
import java.util.PriorityQueue;

public class Question1631 {
	class Point {
		int x;
		int y;

		public Point(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}

	class Solution {
		public int minimumEffortPath(int[][] heights) {
			int m = heights.length, n = heights[0].length;
			int[][] dp = new int[m][n];
			int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };
			for (int[] i : dp) {
				Arrays.fill(i, Integer.MAX_VALUE);
			}
			dp[0][0] = 0;
			PriorityQueue<Point> pq = new PriorityQueue<>((a, b) -> dp[a.x][a.y] - dp[b.x][b.y]);
			pq.offer(new Point(0, 0));
			while (!pq.isEmpty()) {
				Point p = pq.poll();
				if (p.x == m - 1 && p.y == n - 1) {
					continue;
				}
				for (int[] dir : dirs) {
					int nx = p.x + dir[0], ny = p.y + dir[1];
					if (nx < 0 || nx >= m || ny < 0 || ny >= n) {
						continue;
					}
					int diff = Math.abs(heights[p.x][p.y] - heights[nx][ny]);
					int val = Math.max(diff, dp[p.x][p.y]);
					if (val < dp[nx][ny]) {
						dp[nx][ny] = val;
						pq.offer(new Point(nx, ny));
					}
				}
			}
			return dp[m - 1][n - 1];
		}
	}
}
