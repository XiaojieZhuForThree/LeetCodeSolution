package problems;

public class Question1372 {
	class TreeNode {
		int val;
		TreeNode left;
		TreeNode right;

		TreeNode() {
		}

		TreeNode(int val) {
			this.val = val;
		}

		TreeNode(int val, TreeNode left, TreeNode right) {
			this.val = val;
			this.left = left;
			this.right = right;
		}
	}

	/**
	 * Definition for a binary tree node. public class TreeNode { int val; TreeNode
	 * left; TreeNode right; TreeNode() {} TreeNode(int val) { this.val = val; }
	 * TreeNode(int val, TreeNode left, TreeNode right) { this.val = val; this.left
	 * = left; this.right = right; } }
	 */
	class Solution {
		int ans = 0;

		public int longestZigZag(TreeNode root) {
			helper(root, 0);
			helper(root, 1);
			return ans - 1;
		}

		private int helper(TreeNode node, int dir) {
			if (node == null) {
				return 0;
			}
			if (dir == 0) {
				int val1 = 1 + helper(node.left, 1);
				int val2 = helper(node.left, 0);
				int val = Math.max(val1, val2);
				ans = Math.max(val, ans);
				return val1;
			} else {
				int val1 = 1 + helper(node.right, 0);
				int val2 = helper(node.right, 1);
				int val = Math.max(val1, val2);
				ans = Math.max(val, ans);
				return val1;
			}
		}
	}
}


#include "TreeNode.h"
#include <utility>
using namespace std;

class Solution {
public:
	int ans = 0;
	int longestZigZag(TreeNode* root) {
		dfs(root);
		return ans;
	}
private:
	pair<int, int> dfs(TreeNode* node) {
		if (!node) return { 0, 0 };
		int l = 0, r = 0;
		if (node->left) l = 1 + dfs(node->left).second;
		if (node->right) r = 1 + dfs(node->right).first;
		ans = max(ans, max(l, r));
		return { l, r };
	}
};
