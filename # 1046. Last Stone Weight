import java.util.*;

public class Question1046 {
	class Solution {
		public int lastStoneWeight(int[] stones) {
			PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
			for (int i : stones) {
				pq.offer(i);
			}
			while (pq.size() > 1) {
				int w1 = pq.poll(), w2 = pq.poll();
				pq.offer(Math.abs(w1 - w2));
			}
			return pq.poll();
		}
	}
}


class Solution:
    def lastStoneWeight(self, stones: List[int]) -> int:
        neg = [-i for i in stones]
        heapq.heapify(neg)
        while len(neg) > 1:
            a = heapq.heappop(neg)
            b = heapq.heappop(neg)
            val = a - b
            if val < 0:
                heapq.heappush(neg, val)
        if neg:
            return -neg[0]
        return 0
