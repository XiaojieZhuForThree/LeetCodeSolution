package problems;

import java.util.*;

public class Question1203 {
	class Solution {
		public int[] sortItems(int n, int m, int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> groups = getGroups(group, m);
			Map<Integer, Set<Integer>> groupGraph = getGroupGraph(group, beforeItems);
			List<Integer> topoGroups = topoSort(groupGraph, groups.keySet());
			List<Integer> res = new ArrayList<>();
			for (int i : topoGroups) {
				Map<Integer, Set<Integer>> itemGraph = getItemGraph(groups.get(i), beforeItems);
				List<Integer> topoItems = topoSort(itemGraph, groups.get(i));
				res.addAll(topoItems);
			}
			if (res.size() != n) {
				return new int[] {};
			}
			int[] ans = new int[n];
			for (int i = 0; i < n; i++) {
				ans[i] = res.get(i);
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getItemGraph(Set<Integer> items, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> map = new HashMap<>();
			for (int i : items) {
				List<Integer> prevs = beforeItems.get(i);
				for (int prev : prevs) {
					if (items.contains(prev)) {
						map.putIfAbsent(prev, new HashSet<>());
						map.get(prev).add(i);
					}
				}
			}
			return map;
		}

		private List<Integer> topoSort(Map<Integer, Set<Integer>> graph, Set<Integer> nodes) {
			List<Integer> list = new ArrayList<>();
			Map<Integer, Integer> indegrees = new HashMap<>();
			for (int i : nodes) {
				indegrees.put(i, 0);
			}
			for (int i : graph.keySet()) {
				for (int j : graph.get(i)) {
					indegrees.put(j, indegrees.get(j) + 1);
				}
			}
			Deque<Integer> deque = new ArrayDeque<>();
			for (int i : indegrees.keySet()) {
				if (indegrees.get(i) == 0) {
					deque.offer(i);
				}
			}
			while (!deque.isEmpty()) {
				int key = deque.poll();
				list.add(key);
				if (graph.containsKey(key)) {
					for (int j : graph.get(key)) {
						indegrees.put(j, indegrees.get(j) - 1);
						if (indegrees.get(j) == 0) {
							deque.offer(j);
						}
					}
				}
			}
			return list;
		}

		private Map<Integer, Set<Integer>> getGroups(int[] group, int m) {
			Map<Integer, Set<Integer>> map = new HashMap<>();
			for (int i = 0; i < group.length; i++) {
				int gp = group[i] == -1 ? m++ : group[i];
				map.putIfAbsent(gp, new HashSet<>());
				map.get(gp).add(i);
				group[i] = gp;
			}
			return map;
		}

		private Map<Integer, Set<Integer>> getGroupGraph(int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> map = new HashMap<>();
			for (int i = 0; i < group.length; i++) {
				List<Integer> prevs = beforeItems.get(i);
				for (int prev : prevs) {
					if (group[prev] == group[i]) {
						continue;
					}
					map.putIfAbsent(group[prev], new HashSet<>());
					map.get(group[prev]).add(group[i]);
				}
			}
			return map;
		}
	}
}
