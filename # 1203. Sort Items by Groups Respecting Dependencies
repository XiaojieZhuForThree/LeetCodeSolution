package problems;

import java.util.*;

public class Question1203 {
	class Solution {
		public int[] sortItems(int n, int m, int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> Group_Members = getGroupMember(group, m);
			Map<Integer, Set<Integer>> Group_Graph = getGroupGraph(group, beforeItems);
			List<Integer> topoGroup = topoSort(Group_Graph, Group_Members.keySet());
			List<Integer> res = new ArrayList<>();
			for (int gp : topoGroup) {
				Map<Integer, Set<Integer>> Item_Graph = getItemGraph(Group_Members.get(gp), beforeItems);
				res.addAll(topoSort(Item_Graph, Group_Members.get(gp)));
			}
			if (res.size() != n) {
				return new int[] {};
			}
			int[] ans = new int[n];
			for (int i = 0; i < n; i++) {
				ans[i] = res.get(i);
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getItemGraph(Set<Integer> groupItems, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int item : groupItems) {
				for (int beforeItem : beforeItems.get(item)) {
					if (groupItems.contains(beforeItem)) {
						ans.putIfAbsent(beforeItem, new HashSet<>());
						ans.get(beforeItem).add(item);
					}
				}
			}
			return ans;
		}

		private List<Integer> topoSort(Map<Integer, Set<Integer>> graph, Set<Integer> members) {
			List<Integer> ans = new ArrayList<>();
			Map<Integer, Integer> indegree = new HashMap<>();
			for (int i : members) {
				indegree.put(i, 0);
			}
			for (int j : graph.keySet()) {
				for (int k : graph.get(j)) {
					indegree.put(k, indegree.get(k) + 1);
				}
			}
			Deque<Integer> deque = new ArrayDeque<>();
			for (int m : indegree.keySet()) {
				if (indegree.get(m) == 0) {
					deque.offer(m);
				}
			}
			while (!deque.isEmpty()) {
				int n = deque.poll();
				ans.add(n);
				if (graph.containsKey(n)) {
					for (int l : graph.get(n)) {
						indegree.put(l, indegree.get(l) - 1);
						if (indegree.get(l) == 0) {
							deque.offer(l);
						}
					}
				}
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getGroupMember(int[] group, int m) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i = 0; i < group.length; i++) {
				int gp = group[i] == -1 ? m++ : group[i];
				ans.putIfAbsent(gp, new HashSet<>());
				ans.get(gp).add(i);
				group[i] = gp;
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getGroupGraph(int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i = 0; i < beforeItems.size(); i++) {
				int gp = group[i];
				for (int j : beforeItems.get(i)) {
					int beforeGp = group[j];
					if (gp == beforeGp) {
						continue;
					}
					ans.putIfAbsent(beforeGp, new HashSet<>());
					ans.get(beforeGp).add(gp);
				}
			}
			return ans;
		}
	}
}
