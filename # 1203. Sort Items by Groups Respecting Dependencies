import java.util.*;

public class Question1203 {
	class Solution {
		public int[] sortItems(int n, int m, int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> groupMembers = getGroupMembers(m, group);
			Map<Integer, Set<Integer>> groupGraph = getGroupGraph(group, beforeItems);
			List<Integer> topoGroup = topoSort(groupGraph, groupMembers.keySet());
			List<Integer> elems = new ArrayList<>();
			for (int gp : topoGroup) {
				Map<Integer, Set<Integer>> elemGraph = getElemGraph(groupMembers.get(gp), beforeItems);
				List<Integer> topoElem = topoSort(elemGraph, groupMembers.get(gp));
				elems.addAll(topoElem);
			}
			if (elems.size() != n) {
				return new int[] {};
			}
			int[] ans = new int[n];
			for (int i = 0; i < n; i++) {
				ans[i] = elems.get(i);
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getElemGraph(Set<Integer> eles, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i : eles) {
				for (int j : beforeItems.get(i)) {
					if (eles.contains(j)) {
						ans.putIfAbsent(j, new HashSet<>());
						ans.get(j).add(i);
					}
				}
			}
			return ans;
		}

		private List<Integer> topoSort(Map<Integer, Set<Integer>> graph, Set<Integer> elements) {
			List<Integer> ans = new ArrayList<>();
			Map<Integer, Integer> indegree = new HashMap<>();
			for (int ele : elements) {
				indegree.put(ele, 0);
			}
			for (int i : graph.keySet()) {
				for (int j : graph.get(i)) {
					indegree.put(j, indegree.get(j) + 1);
				}
			}
			Stack<Integer> stack = new Stack<>();
			for (int i : indegree.keySet()) {
				if (indegree.get(i) == 0) {
					stack.push(i);
				}
			}
			while (!stack.isEmpty()) {
				int node = stack.pop();
				ans.add(node);
				if (!graph.containsKey(node)) {
					continue;
				}
				for (int i : graph.get(node)) {
					indegree.put(i, indegree.get(i) - 1);
					if (indegree.get(i) == 0) {
						stack.push(i);
					}
				}
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getGroupGraph(int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i = 0; i < group.length; i++) {
				int curGroup = group[i];
				for (int j : beforeItems.get(i)) {
					int preGroup = group[j];
					if (curGroup == preGroup) {
						continue;
					}
					ans.putIfAbsent(preGroup, new HashSet<Integer>());
					ans.get(preGroup).add(curGroup);
				}
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getGroupMembers(int m, int[] group) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i = 0; i < group.length; i++) {
				int gp = group[i] == -1 ? m++ : group[i];
				group[i] = gp;
				ans.putIfAbsent(gp, new HashSet<Integer>());
				ans.get(gp).add(i);
			}
			return ans;
		}
	}
}
