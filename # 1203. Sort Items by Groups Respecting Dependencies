package problems;

import java.util.*;

public class Question1203 {
	class Solution {
		public int[] sortItems(int n, int m, int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> Group_Members = getGroupMember(group, m);
			Map<Integer, Set<Integer>> Group_Graph = getGroupGraph(group, beforeItems);
			List<Integer> topoGroup = topoSort(Group_Graph, Group_Members.keySet());
			List<Integer> res = new ArrayList<>();
			for (int gp : topoGroup) {
				Map<Integer, Set<Integer>> Item_Graph = getItemGraph(Group_Members.get(gp), beforeItems);
				res.addAll(topoSort(Item_Graph, Group_Members.get(gp)));
			}
			if (res.size() != n) {
				return new int[] {};
			}
			int[] ans = new int[n];
			for (int i = 0; i < n; i++) {
				ans[i] = res.get(i);
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getItemGraph(Set<Integer> groupItems, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int item : groupItems) {
				for (int beforeItem : beforeItems.get(item)) {
					if (groupItems.contains(beforeItem)) {
						ans.putIfAbsent(beforeItem, new HashSet<>());
						ans.get(beforeItem).add(item);
					}
				}
			}
			return ans;
		}

		private List<Integer> topoSort(Map<Integer, Set<Integer>> graph, Set<Integer> members) {
			List<Integer> ans = new ArrayList<>();
			Map<Integer, Integer> indegree = new HashMap<>();
			for (int i : members) {
				indegree.put(i, 0);
			}
			for (int j : graph.keySet()) {
				for (int k : graph.get(j)) {
					indegree.put(k, indegree.get(k) + 1);
				}
			}
			Deque<Integer> deque = new ArrayDeque<>();
			for (int m : indegree.keySet()) {
				if (indegree.get(m) == 0) {
					deque.offer(m);
				}
			}
			while (!deque.isEmpty()) {
				int n = deque.poll();
				ans.add(n);
				if (graph.containsKey(n)) {
					for (int l : graph.get(n)) {
						indegree.put(l, indegree.get(l) - 1);
						if (indegree.get(l) == 0) {
							deque.offer(l);
						}
					}
				}
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getGroupMember(int[] group, int m) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i = 0; i < group.length; i++) {
				int gp = group[i] == -1 ? m++ : group[i];
				ans.putIfAbsent(gp, new HashSet<>());
				ans.get(gp).add(i);
				group[i] = gp;
			}
			return ans;
		}

		private Map<Integer, Set<Integer>> getGroupGraph(int[] group, List<List<Integer>> beforeItems) {
			Map<Integer, Set<Integer>> ans = new HashMap<>();
			for (int i = 0; i < beforeItems.size(); i++) {
				int gp = group[i];
				for (int j : beforeItems.get(i)) {
					int beforeGp = group[j];
					if (gp == beforeGp) {
						continue;
					}
					ans.putIfAbsent(beforeGp, new HashSet<>());
					ans.get(beforeGp).add(gp);
				}
			}
			return ans;
		}
	}
}


#include <vector>
#include <unordered_map>
#include <deque>
using std::vector;

class Solution {
public:
    vector<int> sortItems(int n, int m, vector<int>& group, vector<vector<int>>& beforeItems) {
        std::unordered_map<int, int> group_ind, item_ind, gbi;
        std::unordered_map<int, vector<int>> ibg, group_deps, item_deps;
        int more = m;
        for (int i = 0; i < n; i++) {
            if (group[i] == -1) {
                gbi[i] = more;
                if (!ibg.count(more)) {
                    vector<int> c;
                    ibg[more] = c;
                }
                ibg[more].push_back(i);
                more++;
            }
            else {
                gbi[i] = group[i];
                if (!ibg.count(group[i])) {
                    vector<int> c;
                    ibg[group[i]] = c;
                }
                ibg[group[i]].push_back(i);
            }
        }
        for (int i = 0; i < n; i++) item_ind[i] = 0;
        for (int j = 0; j < more; j++) group_ind[j] = 0;
        for (int i = 0; i < n; i++) {
            if (beforeItems[i].empty()) continue;
            for (int j : beforeItems[i]) {
                if (gbi[i] == gbi[j]) {
                    item_ind[i]++;
                    if (!item_deps.count(j)) {
                        vector<int> c;
                        item_deps[j] = c;
                    }
                    item_deps[j].push_back(i);
                }
                else {
                    group_ind[gbi[i]]++;
                    if (!group_deps.count(gbi[j])) {
                        vector<int> c;
                        group_deps[gbi[j]] = c;
                    }
                    group_deps[gbi[j]].push_back(gbi[i]);
                }
            }
        }
        std::deque<int> gp, it;
        vector<int> ans;
        int cnt = 0;
        for (auto p : group_ind) {
            if (p.second == 0) gp.push_back(p.first);
        }
        while (cnt < n) {
            if (gp.empty()) return {};
            int cur_g = gp.front();
            gp.pop_front();
            vector<int> is = ibg[cur_g];
            int s = 0;
            for (int i : is) {
                if (item_ind[i] == 0) {
                    it.push_back(i);
                }
            }
            while (s < size(is)) {
                if (it.empty()) return {};
                int cur_i = it.front();
                it.pop_front();
                ans.push_back(cur_i);
                for (int cand_i : item_deps[cur_i]) {
                    item_ind[cand_i]--;
                    if (item_ind[cand_i] == 0) it.push_back(cand_i);
                }
                s++;
                cnt++;
            }
            for (int cand_g : group_deps[cur_g]) {
                group_ind[cand_g]--;
                if (group_ind[cand_g] == 0) gp.push_back(cand_g);
            }
        }
        return ans;
    }
};
