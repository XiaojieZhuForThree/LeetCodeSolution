package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question916 {
	class Solution {
		public List<String> wordSubsets(String[] A, String[] B) {
			int[] chars = new int[26];
			for (String s : B) {
				int[] sChars = new int[26];
				for (char c : s.toCharArray()) {
					sChars[c - 'a']++;
				}
				for (int i = 0; i < 26; i++) {
					chars[i] = Math.max(chars[i], sChars[i]);
				}
			}
			List<String> ans = new ArrayList<>();
			for (String a : A) {
				int[] aChars = new int[26];
				for (char c : a.toCharArray()) {
					aChars[c - 'a']++;
				}
				boolean canCover = true;
				for (int i = 0; i < 26; i++) {
					if (aChars[i] < chars[i]) {
						canCover = false;
						break;
					}
				}
				if (canCover) {
					ans.add(a);
				}
			}
			return ans;
		}
	}
}


from collections import Counter
from typing import List


class Solution:
    def wordSubsets(self, words1: List[str], words2: List[str]) -> List[str]:
        _records = {}
        for w in words2:
            for ch, num in Counter(w).items():
                if ch not in _records:
                    _records[ch] = num
                else:
                    _records[ch] = max(_records[ch], num)
        ans = []
        for w in words1:
            isCand = True
            for ch in _records:
                if _records[ch] > w.count(ch):
                    isCand = False
                    break
            if isCand:
                ans.append(w)
        return ans
