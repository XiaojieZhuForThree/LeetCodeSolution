package com.leetcode.problems;

public class Question875 {
	class Solution {
		public int minEatingSpeed(int[] piles, int h) {
			int min = 1, max = Integer.MIN_VALUE;
			for (int i : piles) {
				max = Math.max(max, i);
			}
			while (min < max) {
				int mid = min + (max - min) / 2;
				if (canCover(mid, piles, h))
					max = mid;
				else
					min = mid + 1;
			}
			return min;
		}

		private boolean canCover(int val, int[] piles, int h) {
			int ans = 0;
			for (int i : piles) {
				ans += i / val;
				if (i % val > 0)
					ans++;
			}
			return ans <= h;
		}
	}
}
