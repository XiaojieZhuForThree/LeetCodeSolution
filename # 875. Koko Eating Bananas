package com.leetcode.problems;

public class Question875 {
	class Solution {
		public int minEatingSpeed(int[] piles, int H) {
			long totalBananas = sum(piles);
			int minimumSpeed = getMinimumSpeed(totalBananas, H);
			int neededHour = getNeededHour(piles, minimumSpeed);
			while (neededHour > H) {
				neededHour = getNeededHour(piles, ++minimumSpeed);
			}
			return minimumSpeed;
		}

		private final int getMinimumSpeed(long totalBananas, int H) {
			int minimumSpeed = (int) (totalBananas / H);
			if (minimumSpeed * H < totalBananas) {
				minimumSpeed++;
			}
			return minimumSpeed;
		}

		private final long sum(int[] piles) {
			long ans = 0;
			for (int i : piles) {
				ans += i;
			}
			return ans;
		}

		private final int getNeededHour(int[] piles, int minimumSpeed) {
			int neededHour = 0;
			for (int pile : piles) {
				int hour = pile / minimumSpeed;
				if (hour * minimumSpeed < pile) {
					hour++;
				}
				neededHour += hour;
			}
			return neededHour;
		}
	}
}
