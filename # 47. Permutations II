package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question47 {
	class Solution {
		List<List<Integer>> ans = new ArrayList<>();

		public List<List<Integer>> permuteUnique(int[] nums) {
			Set<String> set = new HashSet<>();
			dfs(nums, set, new ArrayList<>(), new HashSet<>());
			return ans;
		}

		private void dfs(int[] nums, Set<String> set, List<Integer> perm, Set<Integer> alreadyIn) {
			if (alreadyIn.size() == nums.length) {
				if (!set.contains(perm.toString())) {
					ans.add(new ArrayList<>(perm));
					set.add(perm.toString());
				}
				return;
			} else {
				for (int i = 0; i < nums.length; i++) {
					if (!alreadyIn.contains(i)) {
						perm.add(nums[i]);
						alreadyIn.add(i);
						dfs(nums, set, perm, alreadyIn);
						alreadyIn.remove(i);
						perm.remove(perm.size() - 1);
					}
				}
				return;
			}
		}
	}
}
