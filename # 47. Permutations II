package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question47 {
	class Solution {
		public List<List<Integer>> permuteUnique(int[] nums) {
			Set<List<Integer>> ans = new HashSet<>();
			dfs(nums, ans, new ArrayList<>(), new HashSet<>());
			return new ArrayList<>(ans);
		}

		private void dfs(int[] nums, Set<List<Integer>> ans, List<Integer> curList, Set<Integer> seen) {
			if (seen.size() == nums.length) {
				ans.add(new ArrayList<>(curList));
				return;
			}
			for (int i = 0; i < nums.length; i++) {
				if (seen.contains(i)) {
					continue;
				}
				seen.add(i);
				curList.add(nums[i]);
				dfs(nums, ans, curList, seen);
				seen.remove(i);
				curList.remove(curList.size() - 1);
			}
			return;
		}
	}
}
