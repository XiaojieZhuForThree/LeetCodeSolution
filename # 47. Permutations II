package com.leetcode.problems;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Question47 {
	class Solution {
		public List<List<Integer>> permuteUnique(int[] nums) {
			Set<List<Integer>> ans = new HashSet<>();
			dfs(nums, ans, new ArrayList<>(), new HashSet<>());
			return new ArrayList<>(ans);
		}

		private void dfs(int[] nums, Set<List<Integer>> ans, List<Integer> curList, Set<Integer> seen) {
			if (seen.size() == nums.length) {
				ans.add(new ArrayList<>(curList));
				return;
			}
			for (int i = 0; i < nums.length; i++) {
				if (seen.contains(i)) {
					continue;
				}
				seen.add(i);
				curList.add(nums[i]);
				dfs(nums, ans, curList, seen);
				seen.remove(i);
				curList.remove(curList.size() - 1);
			}
			return;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Wed May 11 19:31:23 2022

@author: xiaoj
"""

from typing import List

class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        ans = []
        self.dfs(ans, nums, [], set(), set())
        return ans
    
    def dfs(self, ans, nums, cur, used, seen):
        if len(cur) == len(nums):
            if str(cur) not in seen:
                seen.add(str(cur))
                ans.append(cur.copy())
            return
        else:
            for i in range(len(nums)):
                if i not in used:
                    used.add(i)
                    cur.append(nums[i])
                    self.dfs(ans, nums, cur, used, seen)
                    used.remove(i)
                    cur.pop()
        return
        
