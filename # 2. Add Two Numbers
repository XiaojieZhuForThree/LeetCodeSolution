package com.leetcode.problems;

import com.leetcode.api.ListNode;

public class Question2 {
	class Solution {
		public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
			int carry = 0;
			ListNode ans = new ListNode(0), pointer = ans;
			while (l1 != null && l2 != null) {
				int val = (l1.val + l2.val + carry) % 10;
				carry = (l1.val + l2.val + carry) / 10;
				pointer.next = new ListNode(val);
				l1 = l1.next;
				l2 = l2.next;
				pointer = pointer.next;
			}
			while (l1 != null) {
				int val = (l1.val + carry) % 10;
				carry = (l1.val + carry) / 10;
				pointer.next = new ListNode(val);
				l1 = l1.next;
				pointer = pointer.next;
			}
			while (l2 != null) {
				int val = (l2.val + carry) % 10;
				carry = (l2.val + carry) / 10;
				pointer.next = new ListNode(val);
				l2 = l2.next;
				pointer = pointer.next;
			}
			if (carry != 0) {
				pointer.next = new ListNode(carry);
			}
			return ans.next;
		}
	}
}


class Solution:
    def addTwoNumbers(self, l1: Optional[ListNode], l2: Optional[ListNode]) -> Optional[ListNode]:
        car = 0
        head = ListNode(-1)
        dummy = head
        while l1 or l2 or car:
            val = 0
            if l1:
                val += l1.val
                l1 = l1.next
            if l2:
                val += l2.val
                l2 = l2.next
            if car:
                val += car
            car, val = divmod(val, 10)
            dummy.next = ListNode(val)
            dummy = dummy.next
        return head.next
