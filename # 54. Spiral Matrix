package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question54 {
	class Solution {
		public List<Integer> spiralOrder(int[][] matrix) {
			if (matrix == null || matrix.length == 0 || matrix[0].length == 0)
				return List.of();
			int m = matrix.length, n = matrix[0].length;
			int l = 0, r = n - 1, u = 0, d = m - 1;
			List<Integer> ans = new ArrayList<>();
			while (l <= r && u <= d) {
				for (int i = l; i <= r; i++)
					ans.add(matrix[u][i]);
				for (int i = u + 1; i <= d; i++)
					ans.add(matrix[i][r]);
				if (d > u) {
					for (int i = r - 1; i >= l; i--)
						ans.add(matrix[d][i]);
				}
				if (l < r) {
					for (int i = d - 1; i > u; i--)
						ans.add(matrix[i][l]);
				}
				l++;
				r--;
				u++;
				d--;
			}
			return ans;
		}
	}
}


#include <vector>
using namespace std;

class Solution {
public:
	vector<int> spiralOrder(vector<vector<int>>& matrix) {
		vector<int> ans;
		int m = size(matrix), n = size(matrix[0]);
		helper(matrix, ans, 0, m - 1, 0, n - 1);
		return ans;
	}
private:
	void helper(vector<vector<int>>& matrix, vector<int>& ans, int u, int d, int l, int r) {
		if (u > d || l > r) return;
		for (int i = l; i <= r; i++) ans.push_back(matrix[u][i]);
		for (int i = u + 1; i <= d; i++) ans.push_back(matrix[i][r]);
		if (d > u) {
			for (int i = r - 1; i >= l; i--) ans.push_back(matrix[d][i]);
		}
		if (r > l) {
			for (int i = d - 1; i > u; i--) ans.push_back(matrix[i][l]);
		}
		helper(matrix, ans, u + 1, d - 1, l + 1, r - 1);
	}
};
