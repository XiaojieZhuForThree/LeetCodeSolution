package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question54 {
	class Solution {
		public List<Integer> spiralOrder(int[][] matrix) {
			int m = matrix.length, n = matrix[0].length;
			List<Integer> ans = new ArrayList<>();
			traverse(matrix, 0, 0, m - 1, n - 1, ans);
			return ans;
		}

		private void traverse(int[][] matrix, int lx, int ly, int rx, int ry, List<Integer> ans) {
			if (lx > rx || ly > ry) {
				return;
			}
			if (lx == rx) {
				for (int i = ly; i <= ry; i++) {
					ans.add(matrix[lx][i]);
				}
				return;
			} else if (ly == ry) {
				for (int i = lx; i <= rx; i++) {
					ans.add(matrix[i][ly]);
				}
				return;
			}
			for (int i = ly; i <= ry; i++) {
				ans.add(matrix[lx][i]);
			}
			for (int i = lx + 1; i <= rx; i++) {
				ans.add(matrix[i][ry]);
			}
			for (int i = ry - 1; i >= ly; i--) {
				ans.add(matrix[rx][i]);
			}
			for (int i = rx - 1; i > lx; i--) {
				ans.add(matrix[i][ly]);
			}
			traverse(matrix, lx + 1, ly + 1, rx - 1, ry - 1, ans);
		}
	}
}
