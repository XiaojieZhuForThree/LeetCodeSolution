package problems;

import java.util.HashMap;
import java.util.Map;

public class Question959 {
	class Solution1 {
		int[][] dirs = new int[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } };

		public int regionsBySlashes(String[] grid) {
			int n = grid.length, ans = 0;
			int[][] g = new int[n * 3][n * 3];
			for (int i = 0; i < n; i++) {
				for (int j = 0; j < n; j++) {
					if (grid[i].charAt(j) == '/') {
						g[i * 3][j * 3 + 2] = 1;
						g[i * 3 + 1][j * 3 + 1] = 1;
						g[i * 3 + 2][j * 3] = 1;
					} else if (grid[i].charAt(j) == '\\') {
						g[i * 3][j * 3] = 1;
						g[i * 3 + 1][j * 3 + 1] = 1;
						g[i * 3 + 2][j * 3 + 2] = 1;
					}
				}
			}
			for (int i = 0; i < n * 3; i++) {
				for (int j = 0; j < n * 3; j++) {
					if (g[i][j] == 0) {
						ans++;
						dfs(g, i, j);
					}
				}
			}
			return ans;
		}

		private void dfs(int[][] g, int i, int j) {
			if (i < 0 || i >= g.length || j < 0 || j >= g.length || g[i][j] == 1) {
				return;
			}
			g[i][j] = 1;
			for (int[] dir : dirs) {
				int ni = i + dir[0], nj = j + dir[1];
				dfs(g, ni, nj);
			}
		}
	}

	class Solution2 {
		public int regionsBySlashes(String[] grid) {
			int n = grid.length;
			UF uf = new UF(n);
			for (int i = 0; i < n; i++) {
				String s = grid[i];
				int e1 = 0, e2 = 0;
				for (int j = 0; j < n; j++) {
					char c = s.charAt(j);
					if (c == ' ') {
						continue;
					}
					if (c == '\\') {
						e1 = i * n + j;
						e2 = (i + 1) * n + j + 1;

					} else if (c == '/') {
						e1 = i * n + j + 1;
						e2 = (i + 1) * n + j;
					}
					uf.union(e1, e2);
				}
			}
			return uf.ans;
		}

		class UF {
			Map<Integer, Integer> map;
			int ans;

			public UF(int n) {
				ans = 1;
				map = new HashMap<>();
				for (int i = 0; i <= n; i++) {
					for (int j = 0; j <= n; j++) {
						if (i == 0 || i == n || j == 0 || j == n) {
							map.put(i * n + j, 0);
						}
					}
				}
			}

			public int find(int i) {
				if (!map.containsKey(i)) {
					map.put(i, i);
					return i;
				}
				if (map.get(i) != i) {
					map.put(i, find(map.get(i)));
				}
				return map.get(i);
			}

			public void union(int i, int j) {
				int pi = find(i), pj = find(j);
				if (pi == pj) {
					ans++;
				}
				map.put(pi, pj);
			}
		}
	}
}
