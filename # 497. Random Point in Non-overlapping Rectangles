package com.leetcode.problems;

import java.util.Random;
import java.util.TreeMap;
import java.util.concurrent.ThreadLocalRandom;

public class Question497 {
	class Solution {
		TreeMap<Integer, Integer> areaToIndex;
		Random rand;
		int[][] rects;
		int sum;

		public Solution(int[][] rects) {
			areaToIndex = new TreeMap<>();
			rand = ThreadLocalRandom.current();
			this.rects = rects;
			for (int i = 0; i < rects.length; i++) {
				int[] rect = rects[i];
				updateMap(rect, i);
			}
		}

		private final void updateMap(int[] rect, int i) {
			int leftX = rect[0], leftY = rect[1], rightX = rect[2], rightY = rect[3];
			int area = (rightX - leftX + 1) * (rightY - leftY + 1);
			sum += area;
			areaToIndex.put(sum, i);
		}

		public int[] pick() {
			int pickedArea = rand.nextInt(sum) + 1;
			int index = areaToIndex.get(areaToIndex.ceilingKey(pickedArea));
			int[] rec = rects[index];
			return getRandomPoint(rec);
		}

		private final int[] getRandomPoint(int[] rec) {
			int xRange = rec[2] - rec[0] + 1;
			int yRange = rec[3] - rec[1] + 1;
			int addXValue = rand.nextInt(xRange);
			int addYValue = rand.nextInt(yRange);
			return new int[] { rec[0] + addXValue, rec[1] + addYValue };
		}
	}

	/**
	 * Your Solution object will be instantiated and called as such: Solution obj =
	 * new Solution(rects); int[] param_1 = obj.pick();
	 */
}
