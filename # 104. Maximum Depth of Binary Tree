package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Queue;

public class Question104 {
	class Solution1 {
		int depth = 0;

		public int maxDepth(TreeNode root) {
			if (root == null) {
				return 0;
			}
			dfs(root, 0);
			return depth;
		}

		private void dfs(TreeNode node, int dep) {
			if (node == null) {
				return;
			}
			if (node.left == null && node.right == null) {
				depth = Math.max(depth, ++dep);
				return;
			}
			dfs(node.left, dep + 1);
			dfs(node.right, dep + 1);
		}
	}

	class Solution2 {
		public int maxDepth(TreeNode root) {
			if (root == null) {
				return 0;
			}
			int maxDep = 0;
			Queue<TreeNode> queue = new ArrayDeque<>();
			queue.offer(root);
			while (!queue.isEmpty()) {
				maxDep++;
				for (int i = queue.size(); i > 0; i--) {
					TreeNode node = queue.poll();
					if (node.left != null) {
						queue.offer(node.left);
					}
					if (node.right != null) {
						queue.offer(node.right);
					}
				}
			}
			return maxDep;
		}
	}

	class Solution3 {
		public int maxDepth(TreeNode root) {
			if (root == null) {
				return 0;
			}
			return 1 + Math.max(maxDepth(root.left), maxDepth(root.right));
		}
	}
}
