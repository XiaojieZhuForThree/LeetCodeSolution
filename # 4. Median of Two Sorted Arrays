```
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
```

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null && nums2 == null) {
            return null;
        } else if (nums1.length == 0 && nums2.length == 0) {
            return null;
        } else if (nums1 == null || nums1.length == 0) {
            return nums2.length % 2 == 0 ? (double)(nums2[nums2.length / 2] + nums2[nums2.length / 2 + 1])/2 : (double)nums2[nums2.length / 2];
        } else if (nums2 == null || nums2.length == 0) {
            return nums1.length % 2 == 0 ? (double)(nums1[nums1.length / 2] + nums1[nums1.length / 2 + 1])/2 : (double)nums1[nums1.length / 2];
        }
        boolean loop = true;
        int total = nums1.length + nums2.length;
        int start = 0, end = nums1.length - 1;
        int pt1, pt2, pt3, pt4;
        int ans1, ans2;
        while (loop) {
            pt1 = (start + end) / 2;
            pt2 = pt1 + 1;
            pt3 = total - (pt1 + 1) - 1;
            pt4 = pt3 + 1;
            int maxmin1 = pt1 < 0 ? Integer.MIN_VALUE : nums1[pt1];
            int maxmin2 = pt3 < 0 ? Integer.MIN_VALUE : nums1[pt3];
            int minmax1 = pt3 >= nums1.length ? Integer.MAX_VALUE : nums1[pt3];
            int minmax2 = pt4 >= nums2.length ? Integer.MAX_VALUE : nums1[pt4];
            if (maxmin1 > minmax2) {
                end = pt1;                
            } else if (maxmin2 > minmax1) {
                start = pt2;
            } else {
                ans1 = Math.max(maxmin1, maxmin2);
                ans2 = Math.min(minmax1, minmax2);
                loop = false;
            }
        }
    }
}
