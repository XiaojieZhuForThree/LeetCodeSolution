```
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
```

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1 == null || nums1.length == 0) {
            int mid = (nums2.length - 1) / 2;
            if (nums2.length % 2 == 0) {
                int sum = nums2[mid] + nums2[mid + 1];
                return (double)(sum / 2);
            } else {
                return (double)(nums2[mid]);
            }
        } else if (nums2 == null || nums2.length == 0) {
            int mid = (nums1.length - 1) / 2;
            if (nums1.length % 2 == 0) {
                int sum = nums1[mid] + nums1[mid + 1];
                return (double)(sum / 2);
            } else {
                return (double)(nums1[mid]);
            }
        }
        if (nums1.length < nums2.length) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }
        if (nums1.length == nums2.length) {
            if (nums1[0] >= nums2[nums2.length - 1]) {
                return double((nums1[0] + nums2[nums2.length - 1]) / 2);
            } else if (nums1[nums1.length - 1] <= nums2[0]) {
                return double((nums2[0] + nums1[nums1.length - 1]) / 2);
            }
        }
        int left = 0, right = nums1.length - 1;
        int total = nums1.length + nums2.length;
        while (left < right) {
            
        }
    }
}
