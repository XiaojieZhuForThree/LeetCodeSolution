```
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
```

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length < nums2.length) {
            int[] temp = nums1;
            nums1 = nums2;
            nums2 = temp;
        }

        int left = -2, right = nums1.length + 1;
        int total = nums1.length + nums2.length;
        int pt1, pt2, pt3, pt4;
        while (left < right) {
            int mid = (left + right) / 2;
            if (mid + 1 > nums1.length - mid + nums2.length - 1) {
                right = mid;
            } else if (mid + 1 + nums2.length + 1 < nums1.length - mid - 1) {
                left = mid + 1;
            } else {
                int cpt = total/2 - mid - 2;
                pt1 = (mid == -1) ? Integer.MIN_VALUE : nums1[mid];
                pt2 = (mid + 1 == nums1.length) ? Integer.MAX_VALUE : nums1[mid + 1];
                pt3 = (cpt == -1) ? Integer.MIN_VALUE : nums2[cpt];
                pt4 = (cpt + 1 == nums2.length) ? Integer.MAX_VALUE : nums2[cpt + 1];
                if (pt1 > pt4) {
                    right = mid;
                } else if (pt3 > pt2) {
                    left = mid + 1;
                } else {
                    int ptl = Math.max(pt1, pt3);
                    int ptr = Math.min(pt2, pt4);
                    if (total % 2 == 0) {
                        return ((double)(ptl + ptr)/2);
                    } else {
                        return (double)(ptr);
                    }
                }
            }
        }
        return (double)(-1);
    }
}

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        if (nums1.length > nums2.length) {
            return findMedianSortedArrays(nums2, nums1);
        }
        int half = (nums1.length + nums2.length + 1) / 2;
        int lo = 0, hi = nums1.length;
        while (lo <= hi) {
            int mid1 = (lo + hi) / 2, mid2 = half - mid1;
            if (mid1 != 0 && mid2 != nums2.length && nums1[mid1-1] >nums2[mid2]) {
                hi = mid1-1;
            } else if (mid2 != 0 && mid1 != nums1.length && nums2[mid2-1] > nums1[mid1]) {
                lo = mid1+1;
            } else if ((nums1.length + nums2.length) % 2 == 1){
                if (mid1 == 0) {
                    return (double)nums2[mid2-1];
                } else if (mid2 == 0) {
                    return (double)nums1[mid1 - 1];
                } else {
                    return (double)Math.max(nums1[mid1 - 1], nums2[mid2-1]);
                }
            } else {
                int left = 0, right = 0;
                if (mid1 == 0) {
                    left = nums2[mid2 - 1];
                } else if (mid2 == 0) {
                    left = nums1[mid1 - 1];
                } else {
                    left = Math.max(nums1[mid1 - 1], nums2[mid2-1]);
                }
                if (mid1 == nums1.length) {
                    right = nums2[mid2];
                } else if (mid2 == nums2.length) {
                    right = nums1[mid1];
                } else {
                    right = Math.min(nums1[mid1], nums2[mid2]);
                }
                return (double)(left + right)/2;
            }
        }
        return (double)(-1);
    }
}


#include <vector>
using std::vector;

class Solution {
public:
	double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
		if (size(nums1) > size(nums2)) {
			return findMedianSortedArrays(nums2, nums1);
		}
		int half = (size(nums1) + size(nums2) + 1) / 2;
		int lo = 0, hi = size(nums1);
		while (lo <= hi) {
			int mid1 = (lo + hi) / 2, mid2 = half - mid1;
			if (mid1 != 0 && mid2 != size(nums2) && nums1[mid1 - 1] > nums2[mid2]) {
				hi = mid1 - 1;
			}
			else if (mid2 != 0 && mid1 != size(nums1) && nums2[mid2 - 1] > nums1[mid1]) {
				lo = mid1 + 1;
			}
			else if ((size(nums1) + size(nums2)) % 2 == 1) {
				if (mid1 == 0) {
					return (double)nums2[mid2 - 1];
				}
				else if (mid2 == 0) {
					return (double)nums1[mid1 - 1];
				}
				else {
					return (double)std::max(nums1[mid1 - 1], nums2[mid2 - 1]);
				}
			}
			else {
				int left = 0, right = 0;
				if (mid1 == 0) {
					left = nums2[mid2 - 1];
				}
				else if (mid2 == 0) {
					left = nums1[mid1 - 1];
				}
				else {
					left = std::max(nums1[mid1 - 1], nums2[mid2 - 1]);
				}
				if (mid1 == size(nums1)) {
					right = nums2[mid2];
				}
				else if (mid2 == size(nums2)) {
					right = nums1[mid1];
				}
				else {
					right = std::min(nums1[mid1], nums2[mid2]);
				}
				return (double)(left + right) / 2;
			}
		}
		return (double)(-1);
	}
};
