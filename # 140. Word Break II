class Solution {
    // Testing recommended solution - not mine
    public List<String> wordBreak(String s, List<String> wordDict) {
        Set<String> dict = new HashSet<>(wordDict);
        int maxLen = 0;
        for (String word : wordDict) {
            maxLen = Math.max(maxLen, word.length());
        }
        int n = s.length();
        boolean[] dp = new boolean[n + 1];
        dp[0] = true;
        
        for (int i = 1; i <= n; i++) {
            for (int j = Math.max(0, i - maxLen); j < i; j++) {
                if (dp[j] && dict.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
        }
        if (!dp[n]) {
            return new ArrayList<String>();
        }
        
        List<String>[] memo = new List[n + 1];
        memo[0] = new ArrayList<>();
        memo[0].add("");
        
        for (int i = 1; i <= n; i++) {
            memo[i] = new ArrayList<>();
            for (int j = Math.max(0, i - maxLen); j < i; j++) {
                if (memo[j].size() > 0 && dict.contains(s.substring(j, i))) {
                    String word = s.substring(j, i);
                    for (String sub : memo[j]) {
                        if (sub.equals("")) {
                            memo[i].add(word);
                        } else {
                            memo[i].add(sub + " " + word);
                        }
                    }
                }
            }
        }
        return memo[n];
    }
}



#include <vector>
#include <string>
#include <unordered_set>

using std::vector;
using std::string;

class Solution {
public:
    vector<vector<string>> ans;
    vector<string> wordBreak(string s, vector<string>& wordDict) {
        std::unordered_set<string> us;
        for (string& w : wordDict) us.insert(w);
        vector<string> v;
        dfs(s, 0, us, v);
        vector<string> res;
        for (auto& v : ans) {
            string c;
            for (int i = 0; i < size(v) - 1; i++) {
                c += v[i];
                c += " ";
            }
            c += v[size(v) - 1];
            res.push_back(c);
        }
        return res;
    }
private:
    void dfs(string& s, int i, std::unordered_set<string>& us, vector<string>& v) {
        if (i >= size(s)) {
            vector<string> c(v);
            ans.push_back(c);
            return;
        }
        for (int j = 1; i + j <= size(s); j++) {
            if (us.count(s.substr(i, j))) {
                v.push_back(s.substr(i, j));
                dfs(s, i + j, us, v);
                v.pop_back();
            }
        }
        return;
    }
};
