package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question52 {
	class Solution {
		int ans = 0;
		Set<Integer> col;
		Set<Integer> upper;
		Set<Integer> lower;

		public int totalNQueens(int n) {
			col = new HashSet<>();
			upper = new HashSet<>();
			lower = new HashSet<>();
			dfs(0, n);
			return ans;
		}

		private void dfs(int row, int n) {
			if (row == n)
				ans++;
			for (int i = 0; i < n; i++) {
				if (col.contains(i) || upper.contains(row + i) || lower.contains(row - i))
					continue;
				col.add(i);
				upper.add(row + i);
				lower.add(row - i);
				dfs(row + 1, n);
				col.remove(i);
				upper.remove(row + i);
				lower.remove(row - i);
			}
			return;
		}
	}
}


from collections import defaultdict


class Solution:
    def totalNQueens(self, n: int) -> int:
        return self.dfs(0, n, defaultdict(int), defaultdict(int), defaultdict(int))
    
    def dfs(self, cur, n, cols, upper, lower):
        if cur == n:
            return 1
        i = cur
        ans = 0
        for j in range(n):
            if cols[j] or upper[i + j] or lower[i - j]:
                continue
            cols[j] += 1
            upper[i + j] += 1
            lower[i - j] += 1
            ans += self.dfs(cur + 1, n, cols, upper, lower)
            cols[j] -= 1
            upper[i + j] -= 1
            lower[i - j] -= 1
        return ans
