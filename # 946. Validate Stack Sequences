package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

public class Question946 {
	class Solution {
		public boolean validateStackSequences(int[] pushed, int[] popped) {
			Deque<Integer> stack = new ArrayDeque<>();
			int j = 0;
			for (int i : popped) {
				if (stack.isEmpty() || stack.peekLast() != i) {
					while (j < pushed.length && pushed[j] != i) {
						stack.offerLast(pushed[j]);
						j++;
					}
					if (j == pushed.length) {
						return false;
					}
					j++;
					continue;
				}
				stack.pollLast();
			}
			return true;
		}
	}
}


#include <deque>
#include <vector>

using namespace std;

class Solution {
public:
	bool validateStackSequences(vector<int>& pushed, vector<int>& popped) {
		deque<int> stack;
		int i = 0, j = 0, n = size(pushed);
		for (; j < n; ) {
			int target = popped[j];
			if (!stack.empty() && stack.back() == target) {
				stack.pop_back();
				j++;
			}
			else if (i < n && pushed[i] == target) {
				i++;
				j++;
			}
			else if (i < n) stack.push_back(pushed[i++]);
			else return false;
		}
		return true;
	}
};
