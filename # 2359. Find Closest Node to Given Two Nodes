#include <unordered_map>
#include <unordered_set>
using namespace std;

class Solution {
public:
	int closestMeetingNode(vector<int>& edges, int node1, int node2) {
		unordered_map<int, int> dist1, dist2;
		unordered_set<int> seen1, seen2;
		dfs(edges, node1, 0, dist1, seen1);
		dfs(edges, node2, 0, dist2, seen2);
		int dis = INT_MAX, ans = -1;
		for (int i = 0; i < edges.size(); i++) {
			if (dist1.count(i) && dist2.count(i)) {
				int cand = max(dist1[i], dist2[i]);
				if (dis > cand) {
					dis = cand;
					ans = i;
				}
			}
		}
		return ans;
	}

private:
	void dfs(vector<int>& edges, int cur, int steps, unordered_map<int, int>& map, unordered_set<int>& seen) {
		if (seen.count(cur)) return;
		map[cur] = steps;
		if (edges[cur] == -1) return;
		seen.insert(cur);
		dfs(edges, edges[cur], steps + 1, map, seen);
	}
};
