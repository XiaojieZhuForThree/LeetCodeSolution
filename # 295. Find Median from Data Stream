package com.leetcode.problems;

import java.util.Collections;
import java.util.PriorityQueue;

public class Question295 {
	class MedianFinder {
		PriorityQueue<Integer> min;
		PriorityQueue<Integer> max;

		/** initialize your data structure here. */
		public MedianFinder() {
			this.min = new PriorityQueue<>();
			this.max = new PriorityQueue<>(Collections.reverseOrder());
		}

		public void addNum(int num) {
			max.offer(num);
			min.offer(max.poll());
			if (max.size() < min.size()) {
				max.offer(min.poll());
			}
		}

		public double findMedian() {
			if (max.size() == min.size())
				return (max.peek() + min.peek()) / 2.0;
			else
				return max.peek();
		}
	}
}


#include <vector>
#include <queue>
using namespace std;

class MedianFinder {
public:
	priority_queue<int, vector<int>, greater<int>> min_heap;
	priority_queue<int, vector<int>, less<int>> max_heap;
	int cnt;
	MedianFinder() {
		cnt = 0;
	}

	void addNum(int num) {
		cnt++;
		if (min_heap.size() > 0 && num >= min_heap.top()) {
			min_heap.push(num);
			while (min_heap.size() > max_heap.size()) {
				max_heap.push(min_heap.top());
				min_heap.pop();
			}
		}
		else {
			max_heap.push(num);
			while (max_heap.size() - min_heap.size() > 1) {
				min_heap.push(max_heap.top());
				max_heap.pop();
			}
		}
	}

	double findMedian() {
		if (cnt % 2 == 1) return max_heap.top();
		return (min_heap.top() + max_heap.top()) / 2.0;
	}
};

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder* obj = new MedianFinder();
 * obj->addNum(num);
 * double param_2 = obj->findMedian();
 */
