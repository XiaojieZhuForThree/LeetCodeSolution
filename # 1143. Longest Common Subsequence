package com.leetcode.problems;

public class Question1143 {
	class Solution {
	    public int longestCommonSubsequence(String text1, String text2) {
	        if (text1 == null || text1.length() == 0 || text2 == null || text2.length() == 0) return 0;
	        int m = text1.length(), n = text2.length();
	        int[][] dp = new int[m + 1][n + 1];
	        for (int i = 0; i < m; i++) {
	            for (int j = 0; j < n; j++) {
	                if (text1.charAt(i) == text2.charAt(j)) {
	                    dp[i + 1][j + 1] = dp[i][j] + 1;
	                } else {
	                    dp[i + 1][j + 1] = Math.max(dp[i][j + 1], dp[i + 1][j]);
	                }
	            }
	        }
	        return dp[m][n];
	    }
	}
}


#include <string>
#include <vector>
using namespace std;

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, 0));
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (text1[i] == text2[j]) dp[i + 1][j + 1] = dp[i][j] + 1;
                else dp[i + 1][j + 1] = max(dp[i + 1][j], dp[i][j + 1]);
            }
        }
        return dp[m][n];
    }
};


#include <string>
#include <vector>
using std::string;

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = size(text1), n = size(text2);
        std::vector<std::vector<int>> dp(m + 1, std::vector<int>(n + 1, 0));
        for (int i = 1; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (text1[i - 1] == text2[j - 1]) dp[i][j] = dp[i - 1][j - 1] + 1;
                else dp[i][j] = std::max(dp[i][j - 1], dp[i - 1][j]);
            }
        }
        return dp[m][n];
    }
};
