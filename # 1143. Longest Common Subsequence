package com.leetcode.problems;

public class Question1143 {
	class Solution {
		public int longestCommonSubsequence(String text1, String text2) {
			int[] record = new int[text1.length()];
			int maxVal = 0;
			for (char c : text2.toCharArray()) {
				int prevMax = 0;
				for (int i = 0; i < text1.length(); i++) {
					if (text1.charAt(i) == c) {
						int newVal = prevMax + 1;
						if (newVal > record[i]) {
							record[i] = newVal;
							prevMax = Math.max(prevMax, record[i] - 1);
						} else {
							prevMax = Math.max(prevMax, record[i]);
						}

					} else {
						prevMax = Math.max(prevMax, record[i]);
					}
				}
			}
			for (int i : record) {
				maxVal = Math.max(maxVal, i);
			}
			return maxVal;
		}
	}

	class Solution2 {
		public int longestCommonSubsequence(String text1, String text2) {
			int[][] dp = new int[text1.length() + 1][text2.length() + 1];
			for (int i = 1; i <= text1.length(); i++) {
				for (int j = 1; j <= text2.length(); j++) {
					if (text1.charAt(i - 1) == text2.charAt(j - 1)) {
						dp[i][j] = dp[i - 1][j - 1] + 1;
					} else {
						dp[i][j] = Math.max(dp[i][j - 1], dp[i - 1][j]);
					}
				}
			}
			return dp[text1.length()][text2.length()];
		}
	}
}
