#include <vector>
#include <algorithm>
using std::vector;

struct UF {
	vector<int> pars;
	int heads;
	UF(int n) {
		heads = n;
		for (int i = 0; i < n; i++) pars.push_back(i);
	}
	void merge(int i, int j) {
		heads--;
		int pi = find(i), pj = find(j);
		pars[pj] = pi;
	}
	int find(int i) {
		if (pars[i] == i) return i;
		pars[i] = find(pars[i]);
		return pars[i];
	}
};

class Solution {
public:
	vector<vector<int>> findCriticalAndPseudoCriticalEdges(int n, vector<vector<int>>& edges) {
		vector<int> idx;
		for (int i = 0; i < size(edges); i++) idx.push_back(i);
		sort(idx.begin(), idx.end(), [edges](int a, int b) {
			return edges[a][2] < edges[b][2];
			});
		int sml = getMST(n, -1, -1, idx, edges);
		vector<int> c, nc;
		for (int i : idx) {
			if (getMST(n, i, -1, idx, edges) > sml) continue;
			else if (getMST(n, -1, i, idx, edges) > sml) c.push_back(i);
			else nc.push_back(i);
		}
		return { c, nc };
	}
private:
	int getMST(int n, int use, int ban, vector<int>& idx, vector<vector<int>>& edges) {
		UF uf(n);
		int ans = 0;
		if (use != -1) {
			auto e = edges[use];
			uf.merge(e[0], e[1]);
			ans += e[2];
		}
		for (int i : idx) {
			auto e = edges[i];
			if (i == ban) continue;
			if (uf.find(e[0]) == uf.find(e[1])) continue;
			ans += e[2];
			uf.merge(e[0], e[1]);
		}
		return uf.heads == 1 ? ans : INT_MAX;
	}
};
