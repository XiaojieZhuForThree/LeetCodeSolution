package com.leetcode.problems;

public class Question211 {
	class WordDictionary {

		class TrieNode {
			TrieNode[] alphabet;
			boolean isWord;

			public TrieNode() {
				alphabet = new TrieNode[26];
			}

			public void addWord(String word) {
				TrieNode dummy = this;
				for (char c : word.toCharArray()) {
					if (dummy.alphabet[c - 'a'] == null) {
						dummy.alphabet[c - 'a'] = new TrieNode();
					}
					dummy = dummy.alphabet[c - 'a'];
				}
				dummy.isWord = true;
			}

			public boolean search(String word, int index) {
				if (index == word.length()) {
					return isWord;
				}
				boolean ans = false;
				char c = word.charAt(index);
				if (c == '.') {
					for (TrieNode node : alphabet) {
						if (node != null) {
							ans |= node.search(word, index + 1);
						}
					}
					return ans;
				} else if (alphabet[c - 'a'] == null) {
					return false;
				} else {
					TrieNode node = alphabet[c - 'a'];
					return node.search(word, index + 1);
				}
			}
		}

		/** Initialize your data structure here. */
		TrieNode root;

		public WordDictionary() {
			root = new TrieNode();
		}

		/** Adds a word into the data structure. */
		public void addWord(String word) {
			root.addWord(word);
		}

		/**
		 * Returns if the word is in the data structure. A word could contain the dot
		 * character '.' to represent any one letter.
		 */
		public boolean search(String word) {
			return root.search(word, 0);
		}
	}

	/**
	 * Your WordDictionary object will be instantiated and called as such:
	 * WordDictionary obj = new WordDictionary(); obj.addWord(word); boolean param_2
	 * = obj.search(word);
	 */
}


class TrieNode:
    def __init__(self):
        self.next = {}
        self.end = False
        
class Trie:
    def __init__(self):
        self.node = TrieNode()
    
    def addWord(self, w):
        dummy = self.node
        for c in w:
            if not c in dummy.next:
                dummy.next[c] = TrieNode()
            dummy = dummy.next[c]
        dummy.end = True
        
    def searchWord(self, w):
        return self.search(self.node, 0, w)
    
    def search(self, node, i, w):
        if i == len(w):
            return node.end
        c = w[i]
        if c == '.':
            ans = False
            for n in node.next.values():
                ans = ans or self.search(n, i + 1, w)
            return ans
        elif c in node.next:
            return self.search(node.next[c], i + 1, w)
        else:
            return False
        
class WordDictionary:

    def __init__(self):
        self.trie = Trie()

    def addWord(self, word: str) -> None:
        self.trie.addWord(word)

    def search(self, word: str) -> bool:
        return self.trie.searchWord(word)


# Your WordDictionary object will be instantiated and called as such:
# obj = WordDictionary()
# obj.addWord(word)
# param_2 = obj.search(word)


#include <unordered_map>
#include <string>
using namespace std;

struct TrieNode {
	bool isWord;
	unordered_map<char, TrieNode*> nxt;
public:
	TrieNode() {
		isWord = false;
	}
};

class WordDictionary {
	TrieNode* node;
public:
	WordDictionary() {
		node = new TrieNode();
	}

	void addWord(string word) {
		TrieNode* dummy = node;
		for (char c : word) {
			if (!dummy->nxt.count(c)) dummy->nxt[c] = new TrieNode();
			dummy = dummy->nxt[c];
		}
		dummy->isWord = true;
	}

	bool search(string word) {
		return helper(node, word, 0);
	}
private:
	bool helper(TrieNode* cur, string& word, int i) {
		if (i == size(word)) return cur->isWord;
		char c = word[i];
		if (c == '.') {
			bool ans = false;
			for (auto& p : cur->nxt) ans |= helper(p.second, word, i + 1);
			return ans;
		}
		else if (!cur->nxt.count(c)) return false;
		return helper(cur->nxt[c], word, i + 1);
	}
};
