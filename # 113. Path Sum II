package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

import com.leetcode.model.TreeNode;

public class Question113 {
	class Solution {
		public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
			List<List<Integer>> ans = new ArrayList<>();
			if (root == null)
				return ans;
			dfs(ans, root, targetSum, 0, new ArrayList<>());
			return ans;
		}

		private void dfs(List<List<Integer>> ans, TreeNode node, int targetSum, int curSum, List<Integer> curPath) {
			if (node == null)
				return;
			curPath.add(node.val);
			curSum += node.val;
			if (node.left == null && node.right == null && curSum == targetSum)
				ans.add(new ArrayList<>(curPath));
			else {
				dfs(ans, node.left, targetSum, curSum, curPath);
				dfs(ans, node.right, targetSum, curSum, curPath);
			}
			curSum -= node.val;
			curPath.remove(curPath.size() - 1);
			return;
		}
	}
}


#include <vector>
#include "TreeNode.cpp"

using namespace std;

class Solution {
public:
    vector<vector<int>> pathSum(TreeNode* root, int targetSum) {
        vector<vector<int>> ans;
        vector<int> cur;
        dfs(root, 0, targetSum, cur, ans);
        return ans;
    }
private:
    void dfs(TreeNode* node, int sum, int targetSum, vector<int>& cur, vector<vector<int>>& ans) {
        if (node == nullptr) {
            return;
        }
        cur.push_back(node->val);
        sum += node->val;
        if (node->left == nullptr && node->right == nullptr) {
            if (sum == targetSum) {
                vector<int> copy(cur.begin(), cur.end());
                ans.push_back(copy);
            }
        }
        else {
            dfs(node->left, sum, targetSum, cur, ans);
            dfs(node->right, sum, targetSum, cur, ans);
        }
        sum -= node->val;
        cur.pop_back();
    }
};
