package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

import com.leetcode.model.TreeNode;

public class Question113 {
	class Solution {
		public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
			List<List<Integer>> ans = new ArrayList<>();
			if (root == null)
				return ans;
			dfs(ans, root, targetSum, 0, new ArrayList<>());
			return ans;
		}

		private void dfs(List<List<Integer>> ans, TreeNode node, int targetSum, int curSum, List<Integer> curPath) {
			if (node == null)
				return;
			curPath.add(node.val);
			curSum += node.val;
			if (node.left == null && node.right == null && curSum == targetSum)
				ans.add(new ArrayList<>(curPath));
			else {
				dfs(ans, node.left, targetSum, curSum, curPath);
				dfs(ans, node.right, targetSum, curSum, curPath);
			}
			curSum -= node.val;
			curPath.remove(curPath.size() - 1);
			return;
		}
	}
}
