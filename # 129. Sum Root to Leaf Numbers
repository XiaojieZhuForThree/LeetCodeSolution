package com.leetcode.problems;

import com.leetcode.model.TreeNode;

public class Question129 {
	
	class Solution {
	    int sum = 0;
	    
	    public int sumNumbers(TreeNode root) {
	        dfs(root, 0);
	        return sum;
	    }
	    
	    private void dfs(TreeNode node, int cur) {
	        if (node == null) return;
	        cur = cur * 10 + node.val;
	        if (node.left == null && node.right == null) {
	            sum += cur;
	            return;
	        }
	        dfs(node.left, cur);
	        dfs(node.right, cur);
	    }
	}
}


#include "TreeNode.h"

class Solution {
public:
	int ans = 0;
	int sumNumbers(TreeNode* root) {
		dfs(root, 0);
		return ans;
	}
private:
	void dfs(TreeNode* node, int cur) {
		if (!node) return;
		cur = cur * 10 + node->val;
		if (!node->left && !node->right) {
			ans += cur;
			return;
		}
		dfs(node->left, cur);
		dfs(node->right, cur);
	}
};


#include "TreeNode.h"

class Solution {
public:
	int sumNumbers(TreeNode* root) {
		if (!root) return 0;
		if (!root->left && !root->right) return root->val;
		if (root->left) root->left->val += root->val * 10;
		if (root->right) root->right->val += root->val * 10;
		return sumNumbers(root->left) + sumNumbers(root->right);
	}
};
