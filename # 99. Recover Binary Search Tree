package com.leetcode.problems;

import java.util.Arrays;

import com.leetcode.api.TreeNode;

public class Question99 {
	class Solution {
		public void recoverTree(TreeNode root) {
			if (root == null) {
				return;
			}
			if (root.left == null && root.right == null) {
				return;
			}
			recoverTree(root.left);
			recoverTree(root.right);
			if (root.left == null) {
				TreeNode leftMost = findLeft(root.right);
				if (root.val < leftMost.val) {
					return;
				}
				int val = root.val;
				root.val = leftMost.val;
				leftMost.val = val;
				recoverTree(root);
			} else if (root.right == null) {
				TreeNode rightMost = findRight(root.left);
				if (root.val > rightMost.val) {
					return;
				}
				int val = root.val;
				root.val = rightMost.val;
				rightMost.val = val;
				recoverTree(root);
			} else {
				TreeNode leftMost = findLeft(root.right);
				TreeNode rightMost = findRight(root.left);
				if (root.val < leftMost.val && root.val > rightMost.val) {
					return;
				}
				int[] vals = new int[] { root.val, leftMost.val, rightMost.val };
				Arrays.sort(vals);
				rightMost.val = vals[0];
				root.val = vals[1];
				leftMost.val = vals[2];
				recoverTree(root);
			}
		}

		private TreeNode findLeft(TreeNode node) {
			while (node.left != null) {
				node = node.left;
			}
			return node;
		}

		private TreeNode findRight(TreeNode node) {
			while (node.right != null) {
				node = node.right;
			}
			return node;
		}
	}
}
