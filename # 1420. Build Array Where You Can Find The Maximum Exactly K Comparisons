package problems;

public class Question1420 {
	class Solution {
		public int numOfArrays(int n, int m, int k) {
			long[][][] dp = new long[n + 1][m + 1][k + 1];
			long mod = 1000000007;
			int ans = 0;
			for (int j = 1; j <= m; j++) {
				dp[1][j][1] = 1;
			}
			for (int i = 1; i <= n; i++) {
				for (int j = 1; j <= m; j++) {
					for (int h = 1; h <= k; h++) {
						if (i == 1 && h == 1) {
							continue;
						}
						long tmp = dp[i - 1][j][h] * j;
						for (int c = 1; c < j; c++) {
							tmp += dp[i - 1][c][h - 1];
						}
						dp[i][j][h] = tmp % mod;
					}
				}
			}
			for (int j = 1; j <= m; j++) {
				ans += (int) dp[n][j][k];
				ans %= mod;
			}
			return ans;
		}
	}
}


#include <vector>

class Solution {
public:
	int MOD = 1000000007;
	int numOfArrays(int n, int m, int k) {
		std::vector<std::vector<std::vector<int>>> dp(n + 1, std::vector<std::vector<int>>(m + 1, std::vector<int>(k + 1, 0)));
		for (int j = 1; j <= m; j++) {
			dp[1][j][1] = 1;
		}
		for (int i = 2; i <= n; i++) {
			for (int j = 1; j <= m; j++) {
				for (int cost = 1; cost <= k; cost++) {
					dp[i][j][cost] = (long long)j * dp[i - 1][j][cost] % MOD;
					for (int prev = 1; prev < j; prev++) {
						dp[i][j][cost] = (dp[i][j][cost] + dp[i - 1][prev][cost - 1]) % MOD;
					}
				}
			}
		}

		int total = 0;
		for (int j = 1; j <= m; j++) {
			total = (total + dp[n][j][k]) % MOD;
		}
		return total;
	}
};
