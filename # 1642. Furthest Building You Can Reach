package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question1642 {
	class Solution {
		public int furthestBuilding(int[] heights, int bricks, int ladders) {
	        PriorityQueue<Integer> pq = new PriorityQueue<>();
	        for (int i = 0; i < heights.length - 1; i++) {
	            int diff = heights[i + 1] - heights[i];
	            if (diff <= 0) {
	                continue;
	            }
	            pq.offer(diff);
	            if (pq.size() > ladders) {
	                int smallest = pq.poll();
	                if (bricks < smallest) {
	                    return i;
	                }
	                bricks -= smallest;
	            }
	        }
	        return heights.length - 1;
	    }
	}
}


from typing import List
import heapq


class Solution:
    def furthestBuilding(self, heights: List[int], bricks: int, ladders: int) -> int:
        used = []
        heapq.heapify(used)
        for i in range(1, len(heights)):
            cur, prev = heights[i], heights[i - 1]
            if cur <= prev:
                continue
            diff = cur - prev
            if bricks >= diff:
                bricks -= diff
                heapq.heappush(used, -diff)
            else:
                if not ladders:
                    return i - 1
                else:
                    cand = -heapq.heappop(used) if used else 0
                    if cand < diff:
                        ladders -= 1
                        heapq.heappush(used, -cand)
                    else:
                        ladders -= 1
                        bricks += cand - diff
                        heapq.heappush(used, -diff)
        return len(heights) - 1


#include <vector>
#include <queue>

using std::vector;

class Solution {
public:
	int furthestBuilding(vector<int>& heights, int bricks, int ladders) {
		std::priority_queue<int> pq;
		for (int i = 0; i < size(heights) - 1; i++) {
			int diff = heights[i + 1] - heights[i];
			if (diff <= 0) continue;
			else if (diff <= bricks) {
				bricks -= diff;
				pq.push(diff);
			}
			else if (ladders == 0) return i;
			else {
				if (!pq.empty() && pq.top() > diff) {
					bricks += pq.top() - diff;
					pq.pop();
					pq.push(diff);
				}
				ladders--;
			}
		}
		return size(heights) - 1;
	}
};
