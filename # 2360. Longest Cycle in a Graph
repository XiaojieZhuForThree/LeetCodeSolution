#include <vector>
#include <unordered_map>

using namespace std;

class Solution {
	int ans = -1;
public:
	int longestCycle(vector<int>& edges) {
		unordered_map<int, int> seen;
		for (int i = 0; i < size(edges); i++) {
			if (edges[i] == -1) continue;
			dfs(edges, i, seen, 0);
		}
		return ans;
	}
private:
	void dfs(vector<int>& edges, int i, unordered_map<int, int>& seen, int pos) {
		if (edges[i] == -1) return;
		if (seen.count(i)) {
			ans = max(ans, pos - seen[i]);
			edges[i] = -1;
			return;
		}
		seen[i] = pos;
		dfs(edges, edges[i], seen, pos + 1);
		edges[i] = -1;
		return;
	}
};
