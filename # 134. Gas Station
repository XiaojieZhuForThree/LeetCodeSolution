package com.leetcode.problems;

public class Question134 {
	class Solution1 {
		public int canCompleteCircuit(int[] gas, int[] cost) {
			int left = 0, index = -1, max = 0;
			for (int i = gas.length - 1; i >= 0; i--) {
				left += gas[i] - cost[i];
				if (left >= max) {
					index = i;
					max = left;
				}
			}
			return left >= 0 ? index : -1;
		}
	}
	
	class Solution2 {
	    public int canCompleteCircuit(int[] gas, int[] cost) {
	        int n = gas.length;
	        int[] netGas = new int[n+1];
	        int min = Integer.MAX_VALUE;
	        int index = -1;
	        for (int i = 1; i <= n; i++) {
	            int netVal = gas[i-1] - cost[i-1];
	            netGas[i] = netGas[i-1] + netVal;
	            if (netGas[i] < min) {
	                min = netGas[i];
	                index = i;
	            }
	        }
	        if (min >= 0) {
	            index = 1;
	        }
	        for (int i = index; i <= n; i++) {
	            int rightAllGas = netGas[n] - netGas[i-1];
	            if (gas[i-1] - cost[i-1] >= 0 && rightAllGas + netGas[i - 1] >= 0) {
	                return i - 1;
	            }
	        }
	        return -1;
	    }
	}
}
