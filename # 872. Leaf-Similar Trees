#include "TreeNode.h"
#include <vector>
using namespace std;

class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        vector<int> seq1, seq2;
        getSeq(root1, seq1);
        getSeq(root2, seq2);
        return seq1 == seq2;
    }
private:
    void getSeq(TreeNode* node, vector<int>& seq) {
        if (!node) return;
        if (!node->left && !node->right) seq.push_back(node->val);
        getSeq(node->left, seq);
        getSeq(node->right, seq);
    }
};



#include "TreeNode.h"
#include <vector>

class Solution {
public:
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        return comp(getLeaf(root1), getLeaf(root2));
    }
private:
    std::vector<int> getLeaf(TreeNode* node) {
        if (!node) return {};
        if (!node->left && !node->right) return { node->val };
        std::vector<int> l = getLeaf(node->left), r = getLeaf(node->right);
        l.insert(l.end(), r.begin(), r.end());
        return l;
    }
private:
    bool comp(std::vector<int> a, std::vector<int> b) {
        if (size(a) != size(b)) return false;
        for (int i = 0; i < size(a); i++) {
            if (a[i] != b[i]) return false;
        }
        return true;
    }
};
