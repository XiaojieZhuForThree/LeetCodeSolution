package com.leetcode.problems;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class Question1312 {
	class Solution1 {
		Map<String, Integer> map = new HashMap<>();

		public int minInsertions(String s) {
			if (map.containsKey(s)) {
				return map.get(s);
			}
			if (s.equals("") || s.length() == 1) {
				map.put(s, 0);
				return 0;
			}
			int n = s.length();
			if (s.charAt(0) == s.charAt(n - 1)) {
				int val = minInsertions(s.substring(1, n - 1));
				map.put(s, val);
				return map.get(s);
			} else {
				int val1 = 1 + minInsertions(s.substring(0, n - 1));
				int val2 = 1 + minInsertions(s.substring(1));
				map.put(s, Math.min(val1, val2));
				return map.get(s);
			}
		}
	}

	class Solution2 {
		public int minInsertions(String s) {
			int n = s.length();
			int[][] dp = new int[n][n];
			for (int[] arr : dp) {
				Arrays.fill(arr, -1);
			}
			return dfs(s, dp, 0, n - 1);
		}

		private int dfs(String s, int[][] dp, int l, int r) {
			if (dp[l][r] != -1) {
				return dp[l][r];
			}
			if (l >= r) {
				dp[l][r] = 0;
				return 0;
			}
			if (s.charAt(l) == s.charAt(r)) {
				dp[l][r] = dfs(s, dp, l + 1, r - 1);
				return dp[l][r];
			}
			int val1 = 1 + dfs(s, dp, l + 1, r);
			int val2 = 1 + dfs(s, dp, l, r - 1);
			dp[l][r] = Math.min(val1, val2);
			return dp[l][r];
		}
	}
}


#include <string>
#include <vector>
using namespace std;

class Solution {
public:
	int minInsertions(string s) {
		int n = size(s), ans = n;
		vector<vector<int>> dp(n + 1, vector<int>(n + 2, -1));
		for (int i = 1; i <= size(s); i++) {
			ans = min(ans, dfs(s, dp, i, i + 1));
			ans = min(ans, dfs(s, dp, i - 1, i + 1));
		}
		return ans;
	}
private:
	int dfs(string& s, vector<vector<int>>& dp, int l, int r) {
		if (dp[l][r] != -1) return dp[l][r];
		int ans;
		if (l == 0) ans = size(s) - r + 1;
		else if (r == size(s) + 1) ans = l;
		else if (s[l - 1] == s[r - 1]) ans = dfs(s, dp, l - 1, r + 1);
		else ans = 1 + min(dfs(s, dp, l - 1, r), dfs(s, dp, l, r + 1));
		dp[l][r] = ans;
		return ans;
	}
};
