class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Set<List<Integer>> ans = new HashSet<>();
        Arrays.sort(nums);
        int pointer1 = 0;
        while (pointer1 < nums.length-2){
            int pointer2 = pointer1+1, pointer3 = nums.length-1;
            while (pointer2 < pointer3){
                int sum = nums[pointer1]+nums[pointer2]+nums[pointer3];
                if (sum == 0){
                    ans.add(new ArrayList<>(Arrays.asList(nums[pointer1],nums[pointer2],nums[pointer3])));
                    pointer3--;
                    pointer2++;
                } else if (sum > 0){
                    pointer3--;
                } else{
                    pointer2++;
                }
            }
            pointer1++;
        }
        return new ArrayList<List<Integer>>(ans);
    }
}


class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ans = new ArrayList<>();
        for (int i = 0; i < nums.length - 2; i++) {
            if (i == 0 || nums[i] != nums[i-1]) {
                int left = i + 1, right = nums.length - 1, sum = 0 - nums[i];
                while (left < right) {
                    if (nums[left] + nums[right] == sum) {
                        ans.add(Arrays.asList(nums[i], nums[left], nums[right]));
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        while (right > left && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        left++;
                        right--;
                    } else if (nums[left] + nums[right] < sum){
                        while (left < right && nums[left] == nums[left + 1]) {
                            left++;
                        }
                        left++;
                    } else {
                        while (right > left && nums[right] == nums[right - 1]) {
                            right--;
                        }
                        right--;
                    }
                }
            }
        }
        return ans;
    }
}
