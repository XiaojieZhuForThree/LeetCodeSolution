class TimeMap {
	Map<String, String> map;
	Map<String, List<Integer>> time;
    Map<String, Set<Integer>> seen;
    /** Initialize your data structure here. */
    public TimeMap() {
        this.map = new HashMap<String, String>();
        this.time = new HashMap<String, List<Integer>>();
        this.seen = new HashMap<String, Set<Integer>>();
    }
    
    public void set(String key, String value, int timestamp) {
    	StringBuilder sb = new StringBuilder();
    	sb.append(key);
    	sb.append(timestamp);
    	map.put(sb.toString(), value);
    	if (seen.containsKey(key)){
    		time.get(key).add(timestamp);
            seen.get(key).add(timestamp);
    	}
    	else {
            List<Integer> list = new ArrayList<>();
            Set<Integer> set = new HashSet<>();
            list.add(timestamp);
            set.add(timestamp);
    		time.put(key, list);
            seen.put(key, set);
    	}
    }
    
    public String get(String key, int timestamp) {
    	StringBuilder sb = new StringBuilder();
    	if (time.containsKey(key)){
	        if (seen.get(key).contains(timestamp)){
	        	sb.append(key);
	    		sb.append(timestamp);
	        }
            else if (time.get(key).get(0) > timestamp){
                return "";
            }
	        else {
                int max = 0;
	        	for (int i =  time.get(key).size()-1; i >= 0; i--){
	        		if (time.get(key).get(i) <= timestamp){
	        			max = time.get(key).get(i);
                        break;
	        		}
	        	}
        		sb.append(key);
        		sb.append(max);
       		}
       		return map.get(sb.toString());
	    }
	    return "";
    }
}

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap obj = new TimeMap();
 * obj.set(key,value,timestamp);
 * String param_2 = obj.get(key,timestamp);
 */


#include <string>
#include <vector>
#include <unordered_map>
using namespace std;

class TimeMap {
public:
	unordered_map<string, vector<pair<int, string>>> storage;
	TimeMap() {
		storage = {};
	}

	void set(string key, string value, int timestamp) {
		if (storage.find(key) == storage.end()) {
			vector<pair<int, string>> sub;
			storage[key] = sub;
		}
		storage[key].push_back(pair<int, string>(timestamp, value));
	}

	string get(string key, int timestamp) {
		if (storage.find(key) == storage.end()) return "";
		auto& sub = storage[key];
		int l = 0, r = sub.size() - 1;
		string ans = "";
		while (l <= r) {
			int m = l + (r - l) / 2;
			if (sub[m].first <= timestamp) {
				ans = sub[m].second;
				l = m + 1;
			}
			else r = m - 1;
		}
		return ans;

	}
};

/**
 * Your TimeMap object will be instantiated and called as such:
 * TimeMap* obj = new TimeMap();
 * obj->set(key,value,timestamp);
 * string param_2 = obj->get(key,timestamp);
 */
