class Solution {
    public int[] dailyTemperatures(int[] T) {
        int[] ans = new int[T.length];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0; i < T.length; i++) {
            while(!stack.isEmpty() && T[stack.peek()] < T[i]) {
                int index = stack.pop();
                ans[index] = i - index;
            }
            stack.push(i);
        }
        return ans;
    }
}


#include <stack>
#include <vector>

using namespace std;

class Solution {
public:
	vector<int> dailyTemperatures(vector<int>& temperatures) {
		stack<pair<int, int>> stack;
		vector<int> ans;
		for (int i = temperatures.size() - 1; i >= 0; i--) {
			while (!stack.empty() && stack.top().first <= temperatures[i]) stack.pop();
			if (!stack.empty()) ans.push_back(stack.top().second - i);
			else ans.push_back(0);
			stack.push({ temperatures[i], i });
		}
		reverse(ans.begin(), ans.end());
		return ans;
	}
};


#include <deque>
#include <vector>

using std::vector;

class Solution {
public:
	vector<int> dailyTemperatures(vector<int>& T) {
		std::deque<int> s;
		vector<int> ans;
		for (int i = size(T) - 1; i >= 0; i--) {
			while (!s.empty() && T[s.back()] <= T[i]) s.pop_back();
			if (s.empty()) ans.push_back(0);
			else ans.push_back(s.back() - i);
			s.push_back(i);
		}
		std::reverse(ans.begin(), ans.end());
		return ans;
	}
};
