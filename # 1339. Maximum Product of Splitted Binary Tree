package com.leetcode.problems;

import java.util.HashMap;
import java.util.Map;

import com.leetcode.model.TreeNode;

public class Question1339 {
	class Solution {
		long ans = 0;
		Map<TreeNode, Long> map = new HashMap<>();

		public int maxProduct(TreeNode root) {
			if (root == null)
				return 0;
			int mod = 1_000_000_007;
			long sum = getSum(root);
			getAns(root, sum);
			return (int) (ans % mod);
		}

		private long getSum(TreeNode node) {
			if (node == null)
				return 0;
			long ans = node.val + getSum(node.left) + getSum(node.right);
			map.put(node, ans);
			return ans;
		}

		private void getAns(TreeNode node, long sum) {
			if (node == null)
				return;
			getAns(node.left, sum);
			getAns(node.right, sum);
			if (node.left == null && node.right == null)
				return;
			if (node.left == null) {
				long val = map.get(node.right);
				ans = Math.max(ans, val * (sum - val));
			} else if (node.right == null) {
				long val = map.get(node.left);
				ans = Math.max(ans, val * (sum - val));
			} else {
				long val1 = map.get(node.left), val2 = map.get(node.right);
				ans = Math.max(ans, Math.max(val1 * (sum - val1), val2 * (sum - val2)));
			}

		}
	}
}


#include "TreeNode.h"
#include <utility>

class Solution {
public:
    long long ans = 0;
    int maxProduct(TreeNode* root) {
        process(root);
        long long sum = root->val;
        helper(root, sum);
        return ans % 1000000007;
    }
private:
    void process(TreeNode* node) {
        if (!node) return;
        process(node->left);
        process(node->right);
        if (node->left) node->val += node->left->val;
        if (node->right) node->val += node->right->val;
    }
    void helper(TreeNode* node, long long sum) {
        if (!node) return;
        long long rem = sum - node->val;
        long long cand = rem * node->val;
        ans = std::max(ans, cand);
        helper(node->left, sum);
        helper(node->right, sum);
    }
};
