```
import java.util.Arrays;

public class Question956 {
	class Solution {
		public int tallestBillboard(int[] rods) {
			int n = rods.length;
			int[][] dp = new int[n + 1][50001];
			for (int[] row : dp) {
				Arrays.fill(row, -1);
			}
			dp[0][0] = 0;
			for (int i = 1; i <= n; i++) {
				int h = rods[i - 1];
				for (int j = 0; j + h <= 5000; j++) {
					if (dp[i - 1][j] < 0) {
						continue;
					}
					dp[i][j] = Math.max(dp[i][j], dp[i - 1][j]);
					dp[i][j + h] = Math.max(dp[i][j + h], dp[i - 1][j]);
					dp[i][Math.abs(j - h)] = Math.max(dp[i][Math.abs(j - h)], dp[i - 1][j] + Math.min(j, h));
				}
			}
			return dp[n][0];
		}
	}
}
```


#include <vector>
using namespace std;

class Solution {
	int dp[1001][10001];
public:
	int tallestBillboard(vector<int>& rods) {
		int n = size(rods);
		memset(dp, -1, sizeof(dp));
		return helper(0, n, 0, rods);
	}
private:
	int helper(int i, int n, int d, vector<int>& rods) {
		if (i == n) {
			if (d == 0) return 0;
			return INT_MIN;
		}
		if (dp[i][5000 + d] != -1) return dp[i][5000 + d];
		int notpick = helper(i + 1, n, d, rods);
		int pick1 = rods[i] + helper(i + 1, n, d + rods[i], rods);
		int pick2 = helper(i + 1, n, d - rods[i], rods);
		return dp[i][5000 + d] = max({ notpick, pick1, pick2 });
	}
};
