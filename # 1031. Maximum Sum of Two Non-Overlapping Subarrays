package com.leetcode.problems;

public class Question1031 {
	class Solution {
		public int maxSumTwoNoOverlap(int[] A, int L, int M) {
			return Math.max(getMaxSum(A, L, M), getMaxSum(A, M, L));
		}

		private int getMaxSum(int[] A, int L, int M) {
			int[] dp = new int[A.length];
			int val = 0, max = 0;
			for (int i = 0; i < L; i++) {
				val += A[i];
			}
			max = val;
			dp[L - 1] = max;
			for (int i = L; i < A.length; i++) {
				val = val - A[i - L] + A[i];
				max = Math.max(max, val);
				dp[i] = max;
			}
			val = 0;
			max = 0;
			for (int i = L; i < M + L; i++) {
				val += A[i];
			}
			max = val + dp[L - 1];
			for (int i = M + L; i < A.length; i++) {
				val = val - A[i - M] + A[i];
				max = Math.max(max, val + dp[i - M]);
			}
			return max;
		}
	}
}
