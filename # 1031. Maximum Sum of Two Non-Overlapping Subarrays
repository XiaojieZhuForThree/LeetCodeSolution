package com.leetcode.problems;

public class Question1031 {
	class Solution {
		public int maxSumTwoNoOverlap(int[] A, int L, int M) {
			return Math.max(getMaxSum(A, L, M), getMaxSum(A, M, L));
		}

		private int getMaxSum(int[] A, int L, int M) {
			int[] dp = new int[A.length];
			int max = 0, cur = 0;
			for (int i = 0; i < L; i++) {
				max += A[i];
				cur = max;
			}
			dp[L - 1] = max;
			for (int i = L; i < A.length; i++) {
				cur = cur - A[i - L] + A[i];
				max = Math.max(max, cur);
				dp[i] = max;
			}
			cur = 0;
			for (int i = L; i < L + M; i++) {
				cur += A[i];
			}
			max = cur + dp[L - 1];
			for (int i = L + M; i < A.length; i++) {
				cur = cur - A[i - M] + A[i];
				max = Math.max(max, cur + dp[i - M]);
			}
			return max;
		}
	}
}
