package com.leetcode.problems;

public class Question1031 {
	class Solution {
		public int maxSumTwoNoOverlap(int[] A, int L, int M) {
			return Math.max(getVal(A, L, M), getVal(A, M, L));
		}

		private int getVal(int[] A, int L, int M) {
			int[] dp = new int[A.length];
			int curL = 0;
			for (int i = 0; i < L; i++) {
				curL += A[i];
			}
			dp[L - 1] = curL;
			int max = curL;
			for (int i = L; i < A.length; i++) {
				curL = curL - A[i - L] + A[i];
				max = Math.max(curL, max);
				dp[i] = max;
			}
			int curM = 0;
			for (int i = L; i < L + M; i++) {
				curM += A[i];
			}
			max = curM + dp[L - 1];
			for (int i = L + M; i < A.length; i++) {
				curM = curM - A[i - M] + A[i];
				max = Math.max(max, curM + dp[i - M]);
			}
			return max;
		}
	}
}
