package com.leetcode.problems;

import java.util.ArrayDeque;
import java.util.Deque;

import com.leetcode.api.Node;

public class Question116 {

	class Solution1 {
		public Node connect(Node root) {
			if (root == null) {
				return null;
			}
			Deque<Node> queue = new ArrayDeque<>();
			queue.offer(root);
			while (!queue.isEmpty()) {
				int size = queue.size();
				for (int i = 0; i < size; i++) {
					Node node = queue.pollFirst();
					if (i < size - 1) {
						node.next = queue.peekFirst();
					}
					if (node.left != null) {
						queue.offer(node.left);
					}
					if (node.right != null) {
						queue.offer(node.right);
					}
				}
			}
			return root;
		}
	}

	class Solution2 {
		public Node connect(Node root) {
			if (root == null) {
				return root;
			}
			Node start = root;
			while (start.left != null) {
				Node trav = start;
				while (trav != null) {
					Node node1 = trav.left;
					Node node2 = trav.right;
					node1.next = node2;
					if (trav.next != null) {
						Node node3 = trav.next.left;
						node2.next = node3;
					}
					trav = trav.next;
				}
				start = start.left;
			}
			return root;
		}
	}

	class Solution3 {
		public Node connect(Node root) {
			if (root == null) {
				return root;
			}
			if (root.left != null) {
				root.left.next = root.right;
			}
			if (root.right != null && root.next != null) {
				root.right.next = root.next.left;
			}
			connect(root.left);
			connect(root.right);
			return root;
		}
	}
}
