package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question1291 {
	class Solution {
		public List<Integer> sequentialDigits(int low, int high) {
			List<Integer> ans = new ArrayList<>();
			int lowerBound = findDigits(low);
			int higherBound = findDigits(high);
			for (; lowerBound <= higherBound; lowerBound++) {
				ans.addAll(generateSequentialDigits(lowerBound, low, high));

			}
			return ans;
		}

		private final int findDigits(int i) {
			int ans = 0;
			while (i > 0) {
				ans++;
				i /= 10;
			}
			return ans;
		}

		private final List<Integer> generateSequentialDigits(int bound, int low, int high) {
			List<Integer> ans = new ArrayList<>();
			for (int i = 1; i + bound - 1 < 10; i++) {
				int number = generateNum(i, bound);
				if (low <= number && number <= high) {
					ans.add(number);
				}
			}
			return ans;
		}

		private final int generateNum(int i, int bound) {
			int j = 0;
			for (int m = 0; m < bound; m++) {
				j *= 10;
				j += i++;
			}
			return j;
		}
	}
}


#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
	vector<int> sequentialDigits(int low, int high) {
		vector<int> ans;
		for (int i = 1; i < 10; i++) {
			long long cur = 0, ctr = i;
			while (cur * 10 + ctr <= high && ctr < 10) {
				cur = cur * 10 + ctr;
				ctr++;
				if (cur >= low) ans.push_back(cur);
			}
		}
		sort(ans.begin(), ans.end());
		return ans;
	}
};
