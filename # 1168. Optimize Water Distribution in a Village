class Solution {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        int[] table = new int[n + 1];
        for (int i = 0; i < n + 1; i++) {
          table[i] = i;
        }

        Arrays.sort(pipes, new Comparator<int[]>() {
          @Override
          public int compare(int[] a, int[] b) {
            return a[2] - b[2];
          }
        });

        int totalCost = 0;

        for (int i = 0; i < n; i++) {
          totalCost += wells[i];
        }

        for (int i = 0; i < pipes.length; i++) {
          int[] pipe = pipes[i];
          int c = pipe[2];
          int n1 = find(table, pipe[0]);
          int n2 = find(table, pipe[1]);

          if (n1 == n2) {
            continue;
          }

          if (wells[n1 - 1] > c || wells[n2 - 1] > c) {
            // union if 
            if (wells[n1 - 1] > wells[n2 - 1]) {
              union(table, n2, n1);
              totalCost += c;
              totalCost -= wells[n1 - 1];
            } else {
              union(table, n1, n2);
              totalCost += c;
              totalCost -= wells[n2 - 1];
            }
          }
        }
        return totalCost;
      }

      private void union(int[] table, int a, int b) {
        int n1 = find(table, a);
        int n2 = find(table, b);
        table[n2] = n1;
      }

      private int find(int[] table, int a) {
        if (a != table[a]) {
          table[a] = find(table, table[a]);
        }
        return table[a];
      }
}
