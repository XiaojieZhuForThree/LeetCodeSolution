class Solution {
    public int minCostToSupplyWater(int n, int[] wells, int[][] pipes) {
        int[] pars = new int[n];
        int ans = 0;
        for (int i = 0; i < n; i++) {
            pars[i] = i;
            ans += wells[i];
        }
        Arrays.sort(pipes, new Comparator<int[]>(){
            public int compare(int[] o1, int[] o2){
                return o1[2] - o2[2];
            }
        });
        for (int[] i : pipes) {
            int a = i[0], b = i[1];
            int n1 = find(a-1, pars), n2 = find(b-1, pars);
            if (n1 == n2) {
                continue;
            } else {
                if (wells[n1] > i[2] || wells[n2] > i[2]) {
                    if (wells[n1] < wells[n2]) {
                        union(n1, n2, pars);
                        ans -= wells[n2];
                        ans += i[2];
                    } else {
                        union(n2, n1, pars);
                        ans -= wells[n1];
                        ans += i[2];                        
                    }
                }
            }
        }
        return ans;
    }
    private void union(int a, int b, int[] pars) {
        int n1 = pars[a], n2 = pars[b];
        if (n1 != n2) {
            pars[n2] = n1;
        }
    }
    private int find(int n, int[] pars) {
        if (n != pars[n]) {
            pars[n] = find(pars[n], pars);
        }
        return pars[n];
    }
}
