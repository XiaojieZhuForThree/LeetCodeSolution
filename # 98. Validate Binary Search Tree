package com.leetcode.problems;

import com.leetcode.api.TreeNode;

public class Question98 {
	class Solution {
		public boolean isValidBST(TreeNode root) {
			if (root == null) {
				return true;
			}
			if (root.left == null && root.right == null) {
				return true;
			}
			if (!isValidBST(root.left) || !isValidBST(root.right)) {
				return false;
			}
			if (root.left == null) {
				return root.val < getLeft(root.right).val;
			} else if (root.right == null) {
				return root.val > getRight(root.left).val;
			} else {
				return root.val > getRight(root.left).val && root.val < getLeft(root.right).val;
			}
		}

		private TreeNode getRight(TreeNode node) {
			while (node.right != null) {
				node = node.right;
			}
			return node;
		}

		private TreeNode getLeft(TreeNode node) {
			while (node.left != null) {
				node = node.left;
			}
			return node;
		}
	}
}


from typing import Optional
from data.TreeNode import TreeNode


class Solution:
    def isValidBST(self, root: Optional[TreeNode]) -> bool:
        vals = self.getVals(root)
        return vals == sorted(set(vals))

    def getVals(self, node):
        if not node:
            return []
        return self.getVals(node.left) + [node.val] + self.getVals(node.right)
