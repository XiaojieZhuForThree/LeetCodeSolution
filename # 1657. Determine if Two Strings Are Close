package com.leetcode.problems;

public class Question1657 {
	class Solution {
		public boolean closeStrings(String word1, String word2) {
			if (word1.length() != word2.length()) {
				return false;
			}
			int[] chars1 = new int[26];
			int[] chars2 = new int[26];
			for (int i = 0; i < word1.length(); i++) {
				chars1[word1.charAt(i) - 'a']++;
				chars2[word2.charAt(i) - 'a']++;
			}
			for (int i = 0; i < 26; i++) {
				if (chars1[i] == chars2[i]) {
					continue;
				}
				if (chars1[i] == 0 || chars2[i] == 0) {
					return false;
				}
				boolean canSwap = false;
				for (int j = i + 1; j < 26; j++) {
					if (chars1[j] == chars2[i]) {
						chars1[j] = chars1[i];
						chars1[i] = chars2[i];
						canSwap = true;
						break;
					}
				}
				if (!canSwap) {
					return false;
				}
				continue;
			}
			return true;
		}
	}
}


#include <string>
#include <unordered_map>
using namespace std;

class Solution {
public:
	bool closeStrings(string word1, string word2) {
		if (word1.size() != word2.size()) return false;
		unordered_map<char, int> w1, w2;
		unordered_map<int, int> c1, c2;
		for (int i = 0; i < word1.size(); i++) {
			w1[word1[i]]++;
			w2[word2[i]]++;
		}
		for (auto& i : w1) {
			if (!w2.count(i.first)) return false;
		}
		for (auto& i : w2) {
			if (!w1.count(i.first)) return false;
		}
		for (auto& i : w1) c1[i.second]++;
		for (auto& i : w2) c2[i.second]++;

		for (auto& i : c1) {
			if (c2[i.first] != i.second) return false;
		}
		for (auto& i : c2) {
			if (c1[i.first] != i.second) return false;
		}
		return true;
	}
};


#include <string>
#include <unordered_map>
using std::string;


class Solution {
public:
	bool closeStrings(string word1, string word2) {
		if (size(word1) != size(word2)) return false;
		std::unordered_map<char, int> m1, m2;
		std::unordered_map<int, int> c1, c2;
		for (int i = 0; i < size(word1); i++) {
			m1[word1[i]]++;
			m2[word2[i]]++;
		}
		for (auto& p : m1) {
			if (!m2.count(p.first)) return false;
			c1[p.second]++;
		}
		for (auto& p : m2) {
			if (!m1.count(p.first)) return false;
			c2[p.second]++;
		}
		for (auto& p : c1) {
			if (!c2.count(p.first) || c2[p.first] != p.second) return false;
		}
		for (auto& p : c2) {
			if (!c1.count(p.first) || c1[p.first] != p.second) return false;
		}
		return true;
	}
};
