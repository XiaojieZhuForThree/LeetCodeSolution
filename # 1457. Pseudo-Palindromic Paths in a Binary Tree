package com.leetcode.problems;

import com.leetcode.api.TreeNode;

public class Question1457 {
	class Solution {
		int ans = 0;

		public int pseudoPalindromicPaths(TreeNode root) {
			int[] container = new int[10];
			dfs(root, container);
			return ans;
		}

		private void dfs(TreeNode node, int[] container) {
			if (node == null) {
				return;
			}
			if (node.left == null && node.right == null) {
				container[node.val]++;
				if (isValid(container)) {
					ans++;
				}
				container[node.val]--;
				return;
			} else {
				container[node.val]++;
				dfs(node.left, container);
				dfs(node.right, container);
				container[node.val]--;
			}
		}

		private boolean isValid(int[] container) {
			int odd = 0;
			for (int i : container) {
				if (i % 2 == 1) {
					odd++;
				}
			}
			return odd <= 1;
		}
	}
}


#include "TreeNode.cpp"
#include <vector>

using namespace std;

class Solution {
public:
    int pseudoPalindromicPaths(TreeNode* root) {
        vector<int> log;
        log.resize(9, 0);
        return dfs(root, log);
    }
private:
    int dfs(TreeNode* node, vector<int> log) {
        if (!node) {
            return 0;
        }
        log[node->val - 1]++;
        if (!node->left && !node->right) return canConvert(log);
        int ans = 0;
        ans += dfs(node->left, log);
        ans += dfs(node->right, log);
        log[node->val - 1]--;
        return ans;
    }
    int canConvert(vector<int> log) {
        bool used = false;
        for (int i : log) {
            if (i % 2 == 1) {
                if (used) return 0;
                else used = true;
            }
        }
        return 1;
    }
};
