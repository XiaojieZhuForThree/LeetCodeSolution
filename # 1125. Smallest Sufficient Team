package problems;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question1125 {
	class Solution {
		public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {
			int m = req_skills.length, n = people.size();
			Map<Integer, Set<Integer>> map = new HashMap<>();
			map.put(0, new HashSet<>());
			Map<String, Integer> ref = new HashMap<>();
			for (int i = 0; i < req_skills.length; i++) {
				ref.put(req_skills[i], i);
			}
			for (int i = 0; i < n; i++) {
				int num = 0;
				for (String s : people.get(i)) {
					int index = ref.get(s);	
					int add = 1 << index;
					num = num | add;
				}
				for (int j = 0; j < (1 << m); j++) {
					if (map.containsKey(j)) {	
						int newSeq = j | num;
						if (!map.containsKey(newSeq) || map.get(newSeq).size() > 1 + map.get(j).size()) {
							Set<Integer> set = new HashSet<>(map.get(j));
							set.add(i);
							map.put(newSeq, set);
						}
					}	
				}
			}
			int[] ans = new int[map.get((1 << m) - 1).size()];
			int i = 0;
			for (int j : map.get((1 << m) - 1)) {
				ans[i++] = j;
			}
			return ans;
		}
	}
}


#include <vector>
#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
	vector<int> smallestSufficientTeam(vector<string>& req_skills, vector<vector<string>>& people) {
		const int n = size(req_skills);
		const int target = (1 << n) - 1;
		unordered_map<string, int> map;
		for (int i = 0; i < n; i++) map[req_skills[i]] = i;
		vector<int> skills;
		for (const auto& p : people) {
			int mask = 0;
			for (const string& s : p) mask |= (1 << map[s]);
			skills.push_back(mask);
		}

		vector<int> dp((1 << n), size(people));
		vector<pair<int, int>> pt((1 << n));
		dp[0] = 0;

		for (int i = 0; i < size(people); i++) {
			const int k = skills[i];
			if (k == 0) continue;
			for (int j = target; j >= 0; j--) {
				if (dp[j] + 1 < dp[j | k]) {
					dp[j | k] = dp[j] + 1;
					pt[j | k] = { j, i };
				}
			}
		}

		vector<int> ans;
		int t = target;
		while (t > 0) {
			ans.push_back(pt[t].second);
			t = pt[t].first;
		}
		return ans;
	}
};
