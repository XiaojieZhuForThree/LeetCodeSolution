package problems;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Question1125 {
	class Solution {
		public int[] smallestSufficientTeam(String[] req_skills, List<List<String>> people) {
			int m = req_skills.length, n = people.size();
			Map<Integer, Set<Integer>> map = new HashMap<>();
			map.put(0, new HashSet<>());
			Map<String, Integer> ref = new HashMap<>();
			for (int i = 0; i < req_skills.length; i++) {
				ref.put(req_skills[i], i);
			}
			for (int i = 0; i < n; i++) {
				int num = 0;
				for (String s : people.get(i)) {
					int index = ref.get(s);	
					int add = 1 << index;
					num = num | add;
				}
				for (int j = 0; j < (1 << m); j++) {
					if (map.containsKey(j)) {	
						int newSeq = j | num;
						if (!map.containsKey(newSeq) || map.get(newSeq).size() > 1 + map.get(j).size()) {
							Set<Integer> set = new HashSet<>(map.get(j));
							set.add(i);
							map.put(newSeq, set);
						}
					}	
				}
			}
			int[] ans = new int[map.get((1 << m) - 1).size()];
			int i = 0;
			for (int j : map.get((1 << m) - 1)) {
				ans[i++] = j;
			}
			return ans;
		}
	}
}


#include <vector>
#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
	vector<int> ans;
	int target, m;
	vector<int> smallestSufficientTeam(vector<string>& rs, vector<vector<string>>& p) {
		int n = rs.size();
		target = (1 << n) - 1;
		vector< pair<int, int> > ps;
		unordered_map<string, int>mp;
		unordered_map<int, int> mp1;
		for (int i = 0; i < n; i++)
			mp[rs[i]] = i;

		for (int i = 0; i < p.size(); i++) {
			int mask = 0;
			for (int j = 0; j < p[i].size(); j++) {
				mask |= (1 << mp[p[i][j]]);
			}
			if (mask == 0 || (mp1.find(mask) != mp1.end())) continue;
			ps.push_back({ i, mask });
			mp1[mask] = i;
		}
		m = ps.size();
		ans.clear();
		vector<int>temp;
		dfs(0, 0, ps, temp);
		return ans;
	}

	void dfs(int i, int mask, vector<pair<int, int>>& ps, vector<int>& temp) {
		if (mask == target) {
			if (ans.size() == 0 || ans.size() > temp.size()) {
				ans = temp;
			}
			return;
		}
		if (i >= m || (ans.size() != 0 && ans.size() <= temp.size())) return;
		dfs(i + 1, mask, ps, temp);
		if ((mask | ps[i].second) != mask) {
			temp.push_back(ps[i].first);
			dfs(i + 1, (mask | ps[i].second), ps, temp);
			temp.pop_back();
		}
	}
};
