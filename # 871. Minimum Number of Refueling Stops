package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question871 {
	class Solution1 {
		public int minRefuelStops(int target, int startFuel, int[][] stations) {
			long[] dp = new long[stations.length + 1];
			dp[0] = startFuel;
			for (int i = 0; i < stations.length; i++) {
				for (int j = i; j >= 0 && dp[j] >= stations[i][0]; j--) {
					dp[j + 1] = Math.max(dp[j + 1], dp[j] + stations[i][1]);
				}
			}
			for (int i = 0; i < dp.length; i++) {
				if (dp[i] >= target)
					return i;
			}
			return -1;
		}
	}

	class Solution2 {
		public int minRefuelStops(int target, int startFuel, int[][] stations) {
			final PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
			int ans = 0, i = 0;
			while (startFuel < target) {
				ans++;
				for (; i < stations.length && startFuel >= stations[i][0]; i++)
					pq.offer(stations[i][1]);
				if (pq.isEmpty())
					return -1;
				startFuel += pq.poll();
			}
			return ans;
		}
	}
}
