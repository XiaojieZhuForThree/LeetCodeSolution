package com.leetcode.problems;

import java.util.PriorityQueue;

public class Question871 {
	class Solution1 {
		public int minRefuelStops(int target, int startFuel, int[][] stations) {
			long[] dp = new long[stations.length + 1];
			dp[0] = startFuel;
			for (int i = 0; i < stations.length; i++) {
				for (int j = i; j >= 0 && dp[j] >= stations[i][0]; j--) {
					dp[j + 1] = Math.max(dp[j + 1], dp[j] + stations[i][1]);
				}
			}
			for (int i = 0; i < dp.length; i++) {
				if (dp[i] >= target)
					return i;
			}
			return -1;
		}
	}

	class Solution2 {
		public int minRefuelStops(int target, int startFuel, int[][] stations) {
			final PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
			int ans = 0, i = 0;
			while (startFuel < target) {
				ans++;
				for (; i < stations.length && startFuel >= stations[i][0]; i++)
					pq.offer(stations[i][1]);
				if (pq.isEmpty())
					return -1;
				startFuel += pq.poll();
			}
			return ans;
		}
	}
}


from typing import List


class Solution:
    def minRefuelStops(self, target: int, startFuel: int, stations: List[List[int]]) -> int:
        ans = float('inf')
        stations = [[0, startFuel]] + stations + [[target, 0]]
        rec = {0: startFuel}
        for i in range(1, len(stations)):
            dist = stations[i][0] - stations[i - 1][0]
            new_rec = {}
            for j in rec:
                if rec[j] < dist:
                    continue
                if j in new_rec:
                    new_rec[j] = max(new_rec[j], rec[j] - dist)
                else:
                    new_rec[j] = rec[j] - dist
                if j + 1 in new_rec:
                    new_rec[j + 1] = max(new_rec[j + 1], rec[j] - dist + stations[i][1])
                else:
                    new_rec[j + 1] = rec[j] - dist + stations[i][1]
            rec = new_rec
        if not rec:
            return -1
        return min(rec.keys())
