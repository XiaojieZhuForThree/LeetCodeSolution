package com.leetcode.problems;

import java.util.ArrayList;
import java.util.List;

public class Question228 {
	class Solution {
		public List<String> summaryRanges(int[] nums) {
			List<String> list = new ArrayList<>();
			if (nums == null || nums.length == 0) {
				return list;
			}
			int left = nums[0], right = nums[0];
			for (int i = 1; i < nums.length; i++) {
				if (nums[i] == right + 1) {
					right = nums[i];
				} else {
					if (left == right) {
						list.add(Integer.toString(left));
					} else {
						list.add(left + "->" + right);
					}
					left = nums[i];
					right = nums[i];
				}
			}
			if (left == right) {
				list.add(Integer.toString(left));
			} else {
				list.add(left + "->" + right);
			}
			return list;
		}
	}
}


class Solution:
    def summaryRanges(self, nums: List[int]) -> List[str]:
        if not nums:
            return []
        ans = []
        start = str(nums[0])
        init = nums[0]
        for i in range(1, len(nums)):
            if nums[i] != nums[i-1] + 1:
                if nums[i - 1] == init:
                    ans.append(start)
                else:
                    ans.append(start + "->" + str(nums[i - 1]))
                init = nums[i]
                start = str(nums[i])
        last = nums[len(nums) - 1]
        if last == init:
            ans.append(str(last))
        else:
            ans.append(start + "->" + str(last))
        return ans
