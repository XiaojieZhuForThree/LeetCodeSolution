#include <unordered_map>
#include "TreeNode.h"
using std::unordered_map;
using std::vector;

class Solution {
public:
	unordered_map<int, vector<TreeNode*>> map;
	std::vector<TreeNode*> allPossibleFBT(int n) {
		if (map.count(n)) return map[n];
		if (n % 2 == 0) return {};
		if (n == 1) return { new TreeNode(0) };
		std::vector<TreeNode*> ans;
		for (int i = 1; i < n - 1; i += 2) {
			vector<TreeNode*> ls = allPossibleFBT(i), rs = allPossibleFBT(n - 1 - i);
			for (TreeNode* l : ls) {
				for (TreeNode* r : rs) {
					TreeNode* head = new TreeNode(0, l, r);
					ans.push_back(head);
				}
			}
		}
		map[n] = ans;
		return ans;
	}
};
