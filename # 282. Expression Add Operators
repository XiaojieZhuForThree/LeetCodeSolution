class Solution {
    public List<String> addOperators(String num, int target) {
        List<String> res = new ArrayList<>();
        if (num == null || num.length() == 0) {
            return res;
        }
        dfs(res, new StringBuilder(), num, 0, target, 0, 0);
        return res;
    }
    void dfs(List<String> res, StringBuilder sb, String num, int index, int target, long prev, long cur) {
        if (index == num.length()) {
            if (prev == target) {
                res.add(sb.toString());
            }
            return;
        }
        int len = sb.length();
        for (int i = index; i < num.length(); i++) {
            if (num.charAt(index) == '0' && i != index) {
                break;
            }
            long next = Long.parseLong(num.substring(index, i+1));
            if (index == 0) {
                dfs(res, sb.append(next), num, i+1, target, next, next);
                sb.setLength(len);
            } else {
                dfs(res, sb.append('+').append(next), num, i+1, target, prev + next, next);
                sb.setLength(len);
                dfs(res, sb.append('-').append(next), num, i+1, target, prev - next, -next);
                sb.setLength(len);
                dfs(res, sb.append('*').append(next), num, i+1, target, prev - cur + cur*next, cur*next);
                sb.setLength(len);
            }
        }
    }
}
