package com.leetcode.problems;

import java.util.Arrays;

public class Question132 {
	class Solution {
		public int minCut(String s) {
			if (s == null || s.length() == 0)
				return 0;
			int n = s.length();
			boolean[][] isPali = new boolean[n][n];
			for (int i = 0; i < n; i++)
				popTable(s, i, isPali);
			int[] dp = new int[n];
			Arrays.fill(dp, -1);
			return helper(s, 0, dp, isPali);
		}

		private void popTable(String s, int i, boolean[][] isPali) {
			int l = i, r = i;
			while (l >= 0 && r < s.length()) {
				if (s.charAt(l) != s.charAt(r))
					break;
				isPali[l][r] = true;
				l--;
				r++;
			}
			l = i;
			r = i + 1;
			while (l >= 0 && r < s.length()) {
				if (s.charAt(l) != s.charAt(r))
					break;
				isPali[l][r] = true;
				l--;
				r++;
			}
			return;
		}

		private int helper(String s, int i, int[] dp, boolean[][] isPali) {
			if (i >= s.length())
				return -1;
			if (dp[i] != -1)
				return dp[i];
			int ans = Integer.MAX_VALUE;
			for (int j = i; j < s.length(); j++) {
				if (isPali[i][j])
					ans = Math.min(ans, 1 + helper(s, j + 1, dp, isPali));
			}
			dp[i] = ans;
			return ans;
		}
	}
}
