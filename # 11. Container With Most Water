package com.leetcode.problems;

public class Question11 {
	class Solution {
		public int maxArea(int[] height) {
			int left = 0, right = height.length - 1;
			int ans = 0;
			while (left < right) {
				ans = Math.max(ans, Math.min(height[left], height[right]) * (right - left));
				if (height[left] < height[right]) {
					left++;
				} else {
					right--;
				}
			}
			return ans;
		}
	}
}

class Solution:
    def maxArea(self, height: List[int]) -> int:
        l = 0
        r = len(height) - 1
        ans = 0
        while l < r:
            ans = max(ans, (r - l) * min(height[l], height[r]))
            if height[l] < height[r]:
                l += 1
            else:
                r -= 1
        return ans
