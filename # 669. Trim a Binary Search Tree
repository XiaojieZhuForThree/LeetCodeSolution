package com.leetcode.problems;

import com.leetcode.api.TreeNode;

public class Question669 {
	class Solution {
		public TreeNode trimBST(TreeNode root, int low, int high) {
			if (root == null) {
				return root;
			}
			root.left = trimBST(root.left, low, high);
			root.right = trimBST(root.right, low, high);
			if (root.val < low || root.val > high) {
				return root.left == null ? root.right : root.left;
			}
			return root;
		}
	}
}


# -*- coding: utf-8 -*-
"""
Created on Thu Apr 14 19:36:55 2022

@author: xiaoj
"""

from typing import Optional

# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
        
class Solution:
    def trimBST(self, root: Optional[TreeNode], low: int, high: int) -> Optional[TreeNode]:
        if not root:
            return root
        if root.val < low:
            return self.trimBST(root.right, low, high)
        if root.val > high:
            return self.trimBST(root.left, low, high)
        root.left = self.trimBST(root.left, low, high)
        root.right = self.trimBST(root.right, low, high)
        return root
