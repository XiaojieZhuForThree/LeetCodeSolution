package com.leetcode.problems;

public class Question36 {
	class Solution {
		public boolean isValidSudoku(char[][] board) {
			if (!validRows(board))
				return false;
			if (!validColumns(board))
				return false;
			for (int i = 0; i < 9; i += 3) {
				for (int j = 0; j < 9; j += 3) {
					if (!validSquare(board, i, j))
						return false;
				}
			}
			return true;
		}

		private boolean validRows(char[][] board) {
			for (char[] row : board) {
				int[] seen = new int[10];
				for (char c : row) {
					if (c == '.')
						continue;
					if (c < '0' || c > '9')
						return false;
					if (seen[c - '0'] == 1)
						return false;
					seen[c - '0'] = 1;
				}
			}

			return true;
		}

		private boolean validColumns(char[][] board) {
			for (int i = 0; i < 9; i++) {
				int[] seen = new int[10];
				for (int j = 0; j < 9; j++) {
					char c = board[j][i];
					if (c == '.')
						continue;
					if (c < '0' || c > '9')
						return false;
					if (seen[c - '0'] == 1)
						return false;
					seen[c - '0'] = 1;
				}
			}
			return true;
		}

		private boolean validSquare(char[][] board, int row, int col) {
			int[] seen = new int[10];
			for (int i = row; i < row + 3; i++) {
				for (int j = col; j < col + 3; j++) {
					char c = board[i][j];
					if (c == '.')
						continue;
					if (c < '0' || c > '9')
						return false;
					if (seen[c - '0'] == 1)
						return false;
					seen[c - '0'] = 1;
				}
			}
			return true;
		}
	}
}


#include <vector>
#include <unordered_set>
using namespace std;

class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        unordered_set<char> set;
        if (!isRowValid(board, set)) return false;
        if (!isColValid(board, set)) return false;
        for (int i = 0; i < 9; i += 3) {
            for (int j = 0; j < 9; j += 3) {
                if (!isPatchValid(board, i, j, set)) return false;
            }
        }
        return true;
    }

private:
    bool isRowValid(vector<vector<char>>& board, unordered_set<char>& set) {
        for (int i = 0; i < 9; i++) {
            set.clear();
            for (int j = 0; j < 9; j++) {
                char c = board[i][j];
                if (c == '.') continue;
                if (set.count(c)) return false;
                set.insert(c);
            }
        }
        return true;
    }

    bool isColValid(vector<vector<char>>& board, unordered_set<char>& set) {
        for (int i = 0; i < 9; i++) {
            set.clear();
            for (int j = 0; j < 9; j++) {
                char c = board[j][i];
                if (c == '.') continue;
                if (set.count(c)) return false;
                set.insert(c);
            }
        }
        return true;
    }

    bool isPatchValid(vector<vector<char>>& board, int i, int j, unordered_set<char>& set) {
        set.clear();
        for (int m = 0; m < 3; m++) {
            for (int n = 0; n < 3; n++) {
                char c = board[i + m][j + n];
                if (c == '.') continue;
                if (set.count(c)) return false;
                set.insert(c);
            }
        }
        return true;
    }
};
