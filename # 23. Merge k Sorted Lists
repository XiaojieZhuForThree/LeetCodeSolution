package com.leetcode.problems;

import java.util.PriorityQueue;

import com.leetcode.api.ListNode;

public class Question23 {
	class Solution {
		public ListNode mergeKLists(ListNode[] lists) {
			PriorityQueue<ListNode> pq = new PriorityQueue<>((a, b) -> a.val - b.val);
			ListNode head = new ListNode(-1), dummy = head;
			for (ListNode list : lists) {
				if (list == null) {
					continue;
				}
				pq.offer(list);
			}
			while (!pq.isEmpty()) {
				ListNode node = pq.poll();
				dummy.next = node;
				dummy = dummy.next;
				if (node.next != null) {
					pq.offer(node.next);
				}
			}
			dummy.next = null;
			return head.next;
		}
	}
}


# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        queue = []
        for i, node in enumerate(lists):
            if node:
                heapq.heappush(queue, (node.val, i, node))
        root = ListNode(0)
        ptr = root
        while queue:
            _, i, cur = heapq.heappop(queue)
            ptr.next = cur
            ptr = ptr.next
            if cur.next:
                heapq.heappush(queue, (cur.next.val, i, cur.next))
        ptr.next = None
        return root.next
	
	
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
        setattr(ListNode, "__lt__", lambda self, other: self.val <= other.val)
        queue = []
        for node in lists:
            if node:
                heapq.heappush(queue, node)
        root = ListNode(0)
        ptr = root
        while queue:
            cur = heapq.heappop(queue)
            ptr.next = cur
            ptr = ptr.next
            if cur.next:
                heapq.heappush(queue, cur.next)
        ptr.next = None
        return root.next
