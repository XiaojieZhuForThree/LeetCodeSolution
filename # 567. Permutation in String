package com.leetcode.problems;

public class Question567 {
	class Solution {
		public boolean checkInclusion(String s1, String s2) {
			if (s1.length() > s2.length()) {
				return false;
			}
			int[] charsOfS1 = getCharCounts(s1);
			int[] charsOfS2 = getCharCounts(s2.substring(0, s1.length()));
			for (int i = 0, j = s1.length(); j < s2.length(); i++, j++) {
				if (charMatched(charsOfS1, charsOfS2)) {
					return true;
				}
				char remove = s2.charAt(i);
				char add = s2.charAt(j);
				charsOfS2[remove - 'a']--;
				charsOfS2[add - 'a']++;
			}
			return charMatched(charsOfS1, charsOfS2);
		}

		private final int[] getCharCounts(String s) {
			int[] ans = new int[26];
			for (char c : s.toCharArray()) {
				ans[c - 'a']++;
			}
			return ans;
		}

		private final boolean charMatched(int[] charCount1, int[] charCount2) {
			for (int i = 0; i < 26; i++) {
				if (charCount1[i] != charCount2[i]) {
					return false;
				}
			}
			return true;
		}
	}
}


#include <string>
#include <unordered_map>

using namespace std;

class Solution {
public:
	bool checkInclusion(string s1, string s2) {
		unordered_map<char, int> map1, map2;
		for (char c : s1) map1[c]++;
		int i = 0, j = 0;
		for (; j < s2.size(); j++) {
			map2[s2[j]]++;
			if (j - i + 1 > s1.size()) map2[s2[i++]]--;
			if (isEqual(map1, map2)) return true;
		}
		return false;
	}
private:
	bool isEqual(unordered_map<char, int>& map1, unordered_map<char, int>& map2) {
		for (auto& p : map1) {
			if (!map2.count(p.first)) return false;
			if (map2[p.first] != p.second) return false;
		}
		return true;
	}
};
