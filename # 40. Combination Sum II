import java.util.*;

class Solution {
	Set<List<Integer>> ans = new HashSet<>();

	private void getAns(int[] candidates, int i, int target, List<Integer> res) {
		int now = target - candidates[i];
		if (now == 0) {
			res.add(candidates[i]);
			ans.add(res);
		} else if (now < 0) {
			return;
		} else {
			res.add(candidates[i]);
			for (int j = i + 1; j < candidates.length; j++) {
				if (now - candidates[j] >= 0) {
					getAns(candidates, j, now, new ArrayList<>(res));
				}
			}
		}
	}

	public List<List<Integer>> combinationSum2(int[] candidates, int target) {
		Arrays.sort(candidates);
		for (int i = 0; i < candidates.length; i++) {
			getAns(candidates, i, target, new ArrayList<>());
		}
		return new ArrayList<>(ans);
	}
}


#include <vector>
#include <algorithm>
using std::vector;

class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<int> tmp;
        vector<vector<int>> res;

        dfs(candidates, 0, target, tmp, res);
        return res;
    }
private:
    void dfs(vector<int>& nums, int idx, int target, vector<int>& tmp, vector<vector<int>>& res) {
        if (!target) {
            res.push_back(tmp);
            return;
        }
        for (int i = idx;
            i < nums.size() && nums[i] <= target;
            i = upper_bound(nums.begin() + i, nums.end(), nums[i]) - nums.begin()) {
            tmp.push_back(nums[i]);
            dfs(nums, i + 1, target - nums[i], tmp, res);
            tmp.pop_back();
        }
    }
};
