package com.leetcode.problems;

import java.util.HashSet;
import java.util.Set;

public class Question1016 {
	class Solution1 {
		public boolean queryString(String S, int N) {
			for (int i = 1; i <= N; i++) {
				String s = Integer.toBinaryString(i);
				if (!S.contains(s)) {
					return false;
				}
			}
			return true;
		}
	}

	class Solution2 {
		public boolean queryString(String S, int N) {
			Set<Integer> set = new HashSet<>();
			for (int i = 0; i < S.length(); i++) {
				if (S.charAt(i) == '1') {
					int num = 0;
					for (int j = i; j < S.length(); j++) {
						num = num * 2 + (S.charAt(j) - '0');
						if (num <= 1000000000) {
							set.add(num);
						}
					}
				}
			}
			for (int i = 1; i <= N; i++) {
				if (!set.contains(i)) {
					return false;
				}
			}
			return true;
		}
	}

	class Solution3 {
		public boolean queryString(String S, int N) {
			for (int i = 1; i <= N; i++) {
				String s = Integer.toBinaryString(i);
				boolean contains = false;
				for (int j = 0; j <= S.length() - s.length(); j++) {
					if (S.substring(j, j + s.length()).equals(s)) {
						contains = true;
						break;
					}
				}
				if (!contains) {
					return false;
				}
			}
			return true;
		}
	}
}
