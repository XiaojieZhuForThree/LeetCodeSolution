class Solution:
    def compareVersion(self, version1: str, version2: str) -> int:
        v1 = version1.split('.')
        v2 = version2.split('.')
        
        i = 0
        j = 0
        
        while i < len(v1) or j < len(v2):
            num1 = 0 if i >= len(v1) else int(v1[i])
            num2 = 0 if j >= len(v2) else int(v2[j])
            if num1 != num2:
                return 1 if num1 > num2 else -1
            i += 1
            j += 1
            
        return 0


#include <string>
#include <vector>
using std::string;
class Solution {
public:
    int compareVersion(string version1, string version2) {
        std::vector<int> a = treat(version1), b = treat(version2);
        for (int i = 0; i < std::max(size(a), size(b)); i++) {
            int c1 = 0, c2 = 0;
            if (i < size(a)) c1 = a[i];
            if (i < size(b)) c2 = b[i];
            if (c1 == c2) continue;
            if (c1 < c2) return -1;
            return 1;
        }
        return 0;
    }

private:
    std::vector<int> treat(string& s) {
        std::vector<int> ans;
        int l = 0, r = 0;
        for (; r < size(s); r++) {
            if (s[r] != '.') continue;
            int c = 0;
            for (; l < r; l++) c = c * 10 + (s[l] - '0');
            ans.push_back(c);
            l = r + 1;
        }
        if (l < size(s)) {
            int c = 0;
            for (; l < size(s); l++) c = c * 10 + (s[l] - '0');
            ans.push_back(c);
        }
        return ans;
    }
};
