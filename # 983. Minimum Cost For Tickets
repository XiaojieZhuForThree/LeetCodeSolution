package com.leetcode.problems;

public class Question983 {
	class Solution {
		public int mincostTickets(int[] days, int[] costs) {
			int[] allDaysCost = new int[366];
			for (int i = 0; i < days.length; i++) {
				int day = days[i];
				int bestCost = getBestCost(allDaysCost, costs, day);
				allDaysCost[day] = bestCost;
				if (i < days.length - 1) {
					fillUnusedDays(allDaysCost, day, days[i + 1]);
				}
			}
			return allDaysCost[days[days.length - 1]];
		}

		private final int getBestCost(int[] allDaysCost, int[] costs, int day) {
			int cost1 = day - 1 < 0 ? costs[0] : allDaysCost[day - 1] + costs[0];
			int cost2 = day - 7 < 0 ? costs[1] : allDaysCost[day - 7] + costs[1];
			int cost3 = day - 30 < 0 ? costs[2] : allDaysCost[day - 30] + costs[2];
			return Math.min(cost1, Math.min(cost2, cost3));
		}

		private final void fillUnusedDays(int[] allDaysCost, int day, int nextDay) {
			int bestCost = allDaysCost[day];
			for (; day < nextDay; day++) {
				allDaysCost[day] = bestCost;
			}
		}
	}
}
